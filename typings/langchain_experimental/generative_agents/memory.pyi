"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from typing import Any, Dict, List, Optional
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain.retrievers import TimeWeightedVectorStoreRetriever
from langchain.schema import BaseMemory, Document
from langchain.schema.language_model import BaseLanguageModel

logger = ...
class GenerativeAgentMemory(BaseMemory):
    """Memory for the generative agent."""
    llm: BaseLanguageModel
    memory_retriever: TimeWeightedVectorStoreRetriever
    verbose: bool = ...
    reflection_threshold: Optional[float] = ...
    current_plan: List[str] = ...
    importance_weight: float = ...
    aggregate_importance: float = ...
    max_tokens_limit: int = ...
    queries_key: str = ...
    most_recent_memories_token_key: str = ...
    add_memory_key: str = ...
    relevant_memories_key: str = ...
    relevant_memories_simple_key: str = ...
    most_recent_memories_key: str = ...
    now_key: str = ...
    reflecting: bool = ...
    def chain(self, prompt: PromptTemplate) -> LLMChain:
        ...
    
    def pause_to_reflect(self, now: Optional[datetime] = ...) -> List[str]:
        """Reflect on recent observations and generate 'insights'."""
        ...
    
    def add_memories(self, memory_content: str, now: Optional[datetime] = ...) -> List[str]:
        """Add an observations or memories to the agent's memory."""
        ...
    
    def add_memory(self, memory_content: str, now: Optional[datetime] = ...) -> List[str]:
        """Add an observation or memory to the agent's memory."""
        ...
    
    def fetch_memories(self, observation: str, now: Optional[datetime] = ...) -> List[Document]:
        """Fetch related memories."""
        ...
    
    def format_memories_detail(self, relevant_memories: List[Document]) -> str:
        ...
    
    def format_memories_simple(self, relevant_memories: List[Document]) -> str:
        ...
    
    @property
    def memory_variables(self) -> List[str]:
        """Input keys this memory class will load dynamically."""
        ...
    
    def load_memory_variables(self, inputs: Dict[str, Any]) -> Dict[str, str]:
        """Return key-value pairs given the text input to the chain."""
        ...
    
    def save_context(self, inputs: Dict[str, Any], outputs: Dict[str, Any]) -> None:
        """Save the context of this model run to memory."""
        ...
    
    def clear(self) -> None:
        """Clear memory contents."""
        ...
    


