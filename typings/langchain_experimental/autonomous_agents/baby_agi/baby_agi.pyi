"""
This type stub file was generated by pyright.
"""

from collections import deque
from typing import Any, Dict, List, Optional
from langchain.chains.base import Chain
from langchain.schema.language_model import BaseLanguageModel
from langchain.vectorstores.base import VectorStore
from langchain_experimental.pydantic_v1 import BaseModel

"""BabyAGI agent."""
class BabyAGI(Chain, BaseModel):
    """Controller model for the BabyAGI agent."""
    task_list: deque = ...
    task_creation_chain: Chain = ...
    task_prioritization_chain: Chain = ...
    execution_chain: Chain = ...
    task_id_counter: int = ...
    vectorstore: VectorStore = ...
    max_iterations: Optional[int] = ...
    class Config:
        """Configuration for this pydantic object."""
        arbitrary_types_allowed = ...
    
    
    def add_task(self, task: Dict) -> None:
        ...
    
    def print_task_list(self) -> None:
        ...
    
    def print_next_task(self, task: Dict) -> None:
        ...
    
    def print_task_result(self, result: str) -> None:
        ...
    
    @property
    def input_keys(self) -> List[str]:
        ...
    
    @property
    def output_keys(self) -> List[str]:
        ...
    
    def get_next_task(self, result: str, task_description: str, objective: str, **kwargs: Any) -> List[Dict]:
        """Get the next task."""
        ...
    
    def prioritize_tasks(self, this_task_id: int, objective: str, **kwargs: Any) -> List[Dict]:
        """Prioritize tasks."""
        ...
    
    def execute_task(self, objective: str, task: str, k: int = ..., **kwargs: Any) -> str:
        """Execute a task."""
        ...
    
    @classmethod
    def from_llm(cls, llm: BaseLanguageModel, vectorstore: VectorStore, verbose: bool = ..., task_execution_chain: Optional[Chain] = ..., **kwargs: Dict[str, Any]) -> BabyAGI:
        """Initialize the BabyAGI Controller."""
        ...
    


