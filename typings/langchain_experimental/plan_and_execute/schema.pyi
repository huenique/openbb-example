"""
This type stub file was generated by pyright.
"""

from abc import abstractmethod
from typing import List, Tuple
from langchain.schema import BaseOutputParser
from langchain_experimental.pydantic_v1 import BaseModel

class Step(BaseModel):
    """Step."""
    value: str
    ...


class Plan(BaseModel):
    """Plan."""
    steps: List[Step]
    ...


class StepResponse(BaseModel):
    """Step response."""
    response: str
    ...


class BaseStepContainer(BaseModel):
    """Base step container."""
    @abstractmethod
    def add_step(self, step: Step, step_response: StepResponse) -> None:
        """Add step and step response to the container."""
        ...
    
    @abstractmethod
    def get_final_response(self) -> str:
        """Return the final response based on steps taken."""
        ...
    


class ListStepContainer(BaseStepContainer):
    """List step container."""
    steps: List[Tuple[Step, StepResponse]] = ...
    def add_step(self, step: Step, step_response: StepResponse) -> None:
        ...
    
    def get_steps(self) -> List[Tuple[Step, StepResponse]]:
        ...
    
    def get_final_response(self) -> str:
        ...
    


class PlanOutputParser(BaseOutputParser):
    """Plan output parser."""
    @abstractmethod
    def parse(self, text: str) -> Plan:
        """Parse into a plan."""
        ...
    


