"""
This type stub file was generated by pyright.
"""

import ast
from typing import Any, Dict, List, Optional
from langchain.chains.base import Chain
from langchain.chains.llm import LLMChain
from langchain.schema.language_model import BaseLanguageModel

"""Implements Program-Aided Language Models.

This module implements the Program-Aided Language Models (PAL) for generating code
solutions. PAL is a technique described in the paper "Program-Aided Language Models"
(https://arxiv.org/pdf/2211.10435.pdf).
"""
COMMAND_EXECUTION_FUNCTIONS = ...
class PALValidation:
    SOLUTION_EXPRESSION_TYPE_FUNCTION = ast.FunctionDef
    SOLUTION_EXPRESSION_TYPE_VARIABLE = ast.Name
    def __init__(self, solution_expression_name: Optional[str] = ..., solution_expression_type: Optional[type] = ..., allow_imports: bool = ..., allow_command_exec: bool = ...) -> None:
        """Initialize a PALValidation instance.

        Args:
            solution_expression_name (str): Name of the expected solution expression.
                If passed, solution_expression_type must be passed as well.
            solution_expression_type (str): AST type of the expected solution
                expression. If passed, solution_expression_name must be passed as well.
                Must be one of PALValidation.SOLUTION_EXPRESSION_TYPE_FUNCTION,
                PALValidation.SOLUTION_EXPRESSION_TYPE_VARIABLE.
            allow_imports (bool): Allow import statements.
            allow_command_exec (bool): Allow using known command execution functions.
        """
        ...
    


class PALChain(Chain):
    """Implements Program-Aided Language Models (PAL).

    This class implements the Program-Aided Language Models (PAL) for generating code
    solutions. PAL is a technique described in the paper "Program-Aided Language Models"
    (https://arxiv.org/pdf/2211.10435.pdf).
    """
    llm_chain: LLMChain
    stop: str = ...
    get_answer_expr: str = ...
    python_globals: Optional[Dict[str, Any]] = ...
    python_locals: Optional[Dict[str, Any]] = ...
    output_key: str = ...
    return_intermediate_steps: bool = ...
    code_validations: PALValidation = ...
    timeout: Optional[int] = ...
    class Config:
        """Configuration for this pydantic object."""
        extra = ...
        arbitrary_types_allowed = ...
    
    
    @property
    def input_keys(self) -> List[str]:
        """Return the singular input key.

        :meta private:
        """
        ...
    
    @property
    def output_keys(self) -> List[str]:
        """Return the singular output key.

        :meta private:
        """
        ...
    
    @classmethod
    def validate_code(cls, code: str, code_validations: PALValidation) -> None:
        ...
    
    @classmethod
    def from_math_prompt(cls, llm: BaseLanguageModel, **kwargs: Any) -> PALChain:
        """Load PAL from math prompt.

        Args:
            llm (BaseLanguageModel): The language model to use for generating code.

        Returns:
            PALChain: An instance of PALChain.
        """
        ...
    
    @classmethod
    def from_colored_object_prompt(cls, llm: BaseLanguageModel, **kwargs: Any) -> PALChain:
        """Load PAL from colored object prompt.

        Args:
            llm (BaseLanguageModel): The language model to use for generating code.

        Returns:
            PALChain: An instance of PALChain.
        """
        ...
    


