"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Optional
from langchain.chains.base import Chain
from langchain.chains.llm import LLMChain
from langchain.schema import BasePromptTemplate
from langchain.schema.language_model import BaseLanguageModel
from langchain.utilities.sql_database import SQLDatabase
from langchain_experimental.pydantic_v1 import root_validator

"""Chain for interacting with SQL Database."""
INTERMEDIATE_STEPS_KEY = ...
class SQLDatabaseChain(Chain):
    """Chain for interacting with SQL Database.

    Example:
        .. code-block:: python

            from langchain_experimental.sql import SQLDatabaseChain
            from langchain import OpenAI, SQLDatabase
            db = SQLDatabase(...)
            db_chain = SQLDatabaseChain.from_llm(OpenAI(), db)
    """
    llm_chain: LLMChain
    llm: Optional[BaseLanguageModel] = ...
    database: SQLDatabase = ...
    prompt: Optional[BasePromptTemplate] = ...
    top_k: int = ...
    input_key: str = ...
    output_key: str = ...
    return_sql: bool = ...
    return_intermediate_steps: bool = ...
    return_direct: bool = ...
    use_query_checker: bool = ...
    query_checker_prompt: Optional[BasePromptTemplate] = ...
    class Config:
        """Configuration for this pydantic object."""
        extra = ...
        arbitrary_types_allowed = ...
    
    
    @root_validator(pre=True)
    def raise_deprecation(cls, values: Dict) -> Dict:
        ...
    
    @property
    def input_keys(self) -> List[str]:
        """Return the singular input key.

        :meta private:
        """
        ...
    
    @property
    def output_keys(self) -> List[str]:
        """Return the singular output key.

        :meta private:
        """
        ...
    
    @classmethod
    def from_llm(cls, llm: BaseLanguageModel, db: SQLDatabase, prompt: Optional[BasePromptTemplate] = ..., **kwargs: Any) -> SQLDatabaseChain:
        ...
    


class SQLDatabaseSequentialChain(Chain):
    """Chain for querying SQL database that is a sequential chain.

    The chain is as follows:
    1. Based on the query, determine which tables to use.
    2. Based on those tables, call the normal SQL database chain.

    This is useful in cases where the number of tables in the database is large.
    """
    decider_chain: LLMChain
    sql_chain: SQLDatabaseChain
    input_key: str = ...
    output_key: str = ...
    return_intermediate_steps: bool = ...
    @classmethod
    def from_llm(cls, llm: BaseLanguageModel, database: SQLDatabase, query_prompt: BasePromptTemplate = ..., decider_prompt: BasePromptTemplate = ..., **kwargs: Any) -> SQLDatabaseSequentialChain:
        """Load the necessary chains."""
        ...
    
    @property
    def input_keys(self) -> List[str]:
        """Return the singular input key.

        :meta private:
        """
        ...
    
    @property
    def output_keys(self) -> List[str]:
        """Return the singular output key.

        :meta private:
        """
        ...
    


