"""
This type stub file was generated by pyright.
"""

import argparse
from abc import ABCMeta, abstractmethod
from typing import Any, Dict, List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.terminal_helper import is_auth_enabled

"""Parent Classes."""
__docformat__ = ...
logger = ...
NO_EXPORT = ...
EXPORT_ONLY_RAW_DATA_ALLOWED = ...
EXPORT_ONLY_FIGURES_ALLOWED = ...
EXPORT_BOTH_RAW_DATA_AND_FIGURES = ...
controllers: Dict[str, Any] = ...
CRYPTO_SOURCES = ...
SUPPORT_TYPE = ...
RECORD_SESSION = ...
RECORD_SESSION_LOCAL_ONLY = ...
SESSION_RECORDED = ...
SESSION_RECORDED_NAME = ...
SESSION_RECORDED_DESCRIPTION = ...
SESSION_RECORDED_TAGS = ...
SESSION_RECORDED_PUBLIC = ...
class BaseController(metaclass=ABCMeta):
    """Base class for a terminal controller."""
    CHOICES_COMMON = ...
    if is_auth_enabled():
        ...
    CHOICES_COMMANDS: List[str] = ...
    CHOICES_MENUS: List[str] = ...
    SUPPORT_CHOICES: dict = ...
    ABOUT_CHOICES: dict = ...
    HOLD_CHOICES: dict = ...
    NEWS_CHOICES: dict = ...
    COMMAND_SEPARATOR = ...
    KEYS_MENU = ...
    TRY_RELOAD = ...
    PATH: str = ...
    FILE_PATH: str = ...
    CHOICES_GENERATION = ...
    @property
    def choices_default(self): # -> dict[Unknown, Unknown]:
        ...
    
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Create the base class for any controller in the codebase.

        Used to simplify the creation of menus.

        queue: List[str]
            The current queue of jobs to process separated by "/"
            E.g. /stocks/load gme/dps/sidtc/../exit
        """
        ...
    
    def check_path(self) -> None:
        """Check if command path is valid."""
        ...
    
    def load_class(self, class_ins, *args, **kwargs): # -> Any:
        """Check for an existing instance of the controller before creating a new one."""
        ...
    
    def call_hold(self, other_args: List[str]) -> None:
        ...
    
    def call_askobb(self, other_args: List[str]) -> None:
        """Accept user input as a string and return the most appropriate Terminal command"""
        ...
    
    def save_class(self) -> None:
        """Save the current instance of the class to be loaded later."""
        ...
    
    def custom_reset(self) -> List[str]:
        """Implement custom reset.

        This will be replaced by any children with custom_reset functions.
        """
        ...
    
    @abstractmethod
    def print_help(self) -> None:
        """Print help placeholder."""
        ...
    
    def parse_input(self, an_input: str) -> list:
        """Parse controller input.

        Splits the command chain from user input into a list of individual commands
        while respecting the forward slash in the command arguments.

        In the default scenario only unix-like paths are handles by the parser.
        Override this function in the controller classes that inherit from this one to
        resolve edge cases specific to command arguments on those controllers.

        When handling edge cases add additional regular expressions to the list.

        Parameters
        ----------
        an_input : str
            User input string

        Returns
        ----------
        list
            Command queue as list
        """
        ...
    
    def contains_keys(self, string_to_check: str) -> bool:
        """Check if string contains keys."""
        ...
    
    def log_queue(self) -> None:
        """Log command queue."""
        ...
    
    def log_cmd_and_queue(self, known_cmd: str, other_args_str: str, the_input: str) -> None:
        """Log command and command queue.

        Parameters
        ----------
        known_cmd : str
            Current command
        other_args_str : str
            Command arguments
        the_input : str
            Raw command input (command queue)
        """
        ...
    
    @log_start_end(log=logger)
    def switch(self, an_input: str) -> List[str]:
        """Process and dispatch input.

        Returns
        ----------
        List[str]
            list of commands in the queue to execute
        """
        ...
    
    @log_start_end(log=logger)
    def call_cls(self, _) -> None:
        """Process cls command."""
        ...
    
    @log_start_end(log=logger)
    def call_home(self, _) -> None:
        """Process home command."""
        ...
    
    @log_start_end(log=logger)
    def call_help(self, _) -> None:
        """Process help command."""
        ...
    
    @log_start_end(log=logger)
    def call_about(self, other_args: List[str]) -> None:
        """Process about command."""
        ...
    
    @log_start_end(log=logger)
    def call_quit(self, _) -> None:
        """Process quit menu command."""
        ...
    
    @log_start_end(log=logger)
    def call_exit(self, _) -> None:
        """Process exit terminal command."""
        ...
    
    @log_start_end(log=logger)
    def call_reset(self, _) -> None:
        """Process reset command.

        If you would like to have customization in the reset process define a method
        `custom_reset` in the child class.
        """
        ...
    
    @log_start_end(log=logger)
    def call_resources(self, other_args: List[str]) -> None:
        """Process resources command."""
        ...
    
    @log_start_end(log=logger)
    def call_support(self, other_args: List[str]) -> None:
        """Process support command."""
        ...
    
    @log_start_end(log=logger)
    def call_wiki(self, other_args: List[str]) -> None:
        """Process wiki command."""
        ...
    
    @log_start_end(log=logger)
    def call_record(self, other_args) -> None:
        """Process record command."""
        ...
    
    @log_start_end(log=logger)
    def call_stop(self, _) -> None:
        """Process stop command."""
        ...
    
    @log_start_end(log=logger)
    def call_screenshot(self, other_args: List[str]) -> None:
        """Process screenshot command."""
        ...
    
    @log_start_end(log=logger)
    def call_whoami(self, other_args: List[str]) -> None:
        """Process whoami command."""
        ...
    
    @staticmethod
    def parse_simple_args(parser: argparse.ArgumentParser, other_args: List[str]): # -> Namespace | None:
        """Parse list of arguments into the supplied parser.

        Parameters
        ----------
        parser: argparse.ArgumentParser
            Parser with predefined arguments
        other_args: List[str]
            List of arguments to parse

        Returns
        -------
        ns_parser:
            Namespace with parsed arguments
        """
        ...
    
    @classmethod
    def parse_known_args_and_warn(cls, parser: argparse.ArgumentParser, other_args: List[str], export_allowed: int = ..., raw: bool = ..., limit: int = ...): # -> Namespace | None:
        """Parse list of arguments into the supplied parser.

        Parameters
        ----------
        parser: argparse.ArgumentParser
            Parser with predefined arguments
        other_args: List[str]
            list of arguments to parse
        export_allowed: int
            Choose from NO_EXPORT, EXPORT_ONLY_RAW_DATA_ALLOWED,
            EXPORT_ONLY_FIGURES_ALLOWED and EXPORT_BOTH_RAW_DATA_AND_FIGURES
        raw: bool
            Add the --raw flag
        limit: int
            Add a --limit flag with this number default

        Returns
        ----------
        ns_parser:
            Namespace with parsed arguments
        """
        ...
    
    def menu(self, custom_path_menu_above: str = ...): # -> list[Unknown] | list[str] | list[Unknown | str]:
        """Enter controller menu."""
        ...
    


class StockBaseController(BaseController, metaclass=ABCMeta):
    """Base controller class for stocks related menus."""
    def __init__(self, queue) -> None:
        """Instantiate the base class for Stock Controllers that use a load function."""
        ...
    
    def call_load(self, other_args: List[str]): # -> None:
        """Process load command."""
        ...
    


class CryptoBaseController(BaseController, metaclass=ABCMeta):
    """Base controller class for crypto related menus."""
    def __init__(self, queue) -> None:
        """Instantiate the base class for Crypto Controllers that use a load function."""
        ...
    
    def call_load(self, other_args): # -> None:
        """Process load command."""
        ...
    


