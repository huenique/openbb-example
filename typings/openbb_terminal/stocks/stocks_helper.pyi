"""
This type stub file was generated by pyright.
"""

import pandas as pd
from datetime import datetime
from typing import Dict, Iterable, List, Optional, Union
from openbb_terminal.core.plots.plotly_helper import OpenBBFigure

"""Main helper."""
__docformat__ = ...
logger = ...
exch_file_path = ...
exchange_df = ...
exchange_mappings = ...
def check_datetime(ck_date: Optional[Union[datetime, str]] = ..., start: bool = ...) -> datetime:
    """Check if given argument is string and attempts to convert to datetime.

    Parameters
    ----------
    ck_date : Optional[Union[datetime, str]], optional
        Date to check, by default None
    start : bool, optional
        If True and string is invalid, will return 1100 days ago
        If False and string is invalid, will return today, by default True

    Returns
    -------
    datetime
        Datetime object
    """
    ...

def get_holidays(start: Optional[Union[datetime, str]] = ..., end: Optional[Union[datetime, str]] = ...) -> List[datetime]:
    """Get holidays between start and end dates.

    Parameters
    ----------
    start : Optional[Union[datetime, str]], optional
        Start date, by default None
    end : Optional[Union[datetime, str]], optional
        End date, by default None
    """
    ...

def search(query: str = ..., country: str = ..., sector: str = ..., industry_group: str = ..., industry: str = ..., exchange: str = ..., exchange_country: str = ..., all_exchanges: bool = ..., limit: int = ...) -> pd.DataFrame:
    """Search selected query for tickers.

    Parameters
    ----------
    query : str
        The search term used to find company tickers
    country: str
        Search by country to find stocks matching the criteria
    sector : str
        Search by sector to find stocks matching the criteria
    industry_group : str
        Search by industry group to find stocks matching the criteria
    industry : str
        Search by industry to find stocks matching the criteria
    exchange: str
        Search by exchange to find stock matching the criteria
    exchange_country: str
        Search by exchange country to find stock matching the criteria
    all_exchanges: bool
        Whether to search all exchanges, without this option only the United States market is searched
    limit : int
        The limit of results shown, where 0 means all the results

    Returns
    -------
    df: pd.DataFrame
        Dataframe of search results.
        Empty Dataframe if none are found.

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> openbb.stocks.search(country="United States", exchange_country="Germany")
    """
    ...

def load(symbol: str, start_date: Optional[Union[datetime, str]] = ..., interval: int = ..., end_date: Optional[Union[datetime, str]] = ..., prepost: bool = ..., source: str = ..., weekly: bool = ..., monthly: bool = ..., verbose: bool = ...): # -> DataFrame | None:
    """Load a symbol to perform analysis using the string above as a template.

    Optional arguments and their descriptions are listed above.

    The default source is, yFinance (https://pypi.org/project/yfinance/).
    Other sources:
            -   AlphaVantage (https://www.alphavantage.co/documentation/)
            -   Eod Historical Data (https://eodhistoricaldata.com/financial-apis/)

    Please note that certain analytical features are exclusive to the specific source.

    To load a symbol from an exchange outside of the NYSE/NASDAQ default, use yFinance as the source and
    add the corresponding exchange to the end of the symbol. i.e. `BNS.TO`.  Note this may be possible with
    other paid sources check their docs.

    BNS is a dual-listed stock, there are separate options chains and order books for each listing.
    Opportunities for arbitrage may arise from momentary pricing discrepancies between listings
    with a dynamic exchange rate as a second order opportunity in ForEx spreads.

    Find the full list of supported exchanges here:
    https://help.yahoo.com/kb/exchanges-data-providers-yahoo-finance-sln2310.html

    Certain analytical features, such as VWAP, require the ticker to be loaded as intraday
    using the `-i x` argument.  When encountering this error, simply reload the symbol using
    the interval argument. i.e. `load -t BNS -s YYYY-MM-DD -i 1 -p` loads one-minute intervals,
    including Pre/After Market data, using the default source, yFinance.

    Certain features, such as the Prediction menu, require the symbol to be loaded as daily and not intraday.

    Parameters
    ----------
    symbol: str
        Ticker to get data
    start_date: str or datetime, optional
        Start date to get data from with. - datetime or string format (YYYY-MM-DD)
    interval: int
        Interval (in minutes) to get data 1, 5, 15, 30, 60 or 1440
    end_date: str or datetime, optional
        End date to get data from with. - datetime or string format (YYYY-MM-DD)
    prepost: bool
        Pre and After hours data
    source: str
        Source of data extracted
    weekly: bool
        Flag to get weekly data
    monthly: bool
        Flag to get monthly data
    verbose: bool
        Display verbose information on what was the symbol that was loaded

    Returns
    -------
    df_stock_candidate: pd.DataFrame
        Dataframe of data
    """
    ...

def display_candle(symbol: str, data: Optional[pd.DataFrame] = ..., add_trend: bool = ..., ma: Optional[Iterable[int]] = ..., asset_type: str = ..., start_date: Optional[Union[datetime, str]] = ..., interval: int = ..., end_date: Optional[Union[datetime, str]] = ..., prepost: bool = ..., source: str = ..., weekly: bool = ..., monthly: bool = ..., ha: Optional[bool] = ..., external_axes: bool = ..., raw: bool = ..., yscale: str = ...) -> Union[None, OpenBBFigure]:
    """Show candle plot of loaded ticker.

    [Source: Yahoo Finance, IEX Cloud or Alpha Vantage]

    Parameters
    ----------
    symbol: str
        Ticker name
    data: pd.DataFrame
        Stock dataframe
    add_trend: bool
        Flag to add high and low trends to chart
    ma: Tuple[int]
        Moving averages to add to the candle
    asset_type: str
        String to include in title
    start_date: str or datetime, optional
        Start date to get data from with. - datetime or string format (YYYY-MM-DD)
    interval: int
        Interval (in minutes) to get data 1, 5, 15, 30, 60 or 1440
    end_date: str or datetime, optional
        End date to get data from with. - datetime or string format (YYYY-MM-DD)
    prepost: bool
        Pre and After hours data
    source: str
        Source of data extracted
    weekly: bool
        Flag to get weekly data
    monthly: bool
        Flag to get monthly data
    ha: bool
        Flag to show Heikin Ashi candles.
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    raw : bool, optional
        Flag to display raw data, by default False
    yscale: str
        Linear or log for yscale

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> openbb.stocks.candle("AAPL")
    """
    ...

def process_candle(data: pd.DataFrame) -> pd.DataFrame:
    """Process DataFrame into candle style plot.

    Parameters
    ----------
    data : DataFrame
        Stock dataframe.

    Returns
    -------
    DataFrame
        A Panda's data frame with columns Open, High, Low, Close, Adj Close, Volume,
        date_id, OC-High, OC-Low.
    """
    ...

def find_trendline(df_data: pd.DataFrame, y_key: str, high_low: str = ...) -> pd.DataFrame:
    """Attempt to find a trend line based on y_key column from a given stock ticker data frame.

    Parameters
    ----------
    df_data : DataFrame
        The stock ticker data frame with at least date_id, y_key columns.
    y_key : str
        Column name to base the trend line on.
    high_low: str, optional
        Either "high" or "low". High is the default.

    Returns
    -------
    DataFrame
        If a trend is successfully found,
            An updated Panda's data frame with a trend data {y_key}_trend column.
        If no trend was found,
            An original Panda's data frame
    """
    ...

def additional_info_about_ticker(ticker: str) -> str:
    """Get information about trading the ticker.

    Includes exchange, currency, timezone and market status.

    Parameters
    ----------
    ticker : str
        The stock ticker to extract if stock market is open or not
    Returns
    -------
    str
        Additional information about trading the ticker
    """
    ...

def clean_fraction(num, denom): # -> Literal['N/A']:
    """Return the decimal value or NA if the operation cannot be performed.

    Parameters
    ----------
    num : Any
        The numerator for the fraction
    denom : Any
        The denominator for the fraction

    Returns
    -------
    val : Any
        The value of the fraction
    """
    ...

def load_custom(file_path: str) -> pd.DataFrame:
    """Load in a custom csv file.

    Parameters
    ----------
    file_path: str
        Path to file

    Returns
    -------
    pd.DataFrame
        Dataframe of stock data
    """
    ...

def clean_function(entry: str) -> Union[str, float]:
    """Clean stock data from csv.

    This can be customized for csvs.
    """
    ...

def show_quick_performance(stock_df: pd.DataFrame, ticker: str) -> None:
    """Show quick performance stats of stock prices.

    Daily prices expected.
    """
    ...

def show_codes_polygon(ticker: str): # -> None:
    """Show FIGI, SIC and SIK codes for ticker.

    Parameters
    ----------
    ticker: str
        Stock ticker
    """
    ...

def format_parse_choices(choices: List[str]) -> List[str]:
    """Format a list of strings to be lowercase and replace spaces with underscores.

    Parameters
    ----------
    choices: List[str]
        The options to be formatted

    Returns
    -------
    clean_choices: List[str]
        The cleaned options

    """
    ...

def map_parse_choices(choices: List[str]) -> Dict[str, str]:
    """Create a mapping of clean arguments (keys) to original arguments (values).

    Parameters
    ----------
    choices: List[str]
        The options to be formatted

    Returns
    -------
    clean_choices: Dict[str, str]
        The mapping

    """
    ...

def verify_plot_options(command: str, source: str, plot: list) -> bool:
    """Verify that the plot options are valid for the chosen source."""
    ...

def heikin_ashi(data: pd.DataFrame) -> pd.DataFrame:
    """Return OHLC data as Heikin Ashi Candles.

    Parameters
    ----------
    data: pd.DataFrame
        DataFrame containing OHLC data.

    Returns
    -------
    pd.DataFrame
        Appended DataFrame with Heikin Ashi candle calculations.
    """
    ...

