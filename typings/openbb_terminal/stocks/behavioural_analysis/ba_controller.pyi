"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import StockBaseController

"""Behavioural Analysis Controller Module."""
__docformat__ = ...
logger = ...
class BehaviouralAnalysisController(StockBaseController):
    """Behavioural Analysis Controller class."""
    CHOICES_COMMANDS = ...
    historical_sort = ...
    historical_direction = ...
    historical_metric = ...
    reddit_sort = ...
    reddit_time = ...
    PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, ticker: str, start: datetime, queue: Optional[List[str]] = ...) -> None:
        """Construct a new instance."""
        ...
    
    def print_help(self): # -> None:
        """Print help."""
        ...
    
    def custom_reset(self): # -> list[str] | list[Unknown]:
        """Class specific component of reset command."""
        ...
    
    @log_start_end(log=logger)
    def call_snews(self, other_args: List[str]): # -> None:
        """Process snews command."""
        ...
    
    @log_start_end(log=logger)
    def call_wsb(self, other_args: List[str]): # -> None:
        """Process wsb command."""
        ...
    
    @log_start_end(log=logger)
    def call_popular(self, other_args: List[str]): # -> None:
        """Process popular command."""
        ...
    
    @log_start_end(log=logger)
    def call_getdd(self, other_args: List[str]): # -> None:
        """Process getdd command."""
        ...
    
    @log_start_end(log=logger)
    def call_redditsent(self, other_args: List[str]): # -> None:
        """Process redditsent command."""
        ...
    
    @log_start_end(log=logger)
    def call_bullbear(self, other_args: List[str]): # -> None:
        """Process bullbear command."""
        ...
    
    @log_start_end(log=logger)
    def call_messages(self, other_args: List[str]): # -> None:
        """Process messages command."""
        ...
    
    @log_start_end(log=logger)
    def call_trending(self, other_args: List[str]): # -> None:
        """Process trending command."""
        ...
    
    @log_start_end(log=logger)
    def call_stalker(self, other_args: List[str]): # -> None:
        """Process stalker command."""
        ...
    
    @log_start_end(log=logger)
    def call_mentions(self, other_args: List[str]): # -> None:
        """Process mentions command."""
        ...
    
    @log_start_end(log=logger)
    def call_regions(self, other_args: List[str]): # -> None:
        """Process regions command."""
        ...
    
    @log_start_end(log=logger)
    def call_interest(self, other_args: List[str]): # -> None:
        """Process interest command."""
        ...
    
    @log_start_end(log=logger)
    def call_queries(self, other_args: List[str]): # -> None:
        """Process queries command."""
        ...
    
    @log_start_end(log=logger)
    def call_rise(self, other_args: List[str]): # -> None:
        """Process rise command."""
        ...
    
    @log_start_end(log=logger)
    def call_infer(self, other_args: List[str]): # -> None:
        """Process infer command."""
        ...
    
    @log_start_end(log=logger)
    def call_sentiment(self, other_args: List[str]): # -> None:
        """Process sentiment command."""
        ...
    
    @log_start_end(log=logger)
    def call_headlines(self, other_args: List[str]): # -> None:
        """Process finbrain command."""
        ...
    
    def call_ns(self, other_args: List[str]): # -> None:
        """Process ns command."""
        ...
    


