"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import List, Optional, Tuple
from openbb_terminal.decorators import log_start_end

"""Yahoo Finance Comparison Model"""
__docformat__ = ...
logger = ...
d_candle_types = ...
@log_start_end(log=logger)
def get_historical(similar: List[str], start_date: Optional[str] = ..., end_date: Optional[str] = ..., candle_type: str = ...) -> pd.DataFrame:
    """Get historical prices for all comparison stocks

    Parameters
    ----------
    similar: List[str]
        List of similar tickers.
        Comparable companies can be accessed through
        finnhub_peers(), finviz_peers(), polygon_peers().
    start_date: Optional[str], optional
        Initial date (e.g., 2021-10-01). Defaults to 1 year back
    end_date: Optional[str], optional
        End date (e.g., 2023-01-01). None defaults to today
    candle_type: str, optional
        Candle variable to compare, by default "a" for Adjusted Close. Possible values are: o, h, l, c, a, v, r

    Returns
    -------
    pd.DataFrame
        Dataframe of historical prices for all comparison stocks

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb

    Start by getting similar tickers from finviz for AAPL

    >>> similar = openbb.stocks.comparison_analysis.finviz_peers("AAPL")
    >>> hist_df = openbb.stocks.ca.hist(similar)

    We can specify a start date and an end date
    >>> hist_df_2022 = openbb.stocks.ca.hist(similar, start_date="2022-01-01", end_date="2022-12-31")
    """
    ...

@log_start_end(log=logger)
def get_correlation(similar: List[str], start_date: Optional[str] = ..., end_date: Optional[str] = ..., candle_type: str = ...) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """
    Get historical price correlation. [Source: Yahoo Finance]

    Parameters
    ----------
    similar : List[str]
        List of similar tickers.
        Comparable companies can be accessed through
        finnhub_peers(), finviz_peers(), polygon_peers().
    start_date : Optional[str], optional
        Initial date (e.g., 2021-10-01). Defaults to 1 year back
    end : Optional[str], optional
        Initial date (e.g., 2021-10-01). Defaults to today
    candle_type : str, optional
        OHLCA column to use for candles or R for returns, by default "a" for Adjusted Close

    Returns
    -------
    Tuple[pd.DataFrame, pd.DataFrame]
        Dataframe with correlation matrix, Dataframe with historical prices for all comparison stocks
    """
    ...

@log_start_end(log=logger)
def get_volume(similar: List[str], start_date: Optional[str] = ..., end_date: Optional[str] = ...) -> pd.DataFrame:
    """Get stock volume. [Source: Yahoo Finance]

    Parameters
    ----------
    similar : List[str]
        List of similar tickers.
        Comparable companies can be accessed through
        finnhub_peers(), finviz_peers(), polygon_peers().
    start_date : Optional[str], optional
        Initial date (e.g., 2021-10-01). Defaults to 1 year back
    end_date : Optional[str], optional
        End date (e.g., 2023-01-01). None defaults to today

    Returns
    -------
    pd.DataFrame
        Dataframe with volume for stock
    """
    ...

@log_start_end(log=logger)
def get_1y_sp500() -> pd.DataFrame:
    """
    Gets the last year of Adj Close prices for all current SP 500 stocks.
    They are scraped daily using yfinance at https://github.com/jmaslek/daily_sp_500

    Returns
    -------
    pd.DataFrame
        DataFrame containing last 1 year of closes for all SP500 stocks.
    """
    ...

@log_start_end(log=logger)
def get_sp500_comps_tsne(symbol: str, lr: int = ...) -> pd.DataFrame:
    """
    Runs TSNE on SP500 tickers (along with ticker if not in SP500).
    TSNE is a method of visualing higher dimensional data
    https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html
    Note that the TSNE numbers are meaningless and will be arbitrary if run again.

    Parameters
    ----------
    symbol: str
        Ticker to get comparisons to
    lr: int
        Learning rate for TSNE

    Returns
    -------
    pd.DataFrame
        Dataframe of tickers closest to selected ticker
    """
    ...

