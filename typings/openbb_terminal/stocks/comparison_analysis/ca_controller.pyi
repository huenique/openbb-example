"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Comparison Analysis Controller Module"""
__docformat__ = ...
logger = ...
class ComparisonAnalysisController(BaseController):
    """Comparison Analysis Controller class"""
    CHOICES_COMMANDS = ...
    choices_ohlca = ...
    CHOICES_MENUS: List = ...
    PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, similar: Optional[List[str]] = ..., queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def call_exit(self, _) -> None:
        """Process exit terminal command from forecast menu."""
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    def custom_reset(self): # -> list[str] | list[Unknown]:
        """Class specific component of reset command"""
        ...
    
    @log_start_end(log=logger)
    def call_ticker(self, other_args: List[str]): # -> None:
        """Process ticker command"""
        ...
    
    @log_start_end(log=logger)
    def call_tsne(self, other_args: List[str]): # -> None:
        """Process tsne command"""
        ...
    
    @log_start_end(log=logger)
    def call_get(self, other_args: List[str]): # -> None:
        """Process get command"""
        ...
    
    @log_start_end(log=logger)
    def call_add(self, other_args: List[str]): # -> None:
        """Process add command"""
        ...
    
    @log_start_end(log=logger)
    def call_rmv(self, other_args: List[str]): # -> None:
        """Process rmv command"""
        ...
    
    @log_start_end(log=logger)
    def call_set(self, other_args: List[str]): # -> None:
        """Process set command"""
        ...
    
    @log_start_end(log=logger)
    def call_historical(self, other_args: List[str]): # -> None:
        """Process historical command"""
        ...
    
    @log_start_end(log=logger)
    def call_hcorr(self, other_args: List[str]): # -> None:
        """Process historical correlation command"""
        ...
    
    @log_start_end(log=logger)
    def call_income(self, other_args: List[str]): # -> None:
        """Process income command"""
        ...
    
    @log_start_end(log=logger)
    def call_volume(self, other_args: List[str]): # -> None:
        """Process volume command"""
        ...
    
    @log_start_end(log=logger)
    def call_balance(self, other_args: List[str]): # -> None:
        """Process balance command"""
        ...
    
    @log_start_end(log=logger)
    def call_cashflow(self, other_args: List[str]): # -> None:
        """Process cashflow command"""
        ...
    
    @log_start_end(log=logger)
    def call_sentiment(self, other_args: List[str]): # -> None:
        """Process sentiment command"""
        ...
    
    @log_start_end(log=logger)
    def call_scorr(self, other_args: List[str]): # -> None:
        """Process sentiment correlation command"""
        ...
    
    @log_start_end(log=logger)
    def call_overview(self, other_args: List[str]): # -> None:
        """Process overview command"""
        ...
    
    @log_start_end(log=logger)
    def call_valuation(self, other_args: List[str]): # -> None:
        """Process valuation command"""
        ...
    
    @log_start_end(log=logger)
    def call_financial(self, other_args: List[str]): # -> None:
        """Process financial command"""
        ...
    
    @log_start_end(log=logger)
    def call_ownership(self, other_args: List[str]): # -> None:
        """Process ownership command"""
        ...
    
    @log_start_end(log=logger)
    def call_performance(self, other_args: List[str]): # -> None:
        """Process performance command"""
        ...
    
    @log_start_end(log=logger)
    def call_technical(self, other_args: List[str]): # -> None:
        """Process technical command"""
        ...
    


