"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Dict, List
from openbb_terminal.decorators import log_start_end

logger = ...
d_SectorSubsectorIndustry = ...
d_open_insider = ...
@log_start_end(log=logger)
def check_valid_range(category: str, field: str, val: str, min_range: int, max_range: int) -> str:
    """Check valid range of data being used

    Parameters
    ----------
    category : str
        category of open insider screener
    field : str
        field from category of open insider screener
    val : str
        value's field of category from open insider screener
    min_range : int
        min value to allow
    max_range : int
        max value to allow

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_dates(d_date: Dict) -> str:
    """Check valid dates

    Parameters
    ----------
    d_date : Dict
        dictionary with dates from open insider

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_valid_multiple(category: str, field: str, val: str, multiple: int) -> str:
    """Check valid value being a multiple

    Parameters
    ----------
    category : str
        category of open insider screener
    field : str
        field from category of open insider screener
    val : str
        value's field of category from open insider screener
    multiple : int
        value must be multiple of this number

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_boolean_list(category: str, d_data: Dict, l_fields_to_check: List) -> str:
    """Check list of fields being bools

    Parameters
    ----------
    category : str
        category of open insider screener
    d_data : Dict
        data dictionary
    l_fields_to_check : List[str]
        list of fields from data dictionary to check if they are bool

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_in_list(category: str, field: str, val: int, l_possible_vals: List[str]) -> str:
    """Check value being in possible list

    Parameters
    ----------
    category : str
        category of open insider screener
    field : str
        field from category of open insider screener
    val : str
        value's field of category from open insider screener
    l_possible_vals : List[str]
        list of possible values that should be allowed

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_int_in_list(category: str, field: str, val: str, l_possible_vals: List[int]) -> str:
    """Check int value being in possible list

    Parameters
    ----------
    category : str
        category of open insider screener
    field : str
        field from category of open insider screener
    val : str
        value's field of category from open insider screener
    l_possible_vals : List[str]
        list of possible values that should be allowed

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_open_insider_general(d_general) -> str:
    """Check valid open insider general

    Parameters
    ----------
    d_date : Dict
        dictionary of general

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_open_insider_date(d_date: Dict) -> str:
    """Check valid open insider date

    Parameters
    ----------
    d_date : Dict
        dictionary of date

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_open_insider_transaction_filing(d_transaction_filing: Dict) -> str:
    """Check valid open insider transaction filing

    Parameters
    ----------
    d_transaction_filing : Dict
        dictionary of transaction filing

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_open_insider_industry(d_industry: Dict) -> str:
    """Check valid open insider industry

    Parameters
    ----------
    d_industry : Dict
        dictionary of industry

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_open_insider_insider_title(d_insider_title: Dict) -> str:
    """Check valid open insider title

    Parameters
    ----------
    d_insider_title : Dict
        dictionary of title

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_open_insider_others(d_others: Dict) -> str:
    """Check valid open insider others

    Parameters
    ----------
    d_others : Dict
        dictionary of others

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_open_insider_company_totals(d_company_totals: Dict) -> str:
    """Check valid open insider company totals

    Parameters
    ----------
    d_company_totals : Dict
        dictionary of company totals

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def check_open_insider_screener(d_general: Dict, d_date: Dict, d_transaction_filing: Dict, d_industry: Dict, d_insider_title: Dict, d_others: Dict, d_company_totals: Dict) -> str:
    """Check valid open insider screener

    Parameters
    ----------
    d_general : Dict
        dictionary of general
    d_date : Dict
        dictionary of date
    d_transaction_filing : Dict
        dictionary of transaction filing
    d_industry : Dict
        dictionary of industry
    d_insider_title : Dict
        dictionary of insider title
    d_others : Dict
        dictionary of others
    d_company_totals : Dict
        dictionary of company totals

    Returns
    -------
    error : str
        error message. If empty, no error.
    """
    ...

@log_start_end(log=logger)
def get_preset_choices() -> Dict:
    """
    Return a dict containing keys as name of preset and
    filepath as value
    """
    ...

@log_start_end(log=logger)
def get_open_insider_link(preset_loaded: str) -> str:
    """Get open insider link

    Parameters
    ----------
    preset_loaded: str
        Loaded preset filter

    Returns
    -------
    link : str
        open insider filtered link
    """
    ...

@log_start_end(log=logger)
def get_open_insider_data(url: str, has_company_name: bool) -> pd.DataFrame:
    """Get open insider link

    Parameters
    ----------
    url: str
        open insider link with filters to retrieve data from
    has_company_name: bool
        contains company name columns

    Returns
    -------
    data : pd.DataFrame
        open insider filtered data
    """
    ...

@log_start_end(log=logger)
def get_insider_types() -> Dict:
    """Get insider types available for insider data

    Returns:
        Dict: Dictionary with insider types and respective description
    """
    ...

@log_start_end(log=logger)
def get_print_insider_data(type_insider: str = ...): # -> DataFrame:
    """Print insider data

    Parameters
    ----------
    type_insider: str
        Insider type of data. Available types can be accessed through get_insider_types().

    Returns
    -------
    data : pd.DataFrame
        Open insider filtered data
    """
    ...

