"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Discovery Controller Module."""
__docformat__ = ...
logger = ...
class DiscoveryController(BaseController):
    """Discovery Controller class"""
    CHOICES_COMMANDS = ...
    arkord_sortby_choices = ...
    arkord_fund_choices = ...
    PATH = ...
    dividend_columns = ...
    heatmap_timeframes = ...
    CHOICES_GENERATION = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    @log_start_end(log=logger)
    def call_divcal(self, other_args: List[str]): # -> None:
        """Process divcal command"""
        ...
    
    @log_start_end(log=logger)
    def call_pipo(self, other_args: List[str]): # -> None:
        """Process pipo command"""
        ...
    
    @log_start_end(log=logger)
    def call_fipo(self, other_args: List[str]): # -> None:
        """Process fipo command"""
        ...
    
    @log_start_end(log=logger)
    def call_gainers(self, other_args: List[str]): # -> None:
        """Process gainers command"""
        ...
    
    @log_start_end(log=logger)
    def call_losers(self, other_args: List[str]): # -> None:
        """Process losers command"""
        ...
    
    @log_start_end(log=logger)
    def call_ugs(self, other_args: List[str]): # -> None:
        """Process ugs command"""
        ...
    
    @log_start_end(log=logger)
    def call_gtech(self, other_args: List[str]): # -> None:
        """Process gtech command"""
        ...
    
    @log_start_end(log=logger)
    def call_active(self, other_args: List[str]): # -> None:
        """Process active command"""
        ...
    
    @log_start_end(log=logger)
    def call_ulc(self, other_args: List[str]): # -> None:
        """Process ulc command"""
        ...
    
    @log_start_end(log=logger)
    def call_asc(self, other_args: List[str]): # -> None:
        """Process asc command"""
        ...
    
    @log_start_end(log=logger)
    def call_arkord(self, other_args: List[str]): # -> None:
        """Process arkord command"""
        ...
    
    @log_start_end(log=logger)
    def call_upcoming(self, other_args: List[str]): # -> None:
        """Process upcoming command"""
        ...
    
    @log_start_end(log=logger)
    def call_trending(self, other_args: List[str]): # -> None:
        """Process trending command"""
        ...
    
    @log_start_end(log=logger)
    def call_lowfloat(self, other_args: List[str]): # -> None:
        """Process lowfloat command"""
        ...
    
    @log_start_end(log=logger)
    def call_hotpenny(self, other_args: List[str]): # -> None:
        """Process hotpenny command"""
        ...
    
    @log_start_end(log=logger)
    def call_rtat(self, other_args: List[str]): # -> None:
        """Process rtat command"""
        ...
    
    @log_start_end(log=logger)
    def call_filings(self, other_args: List[str]) -> None:
        """Process Filings command"""
        ...
    
    @log_start_end(log=logger)
    def call_heatmap(self, other_args: List[str]): # -> None:
        """Process heatmap command"""
        ...
    


