"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Optional, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.decorators import log_start_end

"""Quiverquant View"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def display_last_government(gov_type: str = ..., limit: int = ..., representative: str = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display last government trading [Source: quiverquant.com]

    Parameters
    ----------
    gov_type: str
        Type of government data between: congress, senate and house
    limit: int
        Number of days to look back
    representative: str
        Specific representative to look at
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    """
    ...

@log_start_end(log=logger)
def display_government_buys(gov_type: str = ..., past_transactions_months: int = ..., limit: int = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Top buy government trading [Source: quiverquant.com]

    Parameters
    ----------
    gov_type: str
        Type of government data between: congress, senate and house
    past_transactions_months: int
        Number of months to get trading for
    limit: int
        Number of tickers to show
    raw: bool
        Display raw data
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    """
    ...

@log_start_end(log=logger)
def display_government_sells(gov_type: str = ..., past_transactions_months: int = ..., limit: int = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Top sell government trading [Source: quiverquant.com]

    Parameters
    ----------
    gov_type: str
        Type of government data between: congress, senate and house
    past_transactions_months: int
        Number of months to get trading for
    limit: int
        Number of tickers to show
    raw: bool
        Display raw data
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_last_contracts(past_transaction_days: int = ..., limit: int = ..., sum_contracts: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Last government contracts [Source: quiverquant.com]

    Parameters
    ----------
    past_transaction_days: int
        Number of days to look back
    limit: int
        Number of contracts to show
    sum_contracts: bool
        Flag to show total amount of contracts given out.
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def plot_government(government: pd.DataFrame, symbol: str, gov_type: str, external_axes: bool = ...) -> Optional[OpenBBFigure]:
    """Helper for plotting government trading

    Parameters
    ----------
    government: pd.DataFrame
        Data to plot
    symbol: str
        Ticker symbol to plot government trading
    gov_type: str
        Type of government data between: congress, senate and house
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_government_trading(symbol: str, gov_type: str = ..., past_transactions_months: int = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Government trading for specific ticker [Source: quiverquant.com]

    Parameters
    ----------
    symbol: str
        Ticker symbol to get congress trading data from
    gov_type: str
        Type of government data between: congress, senate and house
    past_transactions_months: int
        Number of months to get transactions for
    raw: bool
        Show raw output of trades
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_contracts(symbol: str, past_transaction_days: int = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Show government contracts for ticker [Source: quiverquant.com]

    Parameters
    ----------
    symbol: str
        Ticker to get congress trading data from
    past_transaction_days: int
        Number of days to get transactions for
    raw: bool
        Flag to display raw data
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_qtr_contracts(analysis: str = ..., limit: int = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Quarterly contracts [Source: quiverquant.com]

    Parameters
    ----------
    analysis: str
        Analysis to perform.  Either 'total', 'upmom' 'downmom'
    limit: int
        Number to show
    raw: bool
        Flag to display raw data
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_hist_contracts(symbol: str, raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Show historical quarterly government contracts [Source: quiverquant.com]

    Parameters
    ----------
    symbol: str
        Ticker symbol to get congress trading data from
    raw: bool
        Flag to display raw data
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_top_lobbying(limit: int = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Top lobbying tickers based on total spent

    Parameters
    ----------
    limit: int
        Number of tickers to show
    raw: bool
        Show raw data
    export:
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    """
    ...

@log_start_end(log=logger)
def display_lobbying(symbol: str, limit: int = ...): # -> None:
    """Corporate lobbying details

    Parameters
    ----------
    symbol: str
        Ticker symbol to get corporate lobbying data from
    limit: int
        Number of events to show
    """
    ...

