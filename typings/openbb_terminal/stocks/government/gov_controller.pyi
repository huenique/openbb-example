"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import StockBaseController

""" Government Controller Module """
__docformat__ = ...
logger = ...
class GovController(StockBaseController):
    """Gov Controller class"""
    CHOICES_COMMANDS = ...
    gov_type_choices = ...
    analysis_choices = ...
    PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, ticker: str, queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    def custom_reset(self): # -> list[str] | list[Unknown]:
        """Class specific component of reset command"""
        ...
    
    @log_start_end(log=logger)
    def call_lasttrades(self, other_args: List[str]): # -> None:
        """Process lasttrades command"""
        ...
    
    @log_start_end(log=logger)
    def call_topbuys(self, other_args: List[str]): # -> None:
        """Process topbuys command"""
        ...
    
    @log_start_end(log=logger)
    def call_topsells(self, other_args: List[str]): # -> None:
        """Process topsells command"""
        ...
    
    @log_start_end(log=logger)
    def call_lastcontracts(self, other_args: List[str]): # -> None:
        """Process lastcontracts command"""
        ...
    
    @log_start_end(log=logger)
    def call_qtrcontracts(self, other_args: List[str]): # -> None:
        """Process qtrcontracts command"""
        ...
    
    @log_start_end(log=logger)
    def call_toplobbying(self, other_args: List[str]): # -> None:
        """Process toplobbying command"""
        ...
    
    @log_start_end(log=logger)
    def call_gtrades(self, other_args: List[str]): # -> None:
        """Process gtrades command"""
        ...
    
    @log_start_end(log=logger)
    def call_contracts(self, other_args: List[str]): # -> None:
        """Process contracts command"""
        ...
    
    @log_start_end(log=logger)
    def call_histcont(self, other_args: List[str]): # -> None:
        """Process histcont command"""
        ...
    
    @log_start_end(log=logger)
    def call_lobbying(self, other_args: List[str]): # -> None:
        """Process lobbying command"""
        ...
    


