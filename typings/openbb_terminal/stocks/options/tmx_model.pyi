"""
This type stub file was generated by pyright.
"""

import pandas as pd
from openbb_terminal.stocks.options.op_helpers import Options

"""Model for retrieving public options data from the Montreal OptionsChains Exchange."""
__docformat__ = ...
cal = ...
holidays = ...
def check_weekday(date) -> str:
    """Helper function to check if the input date is a weekday, and if not, returns the next weekday.

    Parameters
    ----------
    date: str
        The date to check in YYYY-MM-DD format.

    Returns
    -------
    str
        Date in YYYY-MM-DD format.  If the date is a weekend, returns the date of the next weekday.

    Examples
    --------
    >>> from openbb_terminal.stocks.options import tmx_model
    >>> tmx_model.check_weekday("2023-05-20")
    >>> tmx_model.check_weekday("2023-05-22")
    """
    ...

def get_all_ticker_symbols() -> pd.DataFrame:
    """Returns a DataFrame with all valid ticker symbols."""
    ...

SYMBOLS = ...
def get_underlying_price(symbol: str) -> pd.Series:
    """Gets the current price and performance of the underlying asset from the Canadian Securities Exchange.

    Note: Volume is CSE only and is not a consolidated value.

    Parameters
    ----------
    symbol: str
        The ticker symbol of the underlying asset.

    Returns
    -------
    pd.Series
        Series of the current price and performance of the underlying asset.
    """
    ...

def check_symbol(symbol: str) -> bool:
    """Checks if the symbol is valid.  This function is used as an internal helper.

    Parameters
    ----------
    symbol: str
        The ticker symbol to check.

    Returns
    -------
    bool: True if the symbol is valid, False otherwise.

    Examples
    --------
    >>> from openbb_terminal.stocks.options import tmx_model
    >>> tmx_model.check_symbol("AC")
    >>> tmx_model.check_symbol("SPX")
    """
    ...

def get_chains(symbol: str = ...) -> Options:
    """Gets the current quotes for the complete options chain.
    No implied volatility is returned from this method.
    Use `get_eodchains()` to get the implied volatility.

    Parameters
    ----------
    symbol: str
        The ticker symbol of the underlying asset.

    Returns
    -------
    object: OptionsChains
        chains: pd.DataFrame
            The complete options chain for the ticker.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: pd.Series
            The price and recent performance of the underlying asset.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data, "TMX".
        SYMBOLS: pd.DataFrame
            TMX symbol directory.

    Example
    -------
    >>> from openbb_terminal.stocks.options import tmx_model
    >>> ticker = tmx_model.get_quotes("AC")
    >>> chains = ticker.chains
    """
    ...

def get_eodchains(symbol: str = ..., date: str = ...) -> Options:
    """Gets the complete options chain for the EOD on a specific date.
    Open Interest values are from the previous day.

    Parameters
    ----------
    symbol: str
        The ticker symbol of the underlying asset.
    date: str
        The date to get the EOD chain for. Formatted as YYYY-MM-DD.

    Returns
    -------
    object: Options
        chains: pd.DataFrame
            The complete options chain for the ticker.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: pd.Series
            The price and recent performance of the underlying asset.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data, "TMX".
        date: str
            The date, if applicable, for the EOD chains data. (YYYY-MM-DD)
        SYMBOLS: pd.DataFrame
            TMX symbol directory.

    Examples
    --------
    >>> from openbb_terminal.stocks.options import tmx_model
    >>> xiu = tmx_model.get_eodchains("XIU", "2009-01-01")
    >>> chains = xiu.chains
    """
    ...

def load_options(symbol: str, date: str = ..., pydantic: bool = ...) -> Options:
    """Options data object for TMX.

    Parameters
    ----------
    symbol : str
        The ticker symbol to load.
    date: Optional[str]
        The date for EOD chains data.
    pydantic: bool
        Whether to return the object as a Pydantic Model or a subscriptable Pandas Object.  Default is False.

    Returns
    -------
    object: Options
        chains: pd.DataFrame
            The complete options chain for the ticker. Returns a dictionary if pydantic is True.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: pd.Series
            The price and recent performance of the underlying asset. Returns a dictionary if pydantic is True.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data, "TMX".
        date: str
            The date, if applicable, for the EOD chains data. (YYYY-MM-DD)
        SYMBOLS: pd.DataFrame
            TMX symbol directory. Returns a dictionary if pydantic is True.

    Examples
    --------
    Get current options chains for RY.
    >>> from openbb_terminal.stocks.options.tmx_model import load_options
    >>> data = load_options("RY")
    >>> chains = data.chains

    Get options chains for RY for a specific date.
    >>> from openbb_terminal.stocks.options.tmx_model import load_options
    >>> data = load_options("RY", "2022-01-03")
    >>> chains = data.chains

    Return the object as a Pydantic Model.
    >>> from openbb_terminal.stocks.options.tmx_model import load_options
    >>> data = load_options("RY", pydantic=True)
    """
    ...

