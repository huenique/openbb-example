"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Any, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.stocks.options.op_helpers import Options

""" Options Chains Module """
__docformat__ = ...
logger = ...
SOURCES = ...
@log_start_end(log=logger)
def load_options_chains(symbol: str, source: str = ..., date: str = ..., pydantic: bool = ...) -> Options:
    """Loads all options chains from a specific source, fields returned to each attribute will vary.

    Parameters
    ----------
    symbol : str
        The underlying asset's symbol.
    source: str
        The source of the data. Choices are "CBOE", "YahooFinance", "Tradier", "Intrinio", "Nasdaq", or "TMX".
    date: Optional[str]
        The date for the EOD option chain.  Format: YYYY-MM-DD.
        This parameter is only available for "TMX" or "Intrinio".
    pydantic: bool
        Whether to return the object as a Pydantic Model or a subscriptable Pandas object.  Default is False.

    Returns
    -------
    Options: Options data object

        chains: dict
            All options chains data from a specific source.  Returns as a Pandas DataFrame if pydantic is False.
        expirations: list[str]
            List of all unique expiration dates.
        hasGreeks: bool
            True if the source returns greeks with the chains data.
        hasIV: bool
            True if the source returns implied volatility with the chains data.
        last_price: float
            The last price (or the price at the EOD for the date.of the EOD option chain).
        source: str
            The source that was entered in the input.
        strikes: list[float]
            List of all unique strike prices.
        symbol: str
            The symbol that was entered in the input.
        SYMBOLS: pd.DataFrame
            The symbol directory to the selected source, when available.  Only returned when pydantic is False.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: dict
            The underlying asset's price and performance.  Returns as a Pandas Series if pydantic is False.

    Examples
    --------
    Loads SPY data from CBOE, returns as a Pydantic Model, and displays the longest-dated expiration chain.

    >>> from openbb_terminal.sdk import openbb
    >>> import pandas as pd
    >>> data = openbb.stocks.options.load_options_chains("SPY", pydantic = True)
    >>> chains = pd.DataFrame(data.chains)
    >>> chains[chains["expiration"] == data.expirations[-1]]

    Loads QQQ data from Tradier as a Pydantic Model.

    >>> from openbb_terminal.sdk import openbb
    >>> data = openbb.stocks.options.load_options_chains("QQQ", source = "Tradier", pydantic = True)

    Loads VIX data from YahooFinance as a Pandas object.

    >>> from openbb_terminal.sdk import openbb
    >>> data = openbb.stocks.options.load_options_chains("^VIX", source = "YahooFinance")

    Loads XIU data from TMX and displays the 25 highest open interest options.

    >>> from openbb_terminal.sdk  import openbb
    >>> data = openbb.stocks.options.load_options_chains("XIU", "TMX")
    >>> data.chains.sort_values("openInterest", ascending=False).head(25)

    Loads the EOD chains data for XIU.TO from March 15, 2020, sorted by number of transactions.

    >>> from openbb_terminal.sdk  import openbb
    >>> data = openbb.stocks.options.load_options_chains("XIU.TO", "TMX", "2020-03-15")
    >>> data.chains.sort_values("transactions", ascending=False).head(25)
    """
    ...

def validate_object(options: Options, scope: Optional[str] = ..., days: Optional[int] = ...) -> Any:
    """This is an internal helper function for validating the Options data object passed
    through the input of functions defined in the OptionsChains class.  The purpose is to handle
    multi-type inputs with backwards compatibility and provide robust error handling.  The return
    is the portion of the object, or a true/false validation, required to perform the operation.

    Parameters
    ----------
    options : object
        The Options data object.
        Accepts both Pydantic and Pandas object types, as defined by `load_options_chains()`.
        A Pandas DataFrame, or dictionary, with the options chains data is also accepted.
    scope: str
        The scope of the data needing to be validated.  Choices are: ["chains", "object", "strategies", "nonZeroPrices"]
    days: int
        The number of target number of days until the expiration.

    Returns
    -------
    Any:
        if scope == "chains":
            pd.DataFrame
                Pandas DataFrame with the validated data.
        if scope == "object" or scope == "strategies":
            bool
                True if the object is a valid Options data object.

    Examples
    --------
    Load some data first:
    >>> from openbb_terminal.stocks.options import options_chains_model
    >>> data = options_chains_model.load_options_chains("SPY")
    To extract just the chains data, use:
    >>> chains = options_chains_model.validate_object(data, scope="chains")
    To pass as a true/false validation, use:
    >>> if options_chains_model.validate_object(data, scope="object") is False:
    >>>     return
    To pass and return the entire object for non-zero prices:
    >>> if options_chains_model.validate_object(data, scope="object") is True:
    >>>     data = options_chains_model.validate_object(data, scope="nonZeroPrices")
    """
    ...

def get_nearest_expiration(options: Options, expiration: Optional[str] = ...) -> str:
    """Gets the closest expiration date to the target date."""
    ...

def get_nearest_dte(options: Options, days: Optional[int] = ...) -> int:
    """Gets the closest expiration date to the target number of days until expiry.

    Parameters
    ----------
    options : object
        The Options data object.  Use load_options_chains() to load the data.
    days: int
        The target number of days until expiry.  Default is 30 days.

    Returns
    -------
    int
        The closest expiration date to the target number of days until expiry, expressed as DTE.

    Example
    -------
    >>> from openbb_terminal.stocks.options import options_chains_model
    >>> data = options_chains_model.load_options_chains("QQQ")
    >>> options_chains_model.get_nearest_dte(data, 42)
    >>> options_chains_model.get_nearest_dte(data, 90)
    """
    ...

def get_nearest_call_strike(options: Options, days: Optional[int] = ..., strike_price: Optional[float] = ...) -> float:
    """Gets the closest call strike to the target price and number of days until expiry.

    Parameters
    ----------
    options : object
        The Options data object.  Use load_options_chains() to load the data.
    days: int
        The target number of days until expiry.  Default is 30 days.
    strike_price: float
        The target strike price.  Default is the last price of the underlying stock.

    Returns
    -------
    float
        The closest strike price to the target price and number of days until expiry.

    Example
    -------
    >>> from openbb_terminal.stocks.options import options_chains_model
    >>> data = options_chains_model.load_options_chains("SPY")
    >>> options_chains_model.get_nearest_call_strike(data)
    >>> options_chains_model.get_nearest_call_strike(data, 180, 427)
    >>> days = data.chains.dte.unique().tolist()
    >>> for day in days:
    >>>     print(get_nearest_call_strike(data, day))
    """
    ...

def get_nearest_put_strike(options: Options, days: Optional[int] = ..., strike_price: Optional[float] = ...) -> float:
    """Gets the closest put strike to the target price and number of days until expiry.

    Parameters
    ----------
    options : object
        The Options data object.  Use load_options_chains() to load the data.
    days: int
        The target number of days until expiry.  Default is 30 days.
    strike_price: float
        The target strike price.  Default is the last price of the underlying stock.

    Returns
    -------
    float
        The closest strike price to the target price and number of days until expiry.

    Example
    -------
    >>> from openbb_terminal.stocks.options import options_chains_model
    >>> data = options_chains_model.load_options_chains('SPY')
    >>> options_chains_model.get_nearest_put_strike(data, 90, 402)
    >>> options_chains_model.get_nearest_put_strike(data, 90)
    >>> days = data.chains.dte.unique().tolist()
    >>> for day in days:
    >>>     print(get_nearest_put_strike(data, day))
    """
    ...

def get_nearest_otm_strike(options: Options, moneyness: Optional[float] = ...) -> dict[str, float]:
    """Gets the nearest put and call strikes at a given percent OTM from the underlying price.

    Parameters
    ----------
    options : OptionsChains
        The Options data object.  Use load_options_chains() to load the data.
    moneyness: float
        The target percent OTM, expressed as a percent between 0 and 100.  Default is 5.

    Returns
    -------
    dict[str, float]
        Dictionary of the upper (call) and lower (put) strike prices.

    Example
    -------
    >>> from openbb_terminal.stocks.options import options_chains_model
    >>> data = options_chains_model.load_options_chains('SPY')
    >>> strikes = options_chains_model.get_nearest_otm_strike(data, 5)
    """
    ...

def calculate_straddle(options: Options, days: Optional[int] = ..., strike: float = ...) -> pd.DataFrame:
    """Calculates the cost of a straddle and its payoff profile. Use a negative strike price for short options.
    Requires the Options data object.

    Parameters
    ----------
    options : object
        The Options data object. Use load_options_chains() to load the data.
    days: int
        The target number of days until expiry. Default is 30 days.
    strike: float
        The target strike price. Enter a negative value for short options.
        Default is the last price of the underlying stock.

    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with the results. Strike1 is the nearest call strike, strike2 is the nearest put strike.

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> data = openbb.stocks.options.load_options_chains('SPY')
    >>> openbb.stocks.options.calculate_straddle(data)
    """
    ...

def calculate_strangle(options: Options, days: Optional[int] = ..., moneyness: Optional[float] = ...) -> pd.DataFrame:
    """Calculates the cost of a strangle and its payoff profile.  Use a negative value for moneyness for short options.

    Requires the Options data object.

    Parameters
    ----------
    options : object
        The Options data object.  Use load_options_chains() to load the data.
    days: int
        The target number of days until expiry.  Default is 30 days.
    moneyness: float
        The percentage of OTM moneyness, expressed as a percent between -100 < 0 < 100.
        Enter a negative number for short options.
        Default is 5.

    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with the results. Strike 1 is the nearest call strike, and strike 2 is the nearest put strike.

    Examples
    --------
    >>> data = openbb.stocks.options.load_options_chains("SPY")
    >>> data.calculate_strangle()
    """
    ...

def calculate_vertical_call_spread(options: Options, days: Optional[int] = ..., sold_strike: Optional[float] = ..., bought_strike: Optional[float] = ...) -> pd.DataFrame:
    """Calculates the vertical call spread for the target DTE.
    A bull call spread is when the sold strike is above the bought strike.

    Parameters
    ----------
    options : object
        The Options data object. Use load_options_chains() to load the data.
    days: int
        The target number of days until expiry. This value will be used to get the nearest valid DTE.
        Default is 30 days.
    sold_strike: float
        The target strike price for the short leg of the vertical call spread.
        Default is the 5% OTM above the last price of the underlying.
    bought_strike: float
        The target strike price for the long leg of the vertical call spread. Default is the last price of the underlying.

    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with the results. Strike 1 is the sold strike, and strike 2 is the bought strike.

    Examples
    --------
    Load the data:
    >>> from openbb_terminal.stocks.options.options_chains_model import OptionsChains()
    >>> data = op.load_options_chains("QQQ")

    For a bull call spread:
    >>> data.calculate_vertical_call_spread(days=10, sold_strike=355, bought_strike=350)

    For a bear call spread:
    >>> data.calculate_vertical_call_spread(days=10, sold_strike=350, bought_strike=355)
    """
    ...

def calculate_vertical_put_spread(options: Options, days: Optional[int] = ..., sold_strike: Optional[float] = ..., bought_strike: Optional[float] = ...) -> pd.DataFrame:
    """Calculates the vertical put spread for the target DTE.
    A bear put spread is when the bought strike is above the sold strike.

    Parameters
    ----------
    options : object
        The Options data object. Use load_options_chains() to load the data.
    days: int
        The target number of days until expiry. This value will be used to get the nearest valid DTE.
        Default is 30 days.
    sold_strike: float
        The target strike price for the short leg of the vertical put spread. Default is the last price of the underlying.
    bought_strike: float
        The target strike price for the long leg of the vertical put spread.
        Default is the 5% OTM above the last price of the underlying.

    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with the results. Strike 1 is the sold strike, strike 2 is the bought strike.

    Examples
    --------
    Load the data:
    >>> from openbb_terminal.stocks.options.options_chains_model import OptionsChains()
    >>> data = OptionsChains("QQQ")

    For a bull put spread:
    >>> data.get_vertical_put_spread(data, days=10, sold_strike=355, bought_strike=350)

    For a bear put spread:
    >>> data.get_vertical_put_spread(data, days=10, sold_strike=355, bought_strike=350)
    """
    ...

def calculate_synthetic_long(options: Options, days: Optional[int] = ..., strike: float = ...) -> pd.DataFrame:
    """Calculates the cost of a synthetic long position at a given strike.
    It is expressed as the difference between a bought call and a sold put.
    Requires the Options data object.

    Parameters
    -----------
    options : Options
        The Options data object. Use load_options_chains() to load the data.
    days: int
        The target number of days until expiry. Default is 30 days.
    strike: float
        The target strike price. Default is the last price of the underlying stock.

    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with the results. Strike1 is the purchased call strike, strike2 is the sold put strike.

    Example
    --------
    >>> from openbb_terminal.stocks.options import options_chains_model
    >>> data = options_chains_model.load_options_chains('SPY')
    >>> options_chains_model.calculate_synthetic_long(data)
    """
    ...

def calculate_synthetic_short(options: Options, days: Optional[int] = ..., strike: float = ...) -> pd.DataFrame:
    """Calculates the cost of a synthetic short position at a given strike.
    It is expressed as the difference between a sold call and a purchased put.
    Requires the Options data object.

    Parameters
    -----------
    options : Options
        The Options data object. Use load_options_chains() to load the data.
    days: int
        The target number of days until expiry. Default is 30 days.
    strike: float
        The target strike price. Default is the last price of the underlying stock.

    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with the results. Strike1 is the sold call strike, strike2 is the purchased put strike.

    Example
    --------
    >>> from openbb_terminal.stocks.options import options_chains_model
    >>> data = options_chains_model.load_options_chains('SPY')
    >>> options_chains_model.calculate_synthetic_short(data)
    """
    ...

@log_start_end(log=logger)
def calculate_stats(options: Options, by: Optional[str] = ...) -> pd.DataFrame:
    """Calculates basic statistics for the options chains, like OI and Vol/OI ratios.

    Parameters
    ----------
    options : object
        The Options data object.
        Accepts both Pydantic and Pandas object types, as defined by `load_options_chains()`.
        A Pandas DataFrame, or dictionary, with the options chains data is also accepted.
    by: str
        Whether to calculate by strike or expiration.  Default is expiration.

    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with the calculated statistics.

    Examples
    --------
    >>> from openbb_terminal.stocks.options.options_chains_model import OptionsChains
    >>> data = OptionsChains("SPY")

    By expiration date:
    >>> data.calculate_stats()

    By strike:
    >>> data.calculate_stats(data, "strike")
    """
    ...

@log_start_end(log=logger)
def get_strategies(options: Options, days: Optional[list[int]] = ..., straddle_strike: Optional[float] = ..., strangle_moneyness: Optional[list[float]] = ..., synthetic_longs: Optional[list[float]] = ..., synthetic_shorts: Optional[list[float]] = ..., vertical_calls: Optional[list[float]] = ..., vertical_puts: Optional[list[float]] = ...) -> pd.DataFrame:
    """Gets options strategies for all, or a list of, DTE(s).
    Currently supports straddles, strangles, and vertical spreads.
    Multiple strategies, expirations, and % moneyness can be returned.
    A negative value for `straddle_strike` or `strangle_moneyness` returns short options.
    A synthetic long/short position is a bought/sold call and sold/bought put at the same strike.
    A sold call strike that is lower than the bought strike, or a sold put strike that is higher than the bought strike,
    is a bearish vertical spread.

    Parameters
    ----------
    options: object
        The Options data object. Use `load_options_chains()` to load the data.
    days: list[int]
        List of DTE(s) to get strategies for. Enter a single value, or multiple as a list. Defaults to all.
    strike_price: float
        The target strike price. Defaults to the last price of the underlying stock.
    strangle_moneyness: list[float]
        List of OTM moneyness to target, expressed as a percent value between 0 and 100.
        Enter a single value, or multiple as a list. Defaults to 5.
    synthetic_long: list[float]
        List of strikes for a synthetic long position.
    synthetic_short: list[float]
        List of strikes for a synthetic short position.
    vertical_calls: list[float]
        Call strikes for vertical spreads, listed as [sold strike, bought strike].
    vertical_puts: list[float]
        Put strikes for vertical spreads, listed as [sold strike, bought strike].
    Returns
    -------
    pd.DataFrame
        Pandas DataFrame with the results.

    Examples
    --------
    Load data
    >>> from openbb_terminal.stocks.options import options_chains_model
    >>> data = options_chains_model.load_options_chains("SPY")

    Return just straddles
    >>> options_chains_model.calculate_strategies(data)

    Return strangles
    >>> options_chains_model.calculate_strategies(data, strangle_moneyness = 10)

    Return multiple values for both moneness and days:
    >>> options_chains_model.calculate_strategies(data, days = [10,30,60,90], moneyness = [2.5,-5,10,-20])

    Return vertical spreads for all expirations.
    >>> options_chains_model.calculate_strategies(data, vertical_calls=[430,427], vertical_puts=[420,426])

    Return synthetic short and long positions:
    >>> options_chains_model.calculate_strategies(
        data, days = [30,60], synthetic_short = [450,445], synthetic_long = [450,455]
    )
    """
    ...

@log_start_end(log=logger)
def calculate_skew(options, expiration: Optional[str] = ..., moneyness: Optional[float] = ...) -> pd.DataFrame:
    """
    Returns the skewness of the options, either vertical or horizontal.

    The vertical skew for each expiry and option is calculated by subtracting the IV of the ATM call or put.
    Returns only where the IV is greater than 0.

    Horizontal skew is returned if a value for moneyness is supplied.
    It is expressed as the difference between skews of two equidistant OTM strikes (the closest call and put).

    Parameters
    -----------
    options: object
        The Options data object. Use `load_options_chains()` to load the data.
    expiration: str
        The expiration date to target.  Defaults to all.
    moneyness: float
        The moneyness to target for calculating horizontal skew.  This parameter overrides a defined expiration date.

    Returns
    --------
    pd.DataFrame
        Pandas DataFrame with the results.

    Examples
    ----------
    >>> from openbb_terminal.stocks.options import options_chains_model as op
    >>> data = op.load_options_chains("SPY")

    Vertical skew at a given expiry:
    >>> skew = op.calculate_skew(data, "2025-12-19")

    Vertical skew at all expirations:
    >>> skew = op.calculate_skew(data)

    Horizontal skew at a given % OTM:
    >>> skew = op.calculate_skew(data, moneyness = 10)
    """
    ...

