"""
This type stub file was generated by pyright.
"""

import pandas as pd
from math import log
from typing import Optional, Tuple, Union
from pydantic import BaseModel, Extra
from openbb_terminal.decorators import log_start_end

"""Option helper functions"""
__docformat__ = ...
logger = ...
def get_strikes(min_sp: float, max_sp: float, chain: pd.DataFrame) -> Tuple[float, float]:
    """Function to get the min and max strikes for a given expiry"""
    ...

def get_loss_at_strike(strike: float, chain: pd.DataFrame) -> float:
    """Function to get the loss at the given expiry

    Parameters
    ----------
    strike : Union[int,float]
        Value to calculate total loss at
    chain : Dataframe:
        Dataframe containing at least strike and openInterest

    Returns
    -------
    loss : Union[float,int]
        Total loss
    """
    ...

def calculate_max_pain(chain: pd.DataFrame) -> Union[int, float]:
    """Returns the max pain for a given call/put dataframe

    Parameters
    ----------
    chain : DataFrame
        Dataframe to calculate value from

    Returns
    -------
    max_pain : int
        Max pain value
    """
    ...

def convert(orig: str, to: str) -> float:
    """Convert a string to a specific type of number
    Parameters
    ----------
    orig : str
        String to convert
    Returns
    -------
    number : float
        Decimal value of string
    """
    ...

def rn_payoff(x: str, df: pd.DataFrame, put: bool, delta: int, rf: float) -> float:
    """The risk neutral payoff for a stock
    Parameters
    ----------
    x : str
        Strike price
    df : pd.DataFrame
        Dataframe of stocks prices and probabilities
    put : bool
        Whether the asset is a put or a call
    delta : int
        Difference between today's date and expirations date in days
    rf : float
        The current risk-free rate

    Returns
    -------
    number : float
        Risk neutral value of option
    """
    ...

@log_start_end(log=logger)
def process_option_chain(data: pd.DataFrame, source: str) -> pd.DataFrame:
    """
    Create an option chain DataFrame from the given symbol.
    Does additional processing in order to get some homogeneous between the sources.

    Parameters
    ----------
    data : pd.DataFrame
        The option chain data
    source: str, optional
        The source of the data. Valid values are "Tradier", "Nasdaq", and
        "YahooFinance". The default value is "Tradier".

    Returns
    -------
    pd.DataFrame
        A DataFrame containing the option chain data, with columns as specified
        in the `option_chain_column_mapping` mapping, and an additional column
        "optionType" that indicates whether the option is a call or a put.
    """
    ...

@log_start_end(log=logger)
def get_greeks(current_price: float, calls: pd.DataFrame, puts: pd.DataFrame, expire: str, div_cont: float = ..., rf: Optional[float] = ..., opt_type: int = ..., show_all: bool = ..., show_extra_greeks: bool = ...) -> pd.DataFrame:
    """
    Gets the greeks for a given option

    Parameters
    ----------
    current_price: float
        The current price of the underlying
    div_cont: float
        The dividend continuous rate
    expire: str
        The date of expiration
    rf: float
        The risk-free rate
    opt_type: Union[-1, 0, 1]
        The option type 1 is for call and -1 is for put
    mini: float
        The minimum strike price to include in the table
    maxi: float
        The maximum strike price to include in the table
    show_all: bool
        Whether to show all columns from puts and calls
    show_extra_greeks: bool
        Whether to show all greeks
    """
    ...

opt_chain_cols = ...
option_chain_column_mapping = ...
class Option:
    def __init__(self, s: float, k: float, rf: float, div_cont: float, expiry: float, vol: float, is_call: bool = ...) -> None:
        """
        Class for getting the greeks of options. Inspiration from:
        http://www.smileofthales.com/computation/option-pricing-python-inheritance/

        Parameters
        ----------
        s : float
            The underlying asset price
        k : float
            The option strike price
        rf : float
            The risk-free rate
        div_cont : float
            The dividend continuous rate
        expiry : float
            The number of days until expiration
        vol : float
            The underlying volatility for an option
        is_call : bool
            True if call, False if put
        """
        ...
    
    @property
    def d1(self): # -> Any:
        ...
    
    @property
    def d2(self): # -> Any:
        ...
    
    @property
    def sigma(self): # -> float:
        ...
    
    @sigma.setter
    def sigma(self, val): # -> None:
        ...
    
    def Premium(self): # -> Any:
        ...
    
    def Delta(self): # -> Any:
        ...
    
    def Vega(self): # -> Any:
        """Vega for 1% change in vol"""
        ...
    
    def Theta(self, time_factor=...): # -> Any:
        """Theta, by default for 1 calendar day change"""
        ...
    
    def Rho(self): # -> Any:
        ...
    
    def Phi(self): # -> Any:
        ...
    
    def Gamma(self): # -> Any:
        ...
    
    def Charm(self, time_factor=...): # -> Any:
        """Calculates Charm, by default for 1 calendar day change"""
        ...
    
    def Vanna(self, change: float): # -> Any:
        """
        Vanna for a given percent change in volatility

        Parameters
        ----------
        change : float
            The change in volatility

        Returns
        ----------
        num : float
            The Vanna

        """
        ...
    
    def Vomma(self, change):
        """
        Vomma for a given percent change in volatility

        Parameters
        ----------
        change : float
            The change in volatility

        Returns
        ----------
        num : float
            The Vomma

        """
        ...
    


def get_dte(chain: pd.DataFrame) -> pd.DataFrame:
    """
    Returns a new column containing the DTE as an integer, including 0.
    Requires the chain to have the column labeled as, expiration.
    """
    ...

class Options:
    """The Options data object.

    Returns
    -------
    object: Options
        chains: pd.DataFrame
            The complete options chain for the ticker.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: pd.Series
            The price and recent performance of the underlying asset.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data.
        date: str
            The date, when the chains data is historical EOD.
        SYMBOLS: pd.DataFrame
            The symbol directory for the source, when available.
    """
    chains = pd.DataFrame
    expirations: list
    strikes: list
    last_price: float
    underlying_name: str
    underlying_price: pd.Series
    hasIV: bool
    hasGreeks: bool
    symbol: str
    source: str
    date: str
    SYMBOLS: pd.DataFrame


class PydanticOptions(BaseModel, extra=Extra.allow):
    """Pydantic model for the Options data object.

    Returns
    -------
    Pydantic: Options
        chains: dict
            The complete options chain for the ticker.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: dict
            The price and recent performance of the underlying asset.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data.
        date: str
            The date, when the chains data is historical EOD.
        SYMBOLS: dict
            The symbol directory for the source, when available.
    """
    chains: dict = ...
    expirations: list = ...
    strikes: list = ...
    last_price: float = ...
    underlying_name: str = ...
    underlying_price: dict = ...
    hasIV: bool = ...
    hasGreeks: bool = ...
    symbol: str = ...
    source: str = ...
    date: str = ...
    SYMBOLS: dict = ...


