"""
This type stub file was generated by pyright.
"""

import pandas as pd
import requests
from typing import List, Optional
from openbb_terminal.decorators import check_api_key, log_start_end
from openbb_terminal.stocks.options.op_helpers import Options

"""Tradier options model"""
__docformat__ = ...
logger = ...
option_columns = ...
greek_columns = ...
df_columns = ...
default_columns = ...
sorted_chain_columns = ...
@check_api_key(["API_TRADIER_TOKEN"])
def lookup_company(symbol: str): # -> Any:
    ...

@log_start_end(log=logger)
@check_api_key(["API_TRADIER_TOKEN"])
def get_historical_options(symbol: str, expiry: str, strike: float = ..., put: bool = ..., chain_id: Optional[str] = ...) -> pd.DataFrame:
    """
    Gets historical option pricing.  This inputs either ticker, expiration, strike or the OCC chain ID and processes
    the request to tradier for historical premiums.

    Parameters
    ----------
    symbol: str
        Stock ticker symbol
    expiry: str
        Option expiration date
    strike: int
        Option strike price
    put: bool
        Is this a put option?
    chain_id: Optional[str]
        OCC chain ID

    Returns
    -------
    df_hist: pd.DataFrame
        Dataframe of historical option prices
    """
    ...

option_cols = ...
option_col_map = ...
@log_start_end(log=logger)
@check_api_key(["API_TRADIER_TOKEN"])
def get_full_option_chain(symbol: str, quiet: bool = ...) -> pd.DataFrame:
    """Get available expiration dates for given ticker

    Parameters
    ----------
    symbol: str
        Ticker symbol to get expirations for
    quiet: bool
        Suppress output of progress bar

    Returns
    -------
    pd.DataFrame
        Dataframe of all option chains
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_TRADIER_TOKEN"])
def option_expirations(symbol: str) -> List[str]:
    """Get available expiration dates for given ticker

    Parameters
    ----------
    symbol: str
        Ticker symbol to get expirations for

    Returns
    -------
    dates: List[str]
        List of of available expirations
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_TRADIER_TOKEN"])
def get_option_chain(symbol: str, expiry: str) -> pd.DataFrame:
    """Display option chains [Source: Tradier]"

    Parameters
    ----------
    symbol : str
        Ticker to get options for
    expiry : str
        Expiration date in the form of "YYYY-MM-DD"

    Returns
    -------
    chains: pd.DataFrame
        Dataframe with options for the given Symbol and Expiration date
    """
    ...

@log_start_end(log=logger)
def process_chains(response: requests.models.Response) -> pd.DataFrame:
    """Function to take in the request and return a DataFrame

    Parameters
    ----------
    response: requests.models.Response
        This is the response from tradier api.

    Returns
    -------
    opt_chain: pd.DataFrame
        Dataframe with all available options
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_TRADIER_TOKEN"])
def get_last_price(symbol: str): # -> float | Literal[0] | None:
    """Makes api request for last price

    Parameters
    ----------
    symbol: str
        Ticker symbol

    Returns
    -------
    float:
        Last price
    """
    ...

@check_api_key(["API_TRADIER_TOKEN"])
def get_underlying_price(symbol: str) -> pd.Series:
    """Gets the current price and performance of the underlying asset.

    Parameters
    ----------
    symbol: str
        Ticker symbol

    Returns
    -------
    pd.Series:
        Series of current price and performance of the underlying asset.
    """
    ...

def get_chains(symbol: str) -> Options:
    """OptionsChains data object for Tradier.

    Parameters
    ----------
    symbol : str
        The ticker symbol to load.

    Returns
    -------
    object: OptionsChains
        chains: pd.DataFrame
            The complete options chain for the ticker.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: pd.Series
            The price and recent performance of the underlying asset.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data, "Tradier".
        SYMBOLS: pd.DataFrame
            Tradier symbol directory.

    Examples
    --------
    >>> from openbb_terminal.stocks.options import tradier_model
    >>> data = tradier_model.load_options("AAPL")
    >>> chains = tradier_model.chains
    """
    ...

def load_options(symbol: str, pydantic: bool = ...) -> Options:
    """OptionsChains data object for Tradier.

    Parameters
    ----------
    symbol: str
        The ticker symbol to load.
    pydantic: bool
        Whether to return the object as a Pydantic Model or a subscriptable Pandas Object.  Default is False.

    Returns
    -------
    object: Options
        chains: pd.DataFrame
            The complete options chain for the ticker. Returns as a dictionary if pydantic is True.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: pd.Series
            The price and recent performance of the underlying asset. Returns as a dictionary if pydantic is True.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data, "Tradier".
        SYMBOLS: pd.DataFrame
            Tradier symbol directory. Returns as a dictionary if pydantic is True.

    Examples
    --------
    Get current options chains for AAPL.
    >>> from openbb_terminal.stocks.options.tradier_model import load_options
    >>> data = load_options("AAPL")
    >>> chains = data.chains

    Return the object as a Pydantic Model.
    >>> from openbb_terminal.stocks.options.tradier_model import load_options
    >>> data = load_options("AAPL", pydantic=True)
    """
    ...

