"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Any, Dict, List, Tuple
from openbb_terminal.decorators import log_start_end
from openbb_terminal.stocks.options.op_helpers import Options

"""Yfinance options model"""
__docformat__ = ...
logger = ...
sorted_chain_columns = ...
def get_full_option_chain(symbol: str, quiet: bool = ...) -> pd.DataFrame:
    """Get all options for given ticker [Source: Yahoo Finance]

    Parameters
    ----------
    symbol: str
        Stock ticker symbol
    quiet: bool
        Flag to suppress progress bar

    Returns
    -------
    pd.Dataframe
        Option chain
    """
    ...

@log_start_end(log=logger)
def get_option_chain(symbol: str, expiry: str): # -> Options | DataFrame:
    """Gets option chain from yf for given ticker and expiration

    Parameters
    ----------
    symbol: str
        Ticker symbol to get options for
    expiry: str
        Date to get options for. YYYY-MM-DD

    Returns
    -------
    chains: yf.ticker.OptionsChains
        OptionsChains chain
    """
    ...

@log_start_end(log=logger)
def option_expirations(symbol: str): # -> list[Unknown]:
    """Get available expiration dates for given ticker

    Parameters
    ----------
    symbol: str
        Ticker symbol to get expirations for

    Returns
    -------
    dates: List[str]
        List of of available expirations
    """
    ...

@log_start_end(log=logger)
def get_dividend(symbol: str) -> pd.Series:
    """Gets option chain from yf for given ticker and expiration

    Parameters
    ----------
    symbol: str
        Ticker symbol to get options for

    Returns
    -------
    chains: yf.ticker.Dividends
        Dividends
    """
    ...

@log_start_end(log=logger)
def get_x_values(current_price: float, options: List[Dict[str, int]]) -> List[float]:
    """Generates different price values that need to be tested"""
    ...

def get_y_values(base: float, price: float, options: List[Dict[Any, Any]], underlying: int) -> float:
    """Generates y values for corresponding x values"""
    ...

@log_start_end(log=logger)
def generate_data(current_price: float, options: List[Dict[str, int]], underlying: int) -> Tuple[List[float], List[float], List[float]]:
    """Gets x values, and y values before and after premiums"""
    ...

@log_start_end(log=logger)
def get_price(symbol: str) -> float:
    """Get current price for a given ticker

    Parameters
    ----------
    symbol : str
        The ticker symbol to get the price for

    Returns
    -------
    price : float
        The price of the ticker
    """
    ...

@log_start_end(log=logger)
def get_info(symbol: str): # -> dict[Unknown, Unknown]:
    """Get info for a given ticker

    Parameters
    ----------
    symbol : str
        The ticker symbol to get the price for

    Returns
    -------
    price : float
        The info for a given ticker
    """
    ...

@log_start_end(log=logger)
def get_closing(symbol: str) -> pd.Series:
    """Get closing prices for a given ticker

    Parameters
    ----------
    symbol : str
        The ticker symbol to get the price for

    Returns
    -------
    price : List[float]
        A list of closing prices for a ticker
    """
    ...

def get_dte(date_value: str) -> int:
    """Gets days to expiration from yfinance option date"""
    ...

@log_start_end(log=logger)
def get_iv_surface(symbol: str) -> pd.DataFrame:
    """Gets IV surface for calls and puts for ticker

    Parameters
    ----------
    symbol: str
        Stock ticker symbol to get

    Returns
    -------
    pd.DataFrame
        Dataframe of DTE, Strike and IV
    """
    ...

@log_start_end(log=logger)
def get_last_price(symbol: str) -> pd.Series:
    """Get the price and performance of the underlying asset.

    Parameters
    ----------
    symbol: str
        Symbol to get quote for

    Returns
    -------
    pd.Series
        Pandas Series with the price and performance of the underlying asset.
    """
    ...

@log_start_end(log=logger)
def get_underlying_price(symbol: str) -> pd.Series:
    """Get the price and performance of the underlying asset.

    Parameters
    ----------
    symbol: str
        Symbol to get quote for

    Returns
    -------
    pd.Series
        Pandas Series with the price and performance of the underlying asset.
    """
    ...

def load_options(symbol: str, pydantic: bool = ...) -> Options:
    """OptionsChains data object for YahooFinance.

    Parameters
    ----------
    symbol: str
        The ticker symbol to load.
    pydantic: bool
        Whether to return the object as a Pydantic Model or a subscriptable Pandas Object.  Default is False.

    Returns
    -------
    object: OptionsChains
        chains: pd.DataFrame
            The complete options chain for the ticker. Returns as a dictionary if pydantic is True.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: pd.Series
            The price and recent performance of the underlying asset. Returns as a dictionary if pydantic is True.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Does not return greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data,  "YahooFinance".

    Examples
    --------
    Get current options chains for AAPL.
    >>> from openbb_terminal.stocks.options.yfinance_model import load_options
    >>> data = load_options("AAPL")
    >>> chains = data.chains

    Return the object as a Pydantic Model.
    >>> from openbb_terminal.stocks.options.yfinance_model import load_options
    >>> data = load_options("AAPL", pydantic=True)
    """
    ...

