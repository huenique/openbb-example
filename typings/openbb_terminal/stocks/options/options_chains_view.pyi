"""
This type stub file was generated by pyright.
"""

from typing import Optional, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.decorators import log_start_end
from openbb_terminal.stocks.options.op_helpers import Options

logger = ...
@log_start_end(log=logger)
def display_surface(options: Options, option_type: str = ..., dte_range: Optional[list[int]] = ..., moneyness: Optional[float] = ..., strike_range: Optional[list[float]] = ..., oi: bool = ..., volume: bool = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[None, OpenBBFigure]:
    """Chart the volatility as a 3-D surface.

    Parameters
    -----------
    options: Options
        The options data object.
    option_type: str
        The type of data to display. Default is "otm".
        Choices are: ["otm", "itm", "puts", "calls"]
    dte_range: list[int]
        Specify a min/max range of DTE to display.
    moneyness: float
        Specify a % moneyness to target for display.
    strike_range: list[float]
        Specify a min/max range of strike prices to display.
    oi: bool
        Filter for only options that have open interest. Default is False.
    volume: bool
        Filter for only options that have trading volume. Default is False.
    raw: bool
        Display the raw data instead of the chart.
    export: str
        Export dataframe data to csv,json,xlsx file.
    external_axes: bool
        Return the OpenBB Figure Object to a variable.

    Examples
    ----------
    >>> from openbb_terminal.stocks.options import options_chains_model, options_chains_view
    >>> spy = options_chains_model.load_options_chains("SPY")
    >>> options_chains_view.display_surface(spy)

    Display only calls:
    >>> options_chains_view.display_surface(spy, "calls")

    Display only puts:
    >>> options_chains_view.display_surface(spy, "puts")

    Display a range of expirations:
    >>> options_chains_view.display_surface(spy, dte_range=[7, 60])

    Filter for a range of strike prices and include only those with open interest and trading volume:
    >>> options_chains_view.display_surface(spy, strike_range=[400, 500], oi=True, volume=True)
    """
    ...

@log_start_end(log=logger)
def display_stats(options: Options, by: str = ..., expiry: str = ..., oi: Optional[bool] = ..., percent: Optional[bool] = ..., ratios: Optional[bool] = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[None, OpenBBFigure]:
    """Chart a variety of volume and open interest statistics.

    Parameters
    -----------
    options: Options
        The options data object.
    by: str
        Statistics can be displayed by either "expiration" or "strike". Default is "expiration".
    expiry: str
        The target expiration date to display. Only valid when `percent` is False.
    oi: bool
        Display open interest if True, else volume. Default is False.
    percent: bool
        Displays volume or open interest as a percentage of the total across all expirations. Default is False.
    ratios: bool
        Displays Put/Call ratios. This parameter overrides the others when True. Default is False.
    raw: bool
        Displays the raw data table instead of a chart.
    export: str
        Export the data to a csv,json,xlsx file.
    sheet_name: str
        Name of the sheet to save the data to. Only valid when `export` is a `xlsx` file.
    external_axes: bool
        Return the OpenBB Figure Object to a variable.

    Examples
    ----------
    >>> from openbb_terminal.sdk import openbb
    >>> from openbb_terminal.stocks.options import options_chains_model, options_chains_view
    >>> spy = options_chains_model.load_options_chains("SPY")

    Display volume by expiration:
    >>> options_chains_view.display_stats(spy)

    Display volume by strike:
    >>> options_chains_view.display_stats(spy, "strike")

    Display open interest by expiration:
    >>> options_chains_view.display_stats(spy, oi=True)

    Display open interest, by expiration, as a percentage of the total:
    >>> options_chains_view.display_stats(spy, oi=True, percent=True)

    Display volume and open interest put/call ratios:
    >>> options_chains_view.display_stats(spy, ratios=True)
    """
    ...

@log_start_end(log=logger)
def display_skew(options: Options, expirations: Optional[list[str]] = ..., moneyness: Optional[float] = ..., strike: Optional[float] = ..., atm: Optional[bool] = ..., otm_only: Optional[bool] = ..., raw: Optional[bool] = ..., export: Optional[str] = ..., sheet_name: Optional[str] = ..., external_axes: Optional[bool] = ...) -> Union[None, OpenBBFigure]:
    """Chart the vertical skew of an option expiration, or the horizontal skew of equidistant % moneyness options.

    The vertical skew for each expiry and option is calculated by subtracting the IV of the ATM call or put.
    Returns only where the IV is greater than 0.

    Horizontal skew is returned if a value for moneyness, or a strike price, is supplied.
    With a strike price specified, both call and put IV skew are displayed. For moneyness,
    it is expressed as the difference between skews of two equidistant OTM strikes (the closest call and put).

    Parameters
    -----------
    options: Options
        The options data object.
    expirations: list[str]
        The expiration date, or a list of dates. The closest date will be returned for each entry.
        Format as YYYY-MM-DD.
    moneyness: float
        The % moneyess. When specified, this returns the forward skew curve at the target moneyness.
    strike: float
        A target strike price to observe the skew vs. contract. This argument overrides other parameters.
    atm: bool
        When true, returns the ATM skew curve. This will override other parameters, but is overridden by strike.
    otm_only: bool
        When true, returns only OTM portions of the put/call skew curves.
    raw: bool
        Returns a table instead of a plot.
    export: str
        Export the data to csv, json, xlsx file.
    sheet_name: str
        The name of the sheet to save the data to. Only valid when `export` is a `xlsx` file.
    external_axes: bool
        Returns the OpenBB Figure Object to a variable.
    """
    ...

@log_start_end(log=logger)
def display_volatility(options: Options, expirations: Optional[list[str]] = ..., moneyness: Optional[float] = ..., strike: Optional[float] = ..., oi: bool = ..., volume: bool = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[None, OpenBBFigure]:
    """Chart the implied volatility smile.

    Parameters
    -----------
    options: Options
        The options data object.
    expirations: list[str]
        Select up to five expiration(s) to display.  Overridden by moneyness or strike. Format as YYYY-MM-DD.
    moneyness: float
        Specify a target % moneyness to display vs. contract dates. This argument overrides expirations.
    strike: float
        Specify a target strike price to display vs. contract dates.
        Returned strike price is estimated as the closest one listed at approximately one year forward.
        This argument overrides moneyness and expirations.
    oi: bool
        Return only contracts with open interest. Only valid for IV vs. Strike charts. Default is False.
    volume: bool
        Return only contracts with trading volume. Only valid for IV vs. Strike charts. Default is False.
    raw: bool
        Display the raw data instead of the chart.
    export: str
        Export dataframe data to csv,json,xlsx file.
    external_axes: bool
        Return the OpenBB Figure Object to a variable.

    Examples
    ----------
    >>> from openbb_terminal.stocks.options import options_chains_model, options_chains_view
    >>> spy = options_chains_model.load_options_chains("SPY")
    >>> options_chains_view(spy)

    Plot IV @ Strike vs. contract dates:
    >>> options_chains_view(spy, strike=450)

    Plot IV @ % OTM vs. contract dates:
    >>> options_chains_view(spy, moneyness=20)

    Plot multiple expirations at once, and filter for only contracts with open interest:
    >>> options_chains_view(spy, expirations=["2024-12-30", "2025-12-30"], oi=True)
    """
    ...

