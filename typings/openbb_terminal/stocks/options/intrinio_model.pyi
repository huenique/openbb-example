"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import List
from openbb_terminal.decorators import check_api_key, log_start_end
from openbb_terminal.stocks.options.op_helpers import Options

"""Intrinio model"""
__docformat__ = ...
logger = ...
api = ...
eod_columns_to_drop = ...
columns_to_drop = ...
TICKER_EXCEPTIONS = ...
def calculate_dte(chain_df: pd.DataFrame) -> pd.DataFrame:
    """Adds a column calculating the difference between expiration and the date data is from

    Parameters
    ----------
    chain_df : pd.DataFrame
        Dataframe of intrinio options.  Must have date and expiration columns

    Returns
    -------
    pd.DataFrame
        Dataframe with dte column added
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_INTRINIO_KEY"])
def get_expiration_dates(symbol: str, start: str = ..., end: str = ...) -> List[str]:
    """Get all expirations from a start date until a specified end date.  Defaults to 100 years out to get all possible.

    Parameters
    ----------
    symbol : str
        Intrinio symbol to get expirations for
    start : str
        Start date for expirations, by default T-1 so that current day is included
    end : str, optional
        End date for intrinio endpoint, by default "2100-12-30"

    Returns
    -------
    List[str]
        List of expiration dates
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_INTRINIO_KEY"])
def get_option_chain(symbol: str, expiration: str) -> pd.DataFrame:
    """Get option chain at a given expiration

    Parameters
    ----------
    symbol : str
        Ticker to get option chain for
    expiration : str
        Expiration to get chain for

    Returns
    -------
    pd.DataFrame
        Dataframe of option chain
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_INTRINIO_KEY"])
def get_full_option_chain(symbol: str, quiet: bool = ...) -> pd.DataFrame:
    """Get option chain across all expirations

    Parameters
    ----------
    symbol : str
        Symbol to get option chain for
    quiet: bool
        Flag to suppress progress bar

    Returns
    -------
    pd.DataFrame
        DataFrame of option chain
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_INTRINIO_KEY"])
def get_eod_chain_at_expiry_given_date(symbol: str, expiration: str, date: str, fillnans: bool = ...): # -> DataFrame:
    """Get the eod chain for a given expiration at a given close day

    Parameters
    ----------
    symbol : str
        Symbol to get option chain for
    expiration : str
        Expiration day of option chain
    date : str
        Date to get option chain for
    fillnans : bool, optional
        Flag to fill nan values with 0, by default True

    Returns
    -------
    pd.DataFrame
        Dataframe of option chain
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_INTRINIO_KEY"])
def get_full_chain_eod(symbol: str, date: str, quiet: bool = ...) -> pd.DataFrame:
    """Get full EOD option date across all expirations

    Parameters
    ----------
    symbol : str
        Symbol to get option chain for
    date : str
        Date to get EOD chain for
    quiet:bool
        Flag to suppress progress bar

    Returns
    -------
    pd.DataFrame
        Dataframe of options across all expirations at a given close

    Example
    -------
    To get the EOD chain for AAPL on Dec 23, 2022, we do the following

    >>> from openbb_terminal.sdk import openbb
    >>> eod_chain = openbb.stocks.options.eodchain("AAPL", date="2022-12-23")

    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_INTRINIO_KEY"])
def get_close_at_date(symbol: str, date: str) -> float:
    """Get adjusted close price at a given date

    Parameters
    ----------
    symbol : str
        Symbol to get price for
    date : str
        Date of close price

    Returns
    -------
    float
        close price
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_INTRINIO_KEY"])
def get_last_price(symbol: str) -> float:
    """Get the last price of a ticker

    Parameters
    ----------
    symbol : str
        Ticker to get last price for

    Returns
    -------
    float
        Last price of ticker
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_INTRINIO_KEY"])
def get_historical_options(symbol: str) -> pd.DataFrame:
    """Get historical EOD option prices, with Greeks, for a given OCC chain label.

    Parameters
    ----------
    symbol : str
        Symbol to get historical option chain for.  Should be an OCC chain label.

    Returns
    -------
    pd.DataFrame
        Dataframe of historical option chain.
    """
    ...

@check_api_key(["API_INTRINIO_KEY"])
def get_all_ticker_symbols() -> list[str]:
    """Gets a list of all options tickers supported by Intrinio.

    Returns
    -------
    list: str
        List of all ticker symbols supported.
    """
    ...

@check_api_key(["API_INTRINIO_KEY"])
def get_ticker_info(symbol: str) -> pd.Series:
    """Gets basic meta data for the ticker.

    Parameters
    ----------
    symbol: str
        The ticker symbol to lookup.

    Returns
    -------
    pd.Series
        Pandas Series object with meta data for the symbol.
    """
    ...

@check_api_key(["API_INTRINIO_KEY"])
def get_underlying_price(symbol: str) -> pd.Series:
    """Gets the real time bid/ask and last price for the symbol.

    Parameters
    ----------
    symbol: str
        The ticker symbol to lookup.

    Returns
    -------
    pd.Series
        Pandas Series object with real time bid/ask and last price for the symbol.

    Example
    -------
    >>> from openbb_terminal.stocks.options.intrinio_model import get_underlying_price
    >>> underlying = get_underlying_price("AAPL")

    """
    ...

def get_eod_chains(symbol: str, date: str) -> Options:
    """Internal function for loading historical EOD option prices.  This function is called from `load_options()`.

    Parameters
    ----------
    symbol : str
        The ticker symbol to lookup.
    date: str
        The date for the EOD chains data. Format: YYYY-MM-DD

    object: OptionsChains
        chains: pd.DataFrame
            The complete options chain for the ticker.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: pd.Series
            The price and recent performance of the underlying asset.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data, "Intrinio".
        SYMBOLS: list
            The list of valid Intrinio symbols.
    """
    ...

@check_api_key(["API_INTRINIO_KEY"])
def load_options(symbol: str, date: str = ..., pydantic=...) -> Options:
    """OptionsChains data object for Intrinio.

    Parameters
    ----------
    symbol : str
        The ticker symbol to load.
    date: Optional[str]
        The date for EOD chains data.
    pydantic: bool
        Whether to return the object as a Pydantic Model or a subscriptable Pandas Object.  Default is False.

    Returns
    -------
    object: OptionsChains
        chains: dict
            The complete options chain for the ticker. Returns as a Pandas DataFrame if pydantic is False.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: dict
            The price and recent performance of the underlying asset. Returns as a Pandas Series if pydantic is False.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data, "Intrinio".
        date: str
            The date, if applicable, for the EOD chains data. (YYYY-MM-DD)
        SYMBOLS: list
            The list of valid Intrinio symbols.

    Examples
    --------
    Get current options chains for AAPL.
    >>> from openbb_terminal.stocks.options.intrinio_model import load_options
    >>> data = load_options("AAPL")
    >>> chains = data.chains

    Get options chains for AAPL for a specific date.
    >>> from openbb_terminal.stocks.options.intrinio_model import load_options
    >>> data = load_options("AAPL", "2022-01-03")
    >>> chains = data.chains

    Return the object as a Pydantic Model.
    >>> from openbb_terminal.stocks.options.intrinio_model import load_options
    >>> data = load_options("AAPL", pydantic=True)
    """
    ...

