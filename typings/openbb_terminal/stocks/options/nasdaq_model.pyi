"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import List
from openbb_terminal.decorators import log_start_end
from openbb_terminal.stocks.options.op_helpers import Options

"""Nasdaq Model"""
__docformat__ = ...
logger = ...
call_cols = ...
put_cols = ...
cols = ...
sorted_chain_columns = ...
def get_dte_from_expiration(date: str) -> float:
    """
    Converts a date to total days until the option would expire.
    This assumes that the date is in the form %B %d, %Y such as January 11, 2023
    This calculates time from 'now' to 4 PM the date of expiration
    This is particularly a helper for nasdaq results.

    Parameters
    ----------
    date: str
        Date in format %B %d, %Y

    Returns
    -------
    float
        Days to expiration as a decimal
    """
    ...

@log_start_end(log=logger)
def get_full_option_chain(symbol: str) -> pd.DataFrame:
    """Get the full option chain for symbol over all expirations

    Parameters
    ----------
    symbol: str
        Symbol to get options for.  Can be a stock, etf or index.

    Returns
    -------
    pd.DataFrame
        Dataframe of option chain
    """
    ...

def process_response(response_json):
    ...

@log_start_end(log=logger)
def option_expirations(symbol: str) -> List[str]:
    """Get available expirations

    Parameters
    ----------
    symbol : str
        Ticker symbol to get expirations for

    Returns
    -------
    List[str]
        List of expiration dates
    """
    ...

@log_start_end(log=logger)
def get_last_price(symbol: str) -> float:
    """Get the last price from nasdaq

    Parameters
    ----------
    symbol: str
        Symbol to get quote for

    Returns
    -------
    float
        Last price
    """
    ...

@log_start_end(log=logger)
def get_underlying_price(symbol: str) -> pd.Series:
    """Get the last price from nasdaq

    Parameters
    ----------
    symbol: str
        Symbol to get quote for

    Returns
    -------
    float
        Last price
    """
    ...

@log_start_end(log=logger)
def get_option_greeks(symbol: str, expiration: str) -> pd.DataFrame:
    """Get option greeks from nasdaq

    Parameters
    ----------
    symbol: str
        Symbol to get
    expiration: str
        Option expiration

    Returns
    -------
    pd.DataFrame
        Dataframe with option greeks
    """
    ...

def get_available_greeks(OptionsChains, expiration: str = ...) -> pd.DataFrame:
    """Get available greeks for a specific expiration.
    This function will return data for strike prices near the money only.

    Parameters
    ----------
    expiration: str
        The expiration date to return the data.  Default is the first available date. (YYYY-MM-DD)

    Returns
    -------
    pd.DataFrame
        Dataframe with option greeks and strike prices.

    Examples
    --------
    Near-the-Money Greeks for the closest expiration date.

    >>> greeks = self.get_available_greeks()

    Get the last expiration date.

    >>> greeks = self.get_available_greeks(self.expirations[-1])
    """
    ...

@log_start_end(log=logger)
def load_options(symbol: str, pydantic: bool = ...) -> Options:
    """OptionsChains data object for Nasdaq.

    Parameters
    ----------
    symbol: str
        The ticker symbol to load.
    pydantic: bool
        Whether to return the object as a Pydantic Model or a subscriptable Pandas Object.  Default is False.

    Returns
    -------
    object: Options
        chains: dict
            The complete options chain for the ticker. Returns as a Pandas DataFrame if pydantic is False.
        expirations: list[str]
            List of unique expiration dates. (YYYY-MM-DD)
        strikes: list[float]
            List of unique strike prices.
        last_price: float
            The last price of the underlying asset.
        underlying_name: str
            The name of the underlying asset.
        underlying_price: dict
            The price and recent performance of the underlying asset. Returns as a Pandas Series if pydantic is False.
        hasIV: bool
            Returns implied volatility.
        hasGreeks: bool
            Returns greeks data.
        symbol: str
            The symbol entered by the user.
        source: str
            The source of the data, "Nasdaq".
        SYMBOLS: dict
            The Nasdaq symbol directory. Returns as a Pandas DataFrame if pydantic is False.

    Examples
    --------
    Get current options chains for AAPL.
    >>> from openbb_terminal.stocks.options.nasdaq_model import load_options
    >>> data = load_options("AAPL")
    >>> chains = data.chains

    Return the object as a Pydantic Model.
    >>> from openbb_terminal.stocks.options.nasdaq_model import load_options
    >>> data = load_options("AAPL", pydantic=True)
    """
    ...

