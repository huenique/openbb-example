"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import StockBaseController

"""Stock Context Controller."""
__docformat__ = ...
logger = ...
class StocksController(StockBaseController):
    """Stocks Controller class."""
    CHOICES_COMMANDS = ...
    CHOICES_MENUS = ...
    PATH = ...
    FILE_PATH = ...
    stocks_options = ...
    country = ...
    sector = ...
    industry_group = ...
    industry = ...
    exchange = ...
    TOB_EXCHANGES = ...
    CHOICES_GENERATION = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Construct stocks controller."""
        ...
    
    def print_help(self): # -> None:
        """Print help."""
        ...
    
    def custom_reset(self): # -> list[str] | list[Unknown]:
        """Class specific component of reset command."""
        ...
    
    def custom_load_wrapper(self, other_args: List[str]): # -> None:
        """Class specific component of load command"""
        ...
    
    @log_start_end(log=logger)
    def call_search(self, other_args: List[str]): # -> None:
        """Process search command."""
        ...
    
    @log_start_end(log=logger)
    def call_tob(self, other_args: List[str]): # -> None:
        """Process tob command."""
        ...
    
    @log_start_end(log=logger)
    def call_quote(self, other_args: List[str]): # -> None:
        """Process quote command."""
        ...
    
    @log_start_end(log=logger)
    def call_codes(self, _): # -> None:
        """Process codes command."""
        ...
    
    @log_start_end(log=logger)
    def call_candle(self, other_args: List[str]): # -> None:
        """Process candle command."""
        ...
    
    @log_start_end(log=logger)
    def call_news(self, other_args: List[str]): # -> None:
        """Process news command."""
        ...
    
    @log_start_end(log=logger)
    def call_disc(self, _): # -> None:
        """Process disc command."""
        ...
    
    @log_start_end(log=logger)
    def call_dps(self, _): # -> None:
        """Process dps command."""
        ...
    
    @log_start_end(log=logger)
    def call_scr(self, _): # -> None:
        """Process scr command."""
        ...
    
    @log_start_end(log=logger)
    def call_sia(self, _): # -> None:
        """Process sia command."""
        ...
    
    @log_start_end(log=logger)
    def call_ins(self, _): # -> None:
        """Process ins command."""
        ...
    
    @log_start_end(log=logger)
    def call_gov(self, _): # -> None:
        """Process gov command."""
        ...
    
    @log_start_end(log=logger)
    def call_options(self, _): # -> None:
        """Process options command."""
        ...
    
    @log_start_end(log=logger)
    def call_th(self, _): # -> None:
        """Process th command."""
        ...
    
    @log_start_end(log=logger)
    def call_res(self, _): # -> None:
        """Process res command."""
        ...
    
    @log_start_end(log=logger)
    def call_dd(self, _): # -> None:
        """Process dd command."""
        ...
    
    @log_start_end(log=logger)
    def call_ca(self, _): # -> None:
        """Process ca command."""
        ...
    
    @log_start_end(log=logger)
    def call_fa(self, _): # -> None:
        """Process fa command."""
        ...
    
    @log_start_end(log=logger)
    def call_bt(self, _): # -> None:
        """Process bt command."""
        ...
    
    @log_start_end(log=logger)
    def call_ta(self, _): # -> None:
        """Process ta command."""
        ...
    
    @log_start_end(log=logger)
    def call_ba(self, _): # -> None:
        """Process ba command."""
        ...
    
    @log_start_end(log=logger)
    def call_qa(self, _): # -> None:
        """Process qa command."""
        ...
    
    @log_start_end(log=logger)
    def call_forecast(self, _): # -> None:
        """Process forecast command."""
        ...
    


