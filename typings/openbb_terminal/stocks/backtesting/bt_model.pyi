"""
This type stub file was generated by pyright.
"""

import bt
import pandas as pd
from openbb_terminal.decorators import log_start_end

"""Backtesting Model"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def get_data(symbol: str, start_date: str = ...) -> pd.DataFrame:
    """Function to replace bt.get, gets Adjusted close of symbol using yfinance.

    Parameters
    ----------
    symbol: str
        Ticker to get data for
    start_date: str
        Start date in YYYY-MM-DD format

    Returns
    -------
    prices: pd.DataFrame
        Dataframe of Adj Close with columns = [ticker]
    """
    ...

@log_start_end(log=logger)
def buy_and_hold(symbol: str, start_date: str, name: str = ...) -> bt.Backtest:
    """Generates a buy and hold backtest object for the given ticker.

    Parameters
    ----------
    symbol: str
        Stock to test
    start_date: str
        Backtest start date, in YYYY-MM-DD format. Can be either string or datetime
    name: str
        Name of the backtest (for labeling purposes)

    Returns
    -------
    bt.Backtest
        Backtest object for buy and hold strategy
    """
    ...

@log_start_end(log=logger)
def ema_strategy(symbol: str, data: pd.DataFrame, ema_length: int = ..., spy_bt: bool = ..., no_bench: bool = ...) -> bt.backtest.Result:
    """Perform backtest for simple EMA strategy.  Buys when price>EMA(l).

    Parameters
    ----------
    symbol: str
        Stock ticker
    data: pd.DataFrame
        Dataframe of prices
    ema_length: int
        Length of ema window
    spy_bt: bool
        Boolean to add spy comparison
    no_bench: bool
        Boolean to not show buy and hold comparison

    Returns
    -------
    bt.backtest.Result
        Backtest results
    """
    ...

@log_start_end(log=logger)
def emacross_strategy(symbol: str, data: pd.DataFrame, short_length: int = ..., long_length: int = ..., spy_bt: bool = ..., no_bench: bool = ..., shortable: bool = ...) -> bt.backtest.Result:
    """Perform backtest for simple EMA strategy. Buys when price>EMA(l).

    Parameters
    ----------
    symbol : str
        Stock ticker
    data : pd.DataFrame
        Dataframe of prices
    short_length : int
        Length of short ema window
    long_length : int
        Length of long ema window
    spy_bt : bool
        Boolean to add spy comparison
    no_bench : bool
        Boolean to not show buy and hold comparison
    shortable : bool
        Boolean to allow for selling of the stock at cross

    Returns
    -------
    Result
        Backtest results
    """
    ...

@log_start_end(log=logger)
def rsi_strategy(symbol: str, data: pd.DataFrame, periods: int = ..., low_rsi: int = ..., high_rsi: int = ..., spy_bt: bool = ..., no_bench: bool = ..., shortable: bool = ...) -> bt.backtest.Result:
    """Perform backtest for simple EMA strategy. Buys when price>EMA(l).

    Parameters
    ----------
    symbol : str
        Stock ticker
    data : pd.DataFrame
        Dataframe of prices
    periods : int
        Number of periods for RSI calculation
    low_rsi : int
        Low RSI value to buy
    high_rsi : int
        High RSI value to sell
    spy_bt : bool
        Boolean to add spy comparison
    no_bench : bool
        Boolean to not show buy and hold comparison
    shortable : bool
        Flag to disable the ability to short sell

    Returns
    -------
    Result
        Backtest results
    """
    ...

