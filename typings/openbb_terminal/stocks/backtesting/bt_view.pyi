"""
This type stub file was generated by pyright.
"""

import pandas as pd
from datetime import datetime
from typing import Optional
from openbb_terminal.decorators import log_start_end

"""bt view module"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def display_whatif_scenario(symbol: str, date_shares_acquired: Optional[datetime] = ..., num_shares_acquired: float = ...): # -> None:
    """Display what if scenario

    Parameters
    ----------
    symbol: str
        Ticker to check what if scenario
    date_shares_acquired: str
        Date at which the shares were acquired
    num_shares_acquired: float
        Number of shares acquired
    """
    ...

@log_start_end(log=logger)
def display_simple_ema(symbol: str, data: pd.DataFrame, ema_length: int = ..., spy_bt: bool = ..., no_bench: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Strategy where stock is bought when Price > EMA(l)

    Parameters
    ----------
    symbol : str
        Stock ticker
    data : pd.Dataframe
        Dataframe of prices
    ema_length : int
        Length of ema window
    spy_bt : bool
        Boolean to add spy comparison
    no_bench : bool
        Boolean to not show buy and hold comparison
    export : bool
        Format to export backtest results
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_emacross(symbol: str, data: pd.DataFrame, short_ema: int = ..., long_ema: int = ..., spy_bt: bool = ..., no_bench: bool = ..., shortable: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Strategy where we go long/short when EMA(short) is greater than/less than EMA(short)

    Parameters
    ----------
    symbol : str
        Stock ticker
    data : pd.Dataframe
        Dataframe of prices
    short_ema : int
        Length of short ema window
    long_ema : int
        Length of long ema window
    spy_bt : bool
        Boolean to add spy comparison
    no_bench : bool
        Boolean to not show buy and hold comparison
    shortable : bool
        Boolean to allow for selling of the stock at cross
    export : str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_rsi_strategy(symbol: str, data: pd.DataFrame, periods: int = ..., low_rsi: int = ..., high_rsi: int = ..., spy_bt: bool = ..., no_bench: bool = ..., shortable: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Strategy that buys when the stock is less than a threshold and shorts when it exceeds a threshold.

    Parameters
    ----------
    symbol : str
        Stock ticker
    data : pd.Dataframe
        Dataframe of prices
    periods : int
        Number of periods for RSI calculation
    low_rsi : int
        Low RSI value to buy
    high_rsi : int
        High RSI value to sell
    spy_bt : bool
        Boolean to add spy comparison
    no_bench : bool
        Boolean to not show buy and hold comparison
    shortable : bool
        Boolean to allow for selling of the stock at cross
    export : str
        Format to export backtest results
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

