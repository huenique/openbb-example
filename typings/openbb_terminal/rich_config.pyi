"""
This type stub file was generated by pyright.
"""

from typing import Iterable, List, Optional, Tuple, Union
from rich.text import Text

"""Rich Module"""
__docformat__ = ...
RICH_TAGS = ...
USE_COLOR = ...
def translate(key: str): # -> str:
    ...

def no_panel(renderable, *args, **kwargs):
    ...

def get_ordered_list_sources(command_path: str) -> List:
    """
    Returns the preferred source for the given command.

    Parameters
    ----------
    command_path: str
        The command to find the source for. E.g. "stocks/load

    Returns
    -------
    List
        The list of sources for the given command.
    """
    ...

class MenuText:
    """Create menu text with rich colors to be displayed by terminal"""
    def __init__(self, path: str = ..., column_sources: int = ...) -> None:
        """Initialize menu help

        Parameters
        ----------
        path : str
            path to the menu that is being created
        column_sources : int
            column width from which to start displaying sources
        """
        ...
    
    def add_raw(self, raw_text: str): # -> None:
        """Append raw text (no translation) to a menu

        Parameters
        ----------
        raw_text : str
            raw text to be appended to the menu
        """
        ...
    
    def add_custom(self, key: str): # -> None:
        """Append custom text (after translation from key) to a menu

        Parameters
        ----------
        key : str
            key to get translated text and add to the menu
        """
        ...
    
    def add_info(self, key_info: str): # -> None:
        """Append info text (after translation from key) to a menu

        Parameters
        ----------
        key_info : str
            key to get translated text and add to the menu as info
        """
        ...
    
    def add_param(self, key_param: str, value: str, col_align: int = ...): # -> None:
        """Append info text (after translation from key) to a menu

        Parameters
        ----------
        key_param : str
            key to get translated text and add to the menu as parameter
        value : str
            value to display in front of the parameter
        col_align : int
            column alignment for the value. This allows for a better UX experience.
        """
        ...
    
    def add_cmd(self, key_command: str, condition: bool = ...): # -> None:
        """Append command text (after translation from key) to a menu

        Parameters
        ----------
        key_command : str
            key command to be executed by user. It is also used as a key to get description of command.
        condition : bool
            condition in which command is available to user. I.e. displays command and description.
            If condition is false, the command line is greyed out.
        """
        ...
    
    def add_menu(self, key_menu: str, condition: Optional[Union[bool, str]] = ...): # -> None:
        """Append menu text (after translation from key) to a menu

        Parameters
        ----------
        key_menu : str
            key menu to be executed by user. It is also used as a key to get description of menu.
        condition : bool
            condition in which menu is available to user. I.e. displays menu and description.
            If condition is false, the menu line is greyed out.
        """
        ...
    
    def add_setting(self, key_setting: str, status: bool = ...): # -> None:
        """Append menu text (after translation from key) to a menu

        Parameters
        ----------
        key_setting : str
            key setting to be set by user. It is also used as a key to get description of the setting.
        status : bool
            status of the current setting. If true the line will be green, otherwise red.
        """
        ...
    


class ConsoleAndPanel:
    """Create a rich console to wrap the console print with a Panel"""
    def __init__(self) -> None:
        ...
    
    def reload_console(self): # -> None:
        ...
    
    def capture(self): # -> Capture:
        ...
    
    @staticmethod
    def filter_rich_tags(text):
        ...
    
    @staticmethod
    def blend_text(message: str, color1: Tuple[int, int, int], color2: Tuple[int, int, int]) -> Text:
        """Blend text from one color to another."""
        ...
    
    def print(self, *args, **kwargs): # -> None:
        ...
    
    def input(self, *args, **kwargs): # -> str:
        ...
    


console = ...
def optional_rich_track(inputs: Iterable, suppress_output: bool = ..., desc: str = ..., total: Optional[int] = ...): # -> Iterable[Unknown]:
    """Generate a rich track progress bar if desired

    Parameters
    ----------
    inputs : Iterable
        The items to be looped through
    suppress_output : bool, optional
        Flag to suppress the output, by default False
    desc : str, optional
        String to describe the progress bar, by default ""
    total : Optional[int], optional
        Total number of items to be looped through, by default None
    """
    ...

