"""
This type stub file was generated by pyright.
"""

import pandas as pd
from openbb_terminal.decorators import log_start_end

"""CoinPaprika model"""
__docformat__ = ...
logger = ...
MARKETS_FILTERS = ...
EXMARKETS_FILTERS = ...
INFO_FILTERS = ...
EXCHANGES_FILTERS = ...
CONTRACTS_FILTERS = ...
@log_start_end(log=logger)
def get_global_info() -> pd.DataFrame:
    """Return data frame with most important global crypto statistics like:
    market_cap_usd, volume_24h_usd, bitcoin_dominance_percentage, cryptocurrencies_number,
    market_cap_ath_value, market_cap_ath_date, volume_24h_ath_value, volume_24h_ath_date,
    market_cap_change_24h, volume_24h_change_24h, last_updated.   [Source: CoinPaprika]

    Returns
    -------
    pd.DataFrame
        Most important global crypto statistics
        Metric, Value
    """
    ...

@log_start_end(log=logger)
def get_coins_info(symbols: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Returns basic coin information for all coins from CoinPaprika API [Source: CoinPaprika]

    Parameters
    ----------
    symbols: str
        Comma separated quotes to return e.g quotes=USD,BTC
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data descending

    Returns
    -------
    pd.DataFrame
        rank, name, symbol, price, volume_24h, circulating_supply, total_supply,
        max_supply, market_cap, beta_value, ath_price,
    """
    ...

@log_start_end(log=logger)
def get_coins_market_info(symbols: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Returns basic coin information for all coins from CoinPaprika API [Source: CoinPaprika]

    Parameters
    ----------
    symbols: str
        Comma separated quotes to return e.g quotes=USD,BTC
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascend

    Returns
    -------
    pd.DataFrame
        rank, name, symbol, price, volume_24h, mcap_change_24h,
        pct_change_1h, pct_change_24h, ath_price, pct_from_ath,
    """
    ...

@log_start_end(log=logger)
def get_list_of_exchanges(symbols: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """
    List exchanges from CoinPaprika API [Source: CoinPaprika]

    Parameters
    ----------
    symbols: str
        Comma separated quotes to return e.g quotes=USD,BTC
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascend

    Returns
    -------
    pd.DataFrame
        rank, name, currencies, markets, fiats, confidence_score, reported_volume_24h,
        reported_volume_7d ,reported_volume_30d, sessions_per_month,
    """
    ...

@log_start_end(log=logger)
def get_exchanges_market(exchange_id: str = ..., symbols: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """List markets by exchange ID [Source: CoinPaprika]

    Parameters
    ----------
    exchange_id: str
        identifier of exchange e.g for Binance Exchange -> binance
    symbols: str
        Comma separated quotes to return e.g quotes=USD,BTC
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        pair, base_currency_name, quote_currency_name, market_url,
        category, reported_volume_24h_share, trust_score,
    """
    ...

@log_start_end(log=logger)
def get_all_contract_platforms() -> pd.DataFrame:
    """List all smart contract platforms like ethereum, solana, cosmos, polkadot, kusama ... [Source: CoinPaprika]

    Returns
    -------
    pd.DataFrame
        index, platform_id
    """
    ...

@log_start_end(log=logger)
def get_contract_platform(platform_id: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Gets all contract addresses for given platform [Source: CoinPaprika]
    Parameters
    ----------
    platform_id: str
        Blockchain platform like eth-ethereum
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascend

    Returns
    -------
    pd.DataFrame
        id, type, active
    """
    ...

