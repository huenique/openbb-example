"""
This type stub file was generated by pyright.
"""

from typing import Optional, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.decorators import log_start_end

"""CoinGecko view"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def plot_pie_chart(labels: list, values: list, title: str) -> OpenBBFigure:
    """Plots a pie chart from a dataframe

    Parameters
    ----------
    labels_list : list
        List of labels
    values_list : list
        List of values
    title : str
        Title of the chart

    Returns
    -------
    OpenBBFigure
        Plotly figure object
    """
    ...

@log_start_end(log=logger)
def display_crypto_heatmap(category: str = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Shows cryptocurrencies heatmap [Source: CoinGecko]

    Parameters
    ----------
    caterogy: str
        Category (e.g., stablecoins). Empty for no category (default: )
    limit: int
        Number of top cryptocurrencies to display
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Export dataframe data to csv,json,xlsx
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_holdings_overview(symbol: str, show_bar: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., limit: int = ...) -> None:
    """Shows overview of public companies that holds ethereum or bitcoin. [Source: CoinGecko]

    Parameters
    ----------
    symbol: str
        Cryptocurrency: ethereum or bitcoin
    show_bar : bool
        Whether to show a bar graph for the data
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Export dataframe data to csv,json,xlsx
    limit: int
        The number of rows to show
    """
    ...

@log_start_end(log=logger)
def display_exchange_rates(sortby: str = ..., ascend: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Shows  list of crypto, fiats, commodity exchange rates. [Source: CoinGecko]

    Parameters
    ----------
    limit: int
        Number of records to display
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascending
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_global_market_info(pie: bool = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Shows global statistics about crypto. [Source: CoinGecko]
        - market cap change
        - number of markets
        - icos
        - number of active crypto
        - market_cap_pct

    Parameters
    ----------
    pie: bool
        Whether to show a pie chart
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_global_defi_info(export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Shows global statistics about Decentralized Finances. [Source: CoinGecko]

    Parameters
    ----------
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_stablecoins(limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., sortby: str = ..., ascend: bool = ..., pie: bool = ...) -> None:
    """Shows stablecoins data [Source: CoinGecko]

    Parameters
    ----------
    limit: int
        Number of records to display
    sortby: str
        Key by which to sort data, default is Market_Cap_[$]
    ascend: bool
        Flag to sort data ascending
    pie: bool
        Whether to show a pie chart, default is True
    export : str
        Export dataframe data to csv,json,xlsx file
    pie : bool
        Whether to show a pie chart

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> openbb.crypto.ov.stables_chart(sortby="Volume_[$]", ascend=True, limit=10)
    """
    ...

@log_start_end(log=logger)
def display_categories(sortby: str = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., pie: bool = ...) -> None:
    """Shows top cryptocurrency categories by market capitalization

    The cryptocurrency category ranking is based on market capitalization. [Source: CoinGecko]

    Parameters
    ----------
    sortby: str
        Key by which to sort data
    limit: int
        Number of records to display
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Export dataframe data to csv,json,xlsx file
    pie: bool
        Whether to show the pie chart
    """
    ...

@log_start_end(log=logger)
def display_exchanges(sortby: str = ..., ascend: bool = ..., limit: int = ..., links: bool = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Shows list of top exchanges from CoinGecko. [Source: CoinGecko]

    Parameters
    ----------
    limit: int
        Number of records to display
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data descending
    links: bool
        Flag to display urls
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_platforms(sortby: str = ..., ascend: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Shows list of financial platforms. [Source: CoinGecko]

    Parameters
    ----------
    limit: int
        Number of records to display
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascending
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_products(sortby: str = ..., ascend: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Shows list of financial products. [Source: CoinGecko]

    Parameters
    ----------
    limit: int
        Number of records to display
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data descending
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_indexes(sortby: str = ..., ascend: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Shows list of crypto indexes. [Source: CoinGecko]

    Parameters
    ----------
    limit: int
        Number of records to display
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data descending
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_derivatives(sortby: str = ..., ascend: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Shows  list of crypto derivatives. [Source: CoinGecko]

    Parameters
    ----------
    limit: int
        Number of records to display
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data descending
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

