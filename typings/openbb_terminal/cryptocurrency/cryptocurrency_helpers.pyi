"""
This type stub file was generated by pyright.
"""

import numpy as np
import pandas as pd
from datetime import datetime
from typing import Optional, Union
from openbb_terminal import OpenBBFigure

"""Cryptocurrency helpers"""
logger = ...
__docformat__ = ...
INTERVALS = ...
CCXT_INTERVAL_MAP = ...
SOURCES_INTERVALS = ...
YF_CURRENCY = ...
def check_datetime(ck_date: Optional[Union[datetime, Union[str, None]]] = ..., start: bool = ...) -> datetime:
    """Checks if given argument is string and attempts to convert to datetime.

    Parameters
    ----------
    ck_date : Union[datetime, Union[str, None]], optional
        Date to check, by default None
    start : bool, optional
        If True and string is invalid, will return 1100 days ago
        If False and string is invalid, will return today, by default True

    Returns
    -------
    datetime
        Datetime object
    """
    ...

def read_data_file(file_name: str): # -> Any:
    ...

def load_coins_list(file_name: str, return_raw: bool = ...) -> pd.DataFrame:
    ...

def load_binance_map(): # -> DataFrame:
    ...

def load_coinbase_map(): # -> DataFrame:
    ...

def prepare_all_coins_df() -> pd.DataFrame:
    """Helper method which loads coins from all sources: CoinGecko, CoinPaprika,
    Binance, Yahoo Finance and merge those coins on keys:

        CoinGecko - > name < - CoinPaprika
        CoinGecko - > id <- Binance

    Returns
    -------
    pd.DataFrame
        CoinGecko - id for coin in CoinGecko API: uniswap
        CoinPaprika - id for coin in CoinPaprika API: uni-uniswap
        Binance - symbol (baseAsset) for coin in Binance API: UNI
        Coinbase - symbol for coin in Coinbase Pro API e.g UNI
        Yahoo Finance - symbol for coin in Yahoo Finance e.g. UNI1-USD

        Symbol: uni
    """
    ...

def get_coingecko_id(symbol: str): # -> Any | None:
    ...

def load_from_ccxt(symbol: str, start_date: datetime = ..., interval: str = ..., exchange: str = ..., to_symbol: str = ..., end_date: datetime = ...) -> pd.DataFrame:
    """Load crypto currency data [Source: https://github.com/ccxt/ccxt]

    Parameters
    ----------
    symbol: str
        Coin to get
    start_date: datetime
        The datetime to start at
    interval: str
        The interval between data points in minutes.
        Choose from: 1, 15, 30, 60, 240, 1440, 10080, 43200
    exchange: str:
        The exchange to get data from.
    to_symbol: str
        Quote Currency (Defaults to usdt)
    end_date: datetime
        The datetime to stop at

    Returns
    -------
    pd.DataFrame
        Dataframe consisting of price and volume data
    """
    ...

def load_from_coingecko(symbol: str, start_date: datetime = ..., to_symbol: str = ...) -> pd.DataFrame:
    """Load crypto currency data [Source: https://www.coingecko.com/]

    Parameters
    ----------
    symbol: str
        Coin to get
    start_date: datetime
        The datetime to start at
    to_symbol: str
        Quote Currency (Defaults to usdt)

    Returns
    -------
    pd.DataFrame
        Dataframe consisting of price and volume data
    """
    ...

def load_from_yahoofinance(symbol: str, start_date: datetime = ..., interval: str = ..., to_symbol: str = ..., end_date: datetime = ...) -> pd.DataFrame:
    """Load crypto currency data [Source: https://finance.yahoo.com/]

    Parameters
    ----------
    symbol: str
        Coin to get
    start_date: datetime
        The datetime to start at
    interval: str
        The interval between data points in minutes.
        Choose from: 1, 15, 30, 60, 240, 1440, 10080, 43200
    to_symbol: str
        Quote Currency (Defaults to usdt)
    end_date: datetime
        The datetime to end at

    Returns
    -------
    pd.DataFrame
        Dataframe consisting of price and volume data
    """
    ...

def load(symbol: str, start_date: Optional[Union[datetime, Union[str, None]]] = ..., interval: Union[str, int] = ..., exchange: str = ..., to_symbol: str = ..., end_date: Optional[Union[datetime, Union[str, None]]] = ..., source: str = ...) -> pd.DataFrame:
    """
    Load crypto currency to get data for
    Note:
        take into consideration that the data might not be found if the data provider
        (example) uses `usd` instead of `usdt` as the quote currency, so you might need to adjust
        the `to_symbol` parameter.
        For `CCXT` a valid pair would be: "BTC/USDT"
        For `CoinGecko` a valid pair would be: "BTC-USD"
        For `YahooFinance` a valid pair would be: "BTC-USD"

    Parameters
    ----------
    symbol: str
        Coin to get
    start_date: Union[datetime, Union[str, None]], optional
        Start date to get data from with. - datetime or string format (YYYY-MM-DD)
    interval: Union[str, int]
        The interval between data points in minutes.
        Choose from: 1, 15, 30, 60, 240, 1440, 10080, 43200
    exchange: str:
        The exchange to get data from.
    to_symbol: str
        Quote Currency (Defaults to usdt)
    end_date: Union[datetime, Union[str, None]], optional
        End date to get data from with. - datetime or string format (YYYY-MM-DD)
    source: str
        The source of the data
        Choose from: CCXT, CoinGecko, YahooFinance

    Returns
    -------
    pd.DataFrame
        Dataframe consisting of price and volume data

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> openbb.crypto.load(symbol="btc",to_symbol="usd",start_date="2019-01-01",source="YahooFinance")
    """
    ...

def show_quick_performance(crypto_df: pd.DataFrame, symbol: str, current_currency: str, source: str, exchange: str, interval: str): # -> None:
    """Show quick performance stats of crypto prices. Daily prices expected"""
    ...

def load_yf_data(symbol: str, currency: str, interval: str, days: int): # -> tuple[DataFrame, str] | tuple[Unknown, str]:
    ...

def display_all_coins(source: str, symbol: str, limit: int, skip: int, show_all: bool, export: str, sheet_name: str) -> None:
    """Find similar coin by coin name,symbol or id.
    If you don't remember exact name or id of the Coin at CoinGecko, CoinPaprika, Coinbase, Binance
    you can use this command to display coins with similar name, symbol or id to your search query.
    Example of usage: coin name is something like "polka". So I can try: find -c polka -k name -t 25
    It will search for coin that has similar name to polka and display top 25 matches.
        -c, --coin stands for coin - you provide here your search query
        -t, --top it displays top N number of records.

    Parameters
    ----------
    limit: int
        Number of records to display
    symbol: str
        Cryptocurrency
    source: str
        Data source of coins.  CoinGecko (cg) or CoinPaprika (cp) or Binance (bin), Coinbase (cb)
    skip: int
        Skip N number of records
    show_all: bool
        Flag to show all sources of data
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

def plot_chart(prices_df: pd.DataFrame, to_symbol: str = ..., from_symbol: str = ..., source: str = ..., exchange: str = ..., interval: str = ..., external_axes: bool = ..., yscale: str = ...) -> Union[OpenBBFigure, None]:
    """Load data for Technical Analysis

    Parameters
    ----------
    prices_df: pd.DataFrame
        Cryptocurrency
    to_symbol: str
        Coin (only used for chart title), by default ""
    from_symbol: str
        Currency (only used for chart title), by default ""
    yscale: str
        Scale for y axis of plot Either linear or log
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> eth_df = openbb.crypto.load("ETH")
    >>> openbb.crypto.chart(prices_df=eth_df, to_symbol="usdt", from_symbol="eth", source="binance")
    """
    ...

def plot_candles(symbol: str, data: Optional[pd.DataFrame] = ..., start_date: Optional[Union[datetime, Union[str, None]]] = ..., end_date: Optional[Union[datetime, Union[str, None]]] = ..., interval: Union[str, int] = ..., exchange: str = ..., to_symbol: str = ..., source: str = ..., volume: bool = ..., title: str = ..., external_axes: bool = ..., yscale: str = ..., raw: bool = ...) -> Union[OpenBBFigure, Optional[pd.DataFrame], None]:
    """Plot candle chart from dataframe. [Source: Binance]

    Parameters
    ----------
    symbol: str
        Ticker name
    data: pd.DataFrame
        Dataframe containing time and OHLCV
    start_date: Union[datetime, Union[str, None]]
        Start date for data
    end_date: Union[datetime, Union[str, None]]
        End date for data
    interval: Union[str, int]
        Interval for data
    exchange: str
        Exchange to use
    to_symbol: str
        Currency to use
    source: str
        Source to use
    volume: bool
        If volume data shall be plotted, by default True
    ylabel: str
        Y-label of the graph, by default ""
    title: str
        Title of graph, by default ""
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    yscale : str
        Scaling for y axis.  Either linear or log

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> openbb.crypto.candle(symbol="eth")
    >>> openbb.crypto.candle(symbol="btc", raw=True)
    """
    ...

def plot_order_book(bids: np.ndarray, asks: np.ndarray, coin: str) -> OpenBBFigure:
    """
    Plots Bid/Ask. Can be used for Coinbase and Binance

    Parameters
    ----------
    bids : np.array
        array of bids with columns: price, size, cumulative size
    asks : np.array
        array of asks with columns: price, size, cumulative size
    coin : str
        Coin being plotted
    """
    ...

def check_cg_id(symbol: str): # -> str:
    ...

def fetch_ccxt_ohlc(exchange_id, max_retries, symbol, timeframe, since, limit): # -> DataFrame:
    ...

def retry_fetch_ohlcv(exchange, max_retries, symbol, timeframe, since, limit): # -> list[Unknown]:
    ...

def get_ohlcv(exchange, max_retries, symbol, timeframe, since, limit):
    ...

def get_exchanges_ohlc(): # -> list[Unknown]:
    ...

