"""
This type stub file was generated by pyright.
"""

from typing import Optional, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.decorators import log_start_end

"""Terra Money FCD view"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def display_account_staking_info(address: str = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Prints table showing staking info for provided terra account address [Source: https://fcd.terra.dev/swagger]

    Parameters
    ----------
    address: str
        terra blockchain address e.g. terra1jvwelvs7rdk6j3mqdztq5tya99w8lxk6l9hcqg
    limit: int
        Number of records to display
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_validators(limit: int = ..., sortby: str = ..., ascend: bool = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Prints table showing information about terra validators [Source: https://fcd.terra.dev/swagger]

    Parameters
    ----------
    limit: int
        Number of records to display
    sortby: str
        Key by which to sort data. Choose from:
        validatorName, tokensAmount, votingPower, commissionRate, status, uptime
    ascend: bool
        Flag to sort data descending
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_gov_proposals(limit: int = ..., status: str = ..., sortby: str = ..., ascend: bool = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Prints table showing terra blockchain governance proposals list [Source: https://fcd.terra.dev/swagger]

    Parameters
    ----------
    limit: int
        Number of records to display
    status: str
        status of proposal, one from list: ['Voting','Deposit','Passed','Rejected']
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascend
    export : str
        Export dataframe data to csv,json,xlsx file
    """
    ...

@log_start_end(log=logger)
def display_account_growth(kind: str = ..., cumulative: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[None, OpenBBFigure]:
    """Plots terra blockchain account growth history [Source: https://fcd.terra.dev/swagger]

    Parameters
    ----------
    limit: int
        Number of records to display
    kind: str
        display total account count or active account count. One from list [active, total]
    cumulative: bool
        Flag to show cumulative or discrete values. For active accounts only discrete value are available.
    export : str
        Export dataframe data to csv,json,xlsx file
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_staking_ratio_history(limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[None, OpenBBFigure]:
    """Plots terra blockchain staking ratio history [Source: https://fcd.terra.dev/v1]

    Parameters
    ----------
    limit: int
        Number of records to display
    export : str
        Export dataframe data to csv,json,xlsx file
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_staking_returns_history(limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[None, OpenBBFigure]:
    """Plots terra blockchain staking returns history [Source: https://fcd.terra.dev/swagger]

    Parameters
    ----------
    limit: int
        Number of records to display
    export : str
        Export dataframe data to csv,json,xlsx file
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    """
    ...

