"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Defi Controller Module"""
__docformat__ = ...
logger = ...
class DefiController(BaseController):
    """Defi Controller class"""
    CHOICES_COMMANDS = ...
    PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    @log_start_end(log=logger)
    def call_anchor(self, other_args: List[str]): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_sinfo(self, other_args: List[str]): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_validators(self, other_args: List[str]): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_gacc(self, other_args: List[str]): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_sratio(self, other_args: List[str]): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_sreturn(self, other_args: List[str]): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_gdapps(self, other_args: List[str]): # -> None:
        """Process gdapps command"""
        ...
    
    @log_start_end(log=logger)
    def call_dtvl(self, other_args: List[str]): # -> None:
        """Process dtvl command"""
        ...
    
    @log_start_end(log=logger)
    def call_ldapps(self, other_args: List[str]): # -> None:
        """Process ldapps command"""
        ...
    
    @log_start_end(log=logger)
    def call_stvl(self, other_args: List[str]): # -> None:
        """Process stvl command"""
        ...
    
    @log_start_end(log=logger)
    def call_newsletter(self, other_args: List[str]): # -> None:
        """Process newsletter command"""
        ...
    
    @log_start_end(log=logger)
    def call_tokens(self, other_args: List[str]): # -> None:
        """Process tokens command"""
        ...
    
    @log_start_end(log=logger)
    def call_stats(self, other_args: List[str]): # -> None:
        """Process stats command"""
        ...
    
    @log_start_end(log=logger)
    def call_pairs(self, other_args: List[str]): # -> None:
        """Process pairs command"""
        ...
    
    @log_start_end(log=logger)
    def call_pools(self, other_args: List[str]): # -> None:
        """Process pools command"""
        ...
    
    @log_start_end(log=logger)
    def call_swaps(self, other_args: List[str]): # -> None:
        """Process swaps command"""
        ...
    
    @log_start_end(log=logger)
    def call_vaults(self, other_args: List[str]): # -> None:
        """Process swaps command"""
        ...
    
    def call_lcsc(self, other_args: List[str]): # -> None:
        """Process lcsc command"""
        ...
    


