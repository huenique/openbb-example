"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Any, Optional, Union

"""Dataframe helpers"""
__docformat__ = ...
def wrap_text_in_df(df: pd.DataFrame, w: int = ...) -> pd.DataFrame:
    """
    Parameters
    ----------
    df: pd.DataFrame
        Data Frame with some data
    w: int
        length of text in column after which text is wrapped into new line

    Returns
    -------
    pd.DataFrame
    """
    ...

def percent_to_float(s: str) -> float:
    """Helper method to replace string pct like "123.56%" to float 1.2356
    Parameters
    ----------
    s: string
        string to replace
    Returns
    -------
    float
    """
    ...

def create_df_index(df: pd.DataFrame, name: str = ...) -> None:
    """Helper method that creates new index for given data frame, with provided index name
    Parameters
    ----------
    df:
        pd.DataFrame
    name: str
        index name
    """
    ...

def lambda_long_number_format_with_type_check(x: Union[int, float]) -> Union[str, Any]:
    """Helper which checks if type of x is int or float and it's smaller then 10^18.
    If yes it apply long_num_format

    Parameters
    ----------
    x: int/float
        number to apply long_number_format method
    Returns
    -------
    Union[str, Any]
    """
    ...

def lambda_replace_underscores_in_column_names(string: str) -> str:
    ...

def lambda_very_long_number_formatter(num: Union[str, int, float]) -> str:
    """Apply nice string format for very big numbers like Trillions, Quadrillions, Billions etc.

    Parameters
    ----------
    num: Union[str, int, float]
        number to format
    Returns
    -------
    str:
        formatted number
    """
    ...

def prettify_paragraph(text): # -> str:
    ...

def prettify_column_names(columns: list) -> list:
    """Helper method that change column names into more human readable format. E.g.
        - tradeAmount => Trade amount,
        - tokenValue => Token value
        - mediumGasPrice => Medium Gas Price

    Parameters
    ----------
    columns: list
        list of column names

    Returns
    -------
    list with reformatted columns
    """
    ...

def denominate_number(number: Any, divider: int = ..., round_digits: Optional[int] = ...) -> float:
    """Denominate numbers base on provided divider and round number by provided digit

    Parameters
    ----------
    number: Any
        value to round
    divider: int
        divide by value
    round_digits:
        round number to n digits
    Returns
    -------
    float:
        denominated number
    """
    ...

def lambda_replace_unicode(x: Any) -> Any:
    """Replace unicode characters to ?

    Parameters
    ----------
    x: Any
        value to replace unicode chars

    Returns
    -------
    Any
        replaced value
    """
    ...

