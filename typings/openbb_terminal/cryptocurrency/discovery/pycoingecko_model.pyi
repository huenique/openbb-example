"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import List
from openbb_terminal.decorators import log_start_end

"""CoinGecko model"""
__docformat__ = ...
logger = ...
COINS_COLUMNS_MAP = ...
PERIODS = ...
API_PERIODS = ...
CATEGORIES = ...
GAINERS_FILTERS = ...
TRENDING_FILTERS = ...
RECENTLY_FILTERS = ...
YFARMS_FILTERS = ...
CAP_FILTERS = ...
DEX_FILTERS = ...
GAINERS_LOSERS_COLUMNS = ...
@log_start_end(log=logger)
def read_file_data(file_name: str) -> dict:
    ...

@log_start_end(log=logger)
def get_categories_keys() -> List[str]:
    """Get list of categories keys

    Returns
    -------
    List[str]
        List of categories keys
    """
    ...

@log_start_end(log=logger)
def get_coins(limit: int = ..., category: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get N coins from CoinGecko [Source: CoinGecko]

    Parameters
    ----------
    limit: int
        Number of top coins to grab from CoinGecko
    category: str
        Category of the coins we want to retrieve
    sortby: str
        Key to sort data
    ascend: bool
        Sort data in ascending order

    Returns
    -------
    pd.DataFrame
        N coins
    """
    ...

@log_start_end(log=logger)
def get_gainers_or_losers(limit: int = ..., interval: str = ..., typ: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Returns data about top gainers - coins which gain the most in given period and
    top losers - coins that lost the most in given period of time. [Source: CoinGecko]

    Parameters
    ----------
    limit: int
        Num of coins to get
    sortby: str
        Key to sort data. The table can be sorted by every of its columns. Refer to
        API documentation (see /coins/markets in https://www.coingecko.com/en/api/documentation)
    ascend: bool
        Sort data in ascending order
    interval: str
        One from {14d,1h,1y,200d,24h,30d,7d}
    typ: str
        Either "gainers" or "losers"

    Returns
    -------
    pd.DataFrame
        Top Gainers / Top Losers - coins which gain/lost most in price in given period of time.
        Columns: Symbol, Name, Volume, Price, %Change_{interval}, Url
    """
    ...

def get_gainers(interval: str = ..., limit: int = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Shows Largest Gainers - coins which gain the most in given period. [Source: CoinGecko]

    Parameters
    ----------
    interval: str
        Time interval by which data is displayed. One from [1h, 24h, 7d, 14d, 30d, 60d, 1y]
    limit: int
        Number of records to display
    sortby: str
        Key to sort data. The table can be sorted by every of its columns. Refer to
        API documentation (see /coins/markets in https://www.coingecko.com/en/api/documentation)
    ascend: bool
        Sort data in ascending order

    Returns
    -------
    pd.DataFrame
        Top Gainers  - coins which gain most in price in given period of time.
        Columns: Symbol, Name, Volume, Price, %Change_{interval}, Url
    """
    ...

def get_losers(interval: str = ..., limit: int = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Shows Largest Losers - coins which lose the most in given period. [Source: CoinGecko]

    Parameters
    ----------
    interval: str
        Time interval by which data is displayed. One from [1h, 24h, 7d, 14d, 30d, 60d, 1y]
    limit: int
        Number of records to display
    sortby: str
        Key to sort data. The table can be sorted by every of its columns. Refer to
        API documentation (see /coins/markets in https://www.coingecko.com/en/api/documentation)
    ascend: bool
        Sort data in ascending order

    Returns
    -------
    pd.DataFrame
        Top Losers  - coins which lost most in price in given period of time.
        Columns: Symbol, Name, Volume, Price, %Change_{interval}, Url
    """
    ...

@log_start_end(log=logger)
def get_trending_coins() -> pd.DataFrame:
    """Returns trending coins [Source: CoinGecko]

    Parameters
    ----------

    Returns
    -------
    pd.DataFrame
        Trending Coins
    """
    ...

@log_start_end(log=logger)
def get_coin_list() -> pd.DataFrame:
    """Get list of coins available on CoinGecko [Source: CoinGecko]

    Returns
    -------
    pd.DataFrame
        Coins available on CoinGecko
        Columns: id, symbol, name
    """
    ...

@log_start_end(log=logger)
def get_coins_for_given_exchange(exchange_id: str = ..., page: int = ...) -> dict:
    """Helper method to get all coins available on binance exchange [Source: CoinGecko]

    Parameters
    ----------
    exchange_id: str
        id of exchange
    page: int
        number of page. One page contains 100 records

    Returns
    -------
    dict
        dictionary with all trading pairs on binance
    """
    ...

@log_start_end(log=logger)
def get_mapping_matrix_for_exchange(exchange_id: str, pages: int = ...) -> dict:
    """Creates a matrix with all coins available on Binance with corresponding coingecko coin_id. [Source: CoinGecko]

    Parameters
    ----------
    exchange_id: str
        id of exchange: binance
    pages: int
        number of pages. One page contains 100 records

    Returns
    -------
    dict
        dictionary with all coins: {"ETH" : "ethereum"}
    """
    ...

