"""
This type stub file was generated by pyright.
"""

import numpy as np
import pandas as pd
from typing import Any, Optional, Tuple
from openbb_terminal.decorators import log_start_end

"""Coinbase model"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def show_available_pairs_for_given_symbol(symbol: str = ...) -> Tuple[str, list]:
    """Return all available quoted assets for given symbol. [Source: Coinbase]

    Parameters
    ----------
    symbol: str
        Uppercase symbol of coin e.g BTC, ETH, UNI, LUNA, DOT ...

    Returns
    -------
    Tuple[str, list]
        Symbol and list of available pairs
    """
    ...

@log_start_end(log=logger)
def get_trading_pair_info(symbol: str) -> pd.DataFrame:
    """Get information about chosen trading pair. [Source: Coinbase]

    Parameters
    ----------
    symbol: str
        Trading pair of coins on Coinbase e.g ETH-USDT or UNI-ETH

    Returns
    -------
    pd.DataFrame
        Basic information about given trading pair
    """
    ...

@log_start_end(log=logger)
def get_order_book(symbol: str) -> Tuple[np.ndarray, np.ndarray, str, dict]:
    """Get orders book for chosen trading pair. [Source: Coinbase]

    Parameters
    ----------
    symbol: str
        Trading pair of coins on Coinbase e.g ETH-USDT or UNI-ETH

    Returns
    -------
    Tuple[np.array, np.array, str, dict]
        array with bid prices, order sizes and cumulative order sizes
        array with ask prices, order sizes and cumulative order sizes
        trading pair
        dict with raw data
    """
    ...

@log_start_end(log=logger)
def get_trades(symbol: str, limit: int = ..., side: Optional[Any] = ...) -> pd.DataFrame:
    """Get last N trades for chosen trading pair. [Source: Coinbase]

    Parameters
    ----------
    symbol: str
        Trading pair of coins on Coinbase e.g ETH-USDT or UNI-ETH
    limit: int
        Last `limit` of trades. Maximum is 1000.
    side: str
        You can chose either sell or buy side. If side is not set then all trades will be displayed.

    Returns
    -------
    pd.DataFrame
        Last N trades for chosen trading pairs.
    """
    ...

@log_start_end(log=logger)
def get_candles(symbol: str, interval: str = ...) -> pd.DataFrame:
    """Get candles for chosen trading pair and time interval. [Source: Coinbase]

    Parameters
    ----------
    symbol: str
        Trading pair of coins on Coinbase e.g ETH-USDT or UNI-ETH
    interval: str
        Time interval. One from 1min, 5min ,15min, 1hour, 6hour, 24hour, 1day

    Returns
    -------
    pd.DataFrame
        Candles for chosen trading pair.

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> openbb.crypto.dd.candle(symbol="eth-usdt", interval="24hour")
    """
    ...

@log_start_end(log=logger)
def get_product_stats(symbol: str) -> pd.DataFrame:
    """Get 24 hr stats for the product. Volume is in base currency units.
    Open, high and low are in quote currency units.  [Source: Coinbase]

    Parameters
    ----------
    symbol: str
        Trading pair of coins on Coinbase e.g ETH-USDT or UNI-ETH

    Returns
    -------
    pd.DataFrame
        24h stats for chosen trading pair
    """
    ...

