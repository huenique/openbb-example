"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import CryptoBaseController

"""Cryptocurrency Due diligence Controller"""
__docformat__ = ...
logger = ...
FILTERS_VS_USD_BTC = ...
def check_cg_id(symbol: str): # -> str:
    ...

class DueDiligenceController(CryptoBaseController):
    """Due Diligence Controller class"""
    CHOICES_COMMANDS = ...
    SPECIFIC_CHOICES = ...
    DD_VIEWS_MAPPING = ...
    PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, symbol=..., source=..., queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    def custom_reset(self): # -> list[str] | list[Unknown]:
        """Class specific component of reset command"""
        ...
    
    @log_start_end(log=logger)
    def call_nonzero(self, other_args: List[str]): # -> None:
        """Process nonzero command"""
        ...
    
    @log_start_end(log=logger)
    def call_stats(self, other_args): # -> None:
        """Process stats command"""
        ...
    
    @log_start_end(log=logger)
    def call_active(self, other_args: List[str]): # -> None:
        """Process active command"""
        ...
    
    @log_start_end(log=logger)
    def call_change(self, other_args: List[str]): # -> None:
        """Process change command"""
        ...
    
    @log_start_end(log=logger)
    def call_eb(self, other_args: List[str]): # -> None:
        """Process eb command"""
        ...
    
    @log_start_end(log=logger)
    def call_oi(self, other_args): # -> None:
        """Process oi command"""
        ...
    
    @log_start_end(log=logger)
    def call_liquidations(self, other_args): # -> None:
        """Process liquidations command"""
        ...
    
    @log_start_end(log=logger)
    def call_fundrate(self, other_args): # -> None:
        """Process fundrate command"""
        ...
    
    @log_start_end(log=logger)
    def call_info(self, other_args): # -> None:
        """Process info command"""
        ...
    
    @log_start_end(log=logger)
    def call_market(self, other_args): # -> None:
        """Process market command"""
        ...
    
    @log_start_end(log=logger)
    def call_web(self, other_args): # -> None:
        """Process web command"""
        ...
    
    @log_start_end(log=logger)
    def call_social(self, other_args): # -> None:
        """Process social command"""
        ...
    
    @log_start_end(log=logger)
    def call_dev(self, other_args): # -> None:
        """Process dev command"""
        ...
    
    @log_start_end(log=logger)
    def call_ath(self, other_args): # -> None:
        """Process ath command"""
        ...
    
    @log_start_end(log=logger)
    def call_atl(self, other_args): # -> None:
        """Process atl command"""
        ...
    
    @log_start_end(log=logger)
    def call_score(self, other_args): # -> None:
        """Process score command"""
        ...
    
    @log_start_end(log=logger)
    def call_bc(self, other_args): # -> None:
        """Process bc command"""
        ...
    
    @log_start_end(log=logger)
    def call_ob(self, other_args): # -> None:
        """Process order book command"""
        ...
    
    @log_start_end(log=logger)
    def call_trades(self, other_args): # -> None:
        """Process trades command"""
        ...
    
    @log_start_end(log=logger)
    def call_balance(self, other_args): # -> None:
        """Process balance command"""
        ...
    
    @log_start_end(log=logger)
    def call_ps(self, other_args): # -> None:
        """Process ps command"""
        ...
    
    @log_start_end(log=logger)
    def call_basic(self, other_args): # -> None:
        """Process basic command"""
        ...
    
    @log_start_end(log=logger)
    def call_mkt(self, other_args): # -> None:
        """Process mkt command"""
        ...
    
    @log_start_end(log=logger)
    def call_ex(self, other_args): # -> None:
        """Process ex command"""
        ...
    
    @log_start_end(log=logger)
    def call_events(self, other_args): # -> None:
        """Process events command"""
        ...
    
    @log_start_end(log=logger)
    def call_twitter(self, other_args): # -> None:
        """Process twitter command"""
        ...
    
    @log_start_end(log=logger)
    def call_mcapdom(self, other_args: List[str]): # -> None:
        """Process mcapdom command"""
        ...
    
    @log_start_end(log=logger)
    def call_links(self, other_args: List[str]): # -> None:
        """Process links command"""
        ...
    
    @log_start_end(log=logger)
    def call_gh(self, other_args: List[str]): # -> None:
        """Process gh command"""
        ...
    
    @log_start_end(log=logger)
    def call_rm(self, other_args: List[str]): # -> None:
        """Process rm command"""
        ...
    
    @log_start_end(log=logger)
    def call_tk(self, other_args: List[str]): # -> None:
        """Process tk command"""
        ...
    
    @log_start_end(log=logger)
    def call_pi(self, other_args: List[str]): # -> None:
        """Process pi command"""
        ...
    
    @log_start_end(log=logger)
    def call_team(self, other_args: List[str]): # -> None:
        """Process team command"""
        ...
    
    @log_start_end(log=logger)
    def call_inv(self, other_args: List[str]): # -> None:
        """Process inv command"""
        ...
    
    @log_start_end(log=logger)
    def call_fr(self, other_args: List[str]): # -> None:
        """Process fr command"""
        ...
    
    @log_start_end(log=logger)
    def call_gov(self, other_args: List[str]): # -> None:
        """Process gov command"""
        ...
    
    @log_start_end(log=logger)
    def call_mt(self, other_args: List[str]): # -> None:
        """Process mt command"""
        ...
    
    @log_start_end(log=logger)
    def call_news(self, other_args): # -> None:
        """Process news command"""
        ...
    
    @log_start_end(log=logger)
    def call_funot(self, other_args): # -> None:
        """Process fun command"""
        ...
    
    @log_start_end(log=logger)
    def call_desc(self, other_args): # -> None:
        """Process desc command"""
        ...
    


