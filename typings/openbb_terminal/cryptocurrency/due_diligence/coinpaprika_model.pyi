"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Optional, Tuple
from openbb_terminal.decorators import log_start_end

"""CoinPaprika model"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def get_coin_twitter_timeline(symbol: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get twitter timeline for given coin id. Not more than last 50 tweets [Source: CoinPaprika]

    Parameters
    ----------
    symbol: str
        Cryptocurrency symbol (e.g. BTC)
    sortby: str
        Key by which to sort data. Every column name is valid
        (see for possible values:
        https://api.coinpaprika.com/docs#tag/Coins/paths/~1coins~1%7Bcoin_id%7D~1twitter/get).
    ascend: bool
        Flag to sort data descending

    Returns
    -------
    pd.DataFrame
        Twitter timeline for given coin.
        Columns: date, user_name, status, retweet_count, like_count
    """
    ...

@log_start_end(log=logger)
def get_coin_events_by_id(symbol: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get all events related to given coin like conferences, start date of futures trading etc.
    [Source: CoinPaprika]

    Example of response from API:

    .. code-block:: json

    {
        "id": "17398-cme-april-first-trade",
        "date": "2018-04-02T00:00:00Z",
        "date_to": "string",
        "name": "CME: April First Trade",
        "description": "First trade of Bitcoin futures contract for April 2018.",
        "is_conference": false,
        "link": "http://www.cmegroup.com/trading/equity-index/us-index/bitcoin_product_calendar_futures.html",
        "proof_image_link": "https://static.coinpaprika.com/storage/cdn/event_images/16635.jpg"
    }

    Parameters
    ----------
    symbol: str
        Cryptocurrency symbol (e.g. BTC)
    sortby: str
        Key by which to sort data. Every column name is valid
        (see for possible values:
        https://api.coinpaprika.com/docs#tag/Coins/paths/~1coins~1%7Bcoin_id%7D~1events/get).
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        Events found for given coin
        Columns: id, date , date_to, name, description, is_conference, link, proof_image_link
    """
    ...

@log_start_end(log=logger)
def get_coin_exchanges_by_id(symbol: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get all exchanges for given coin id. [Source: CoinPaprika]

    Parameters
    ----------
    symbol: str
        Cryptocurrency symbol (e.g. BTC)
    sortby: str
        Key by which to sort data. Every column name is valid (see for possible values:
        https://api.coinpaprika.com/v1).
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        All exchanges for given coin
        Columns: id, name, adjusted_volume_24h_share, fiats
    """
    ...

@log_start_end(log=logger)
def get_coin_markets_by_id(symbol: str = ..., quotes: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """All markets for given coin and currency [Source: CoinPaprika]

    Parameters
    ----------
    symbol: str
        Cryptocurrency symbol (e.g. BTC)
    quotes: str
        Comma separated list of quotes to return.
        Example: quotes=USD,BTC
        Allowed values:
        BTC, ETH, USD, EUR, PLN, KRW, GBP, CAD, JPY, RUB, TRY, NZD, AUD, CHF, UAH, HKD, SGD, NGN,
        PHP, MXN, BRL, THB, CLP, CNY, CZK, DKK, HUF, IDR, ILS, INR, MYR, NOK, PKR, SEK, TWD, ZAR,
        VND, BOB, COP, PEN, ARS, ISK
    sortby: str
        Key by which to sort data. Every column name is valid (see for possible values:
        https://api.coinpaprika.com/v1).
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        All markets for given coin and currency
    """
    ...

@log_start_end(log=logger)
def get_ohlc_historical(symbol: str = ..., quotes: str = ..., days: int = ...) -> pd.DataFrame:
    """
    Open/High/Low/Close values with volume and market_cap. [Source: CoinPaprika]
    Request example: https://api.coinpaprika.com/v1/coins/btc-bitcoin/ohlcv/historical?start=2019-01-01&end=2019-01-20
    if the last day is current day it can an change with every request until actual close of the day at 23:59:59


    Parameters
    ----------
    symbol: str
        Paprika coin identifier e.g. eth-ethereum
    quotes: str
        returned data quote (available values: usd btc)
    days: int
        time range for chart in days. Maximum 365

    Returns
    -------
    pd.DataFrame
        Open/High/Low/Close values with volume and market_cap.
    """
    ...

@log_start_end(log=logger)
def get_tickers_info_for_coin(symbol: str = ..., quotes: str = ...) -> pd.DataFrame:
    """Get all most important ticker related information for given coin id [Source: CoinPaprika]

    .. code-block:: json

        {
            "id": "btc-bitcoin",
            "name": "Bitcoin",
            "symbol": "BTC",
            "rank": 1,
            "circulating_supply": 17007062,
            "total_supply": 17007062,
            "max_supply": 21000000,
            "beta_value": 0.735327,
            "first_data_at": "2010-11-14T07:20:41Z",
            "last_updated": "2018-11-14T07:20:41Z",
            "quotes": {
                "USD": {
                    "price": 5162.15941296,
                    "volume_24h": 7304207651.1585,
                    "volume_24h_change_24h": -2.5,
                    "market_cap": 91094433242,
                    "market_cap_change_24h": 1.6,
                    "percent_change_15m": 0,
                    "percent_change_30m": 0,
                    "percent_change_1h": 0,
                    "percent_change_6h": 0,
                    "percent_change_12h": -0.09,
                    "percent_change_24h": 1.59,
                    "percent_change_7d": 0.28,
                    "percent_change_30d": 27.39,
                    "percent_change_1y": -37.99,
                    "ath_price": 20089,
                    "ath_date": "2017-12-17T12:19:00Z",
                    "percent_from_price_ath": -74.3
                }
            }
        }

    Parameters
    ----------
    symbol: str
        Cryptocurrency symbol (e.g. BTC)
    quotes: str
        Comma separated quotes to return e.g quotes = USD, BTC

    Returns
    -------
    pd.DataFrame
        Most important ticker related information
        Columns: Metric, Value
    """
    ...

@log_start_end(log=logger)
def basic_coin_info(symbol: str = ...) -> pd.DataFrame:
    """Basic coin information [Source: CoinPaprika]

    Parameters
    ----------
    symbol: str
        Cryptocurrency symbol (e.g. BTC)

    Returns
    -------
    pd.DataFrame
        Metric, Value
    """
    ...

@log_start_end(log=logger)
def get_coin(symbol: str = ...) -> dict:
    """Get coin by id [Source: CoinPaprika]

    Parameters
    ----------
    symbol: str
        id of coin from coinpaprika e.g. Ethereum - > 'eth-ethereum'
    Returns
    -------
    dict
        Coin response
    """
    ...

def get_coinpaprika_id(symbol: str) -> Optional[str]:
    ...

def get_coin_list() -> pd.DataFrame:
    """Get list of all available coins on CoinPaprika  [Source: CoinPaprika]

    Returns
    -------
    pandas.DataFrame
        Available coins on CoinPaprika
        rank, id, name, symbol, type
    """
    ...

def validate_coin(symbol: str, coins_dct: dict) -> Tuple[Optional[str], Optional[str]]:
    """
    Helper method that validates if proper coin id or symbol was provided
    [Source: CoinPaprika]

    Parameters
    ----------
    symbol: str
        id or symbol of coin for CoinPaprika
    coins_dct: dict
        dictionary of coins

    Returns
    -------
    Tuple[Optional[str], Optional[str]]
        coin id, coin symbol
    """
    ...

