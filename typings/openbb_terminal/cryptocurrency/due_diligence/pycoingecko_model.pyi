"""
This type stub file was generated by pyright.
"""

import logging
import pandas as pd
from typing import Any, Dict, List, Optional, Union
from openbb_terminal.decorators import log_start_end

"""CoinGecko model"""
__docformat__ = ...
logger = ...
CHANNELS = ...
BASE_INFO = ...
def format_df(df: pd.DataFrame): # -> DataFrame:
    ...

@log_start_end(log=logger)
def get_coin_potential_returns(main_coin: str, to_symbol: Union[str, None] = ..., limit: Union[int, None] = ..., price: Union[int, None] = ...) -> pd.DataFrame:
    """Fetch data to calculate potential returns of a certain coin. [Source: CoinGecko]

    Parameters
    ----------
    main_coin   : str
        Coin loaded to check potential returns for (e.g., algorand)
    to_symbol          : str | None
        Coin to compare main_coin with (e.g., bitcoin)
    limit         : int | None
        Number of coins with highest market cap to compare main_coin with (e.g., 5)
    price
        Target price of main_coin to check potential returns (e.g., 5)

    Returns
    -------
    pd.DataFrame
            Potential returns data
            Columns: Coin, Current Price, Target Coin, Potential Price, Potential Market Cap ($), Change (%)
    """
    ...

@log_start_end(log=logger)
def check_coin(symbol: str): # -> None:
    ...

@log_start_end(log=logger)
def get_coin_market_chart(symbol: str = ..., vs_currency: str = ..., days: int = ..., **kwargs: Any) -> pd.DataFrame:
    """Get prices for given coin. [Source: CoinGecko]

    Parameters
    ----------
    vs_currency: str
        currency vs which display data
    days: int
        number of days to display the data
    kwargs
        unspecified keyword arguments

    Returns
    -------
    pd.DataFrame
        Prices for given coin
        Columns: time, price, currency
    """
    ...

@log_start_end(log=logger)
def get_coin_tokenomics(symbol: str = ...) -> pd.DataFrame:
    """Get tokenomics for given coin. [Source: CoinGecko]

    Parameters
    ----------
    symbol: str
        coin symbol to check tokenomics

    Returns
    -------
    pd.DataFrame
        Metric, Value with tokenomics
    """
    ...

class Coin:
    """Coin class, it holds loaded coin"""
    @log_start_end(log=logger)
    def __init__(self, symbol: str, load_from_api: bool = ...) -> None:
        ...
    
    @log_start_end(log=logger)
    def __str__(self) -> str:
        ...
    
    @log_start_end(log=logger)
    def coin_list(self) -> List[Dict[str, Any]]:
        """List all available coins [Source: CoinGecko]

        Returns
        ----------
        List[Dict[str, Any]]
            list of all available coin ids
        """
        ...
    
    @log_start_end(log=logger)
    def get_repositories(self) -> Optional[Dict[str, Any]]:
        """Get list of all repositories for given coin [Source: CoinGecko]

        Returns
        ----------
        Dict[str, Any]
            Repositories related to coin
        """
        ...
    
    @log_start_end(log=logger)
    def get_developers_data(self) -> pd.DataFrame:
        """Get coin development data from GitHub or BitBucket like:
            number of pull requests, contributor etc [Source: CoinGecko]

        Returns
        ----------
        pd.DataFrame
            Developers Data
            Columns: Metric, Value
        """
        ...
    
    @log_start_end(log=logger)
    def get_blockchain_explorers(self) -> Union[pd.DataFrame, Any]:
        """Get list of URLs to blockchain explorers for given coin. [Source: CoinGecko]

        Returns
        ----------
        pd.DataFrame
            Blockchain Explorers
            Columns: Metric, Value
        """
        ...
    
    @log_start_end(log=logger)
    def get_social_media(self) -> pd.DataFrame:
        """Get list of URLs to social media like twitter, facebook, reddit... [Source: CoinGecko]

        Returns
        ----------
        pd.DataFrame
            Urls to social media
            Columns: Metric, Value
        """
        ...
    
    @log_start_end(log=logger)
    def get_websites(self) -> pd.DataFrame:
        """Get list of URLs to websites like homepage of coin, forum. [Source: CoinGecko]

        Returns
        ----------
        pd.DataFrame
            Urls to website, homepage, forum
            Columns: Metric, Value
        """
        ...
    
    @log_start_end(log=logging)
    def get_categories(self) -> Union[Dict[Any, Any], List[Any]]:
        """Coins categories. [Source: CoinGecko]

        Returns
        ----------
        Union[Dict[Any, Any], List[Any]]
            Coin categories
        """
        ...
    
    @log_start_end(log=logger)
    def get_base_info(self) -> pd.DataFrame:
        """Get all the base information about given coin. [Source: CoinGecko]

        Returns
        ----------
        pd.DataFrame
            Base information about coin
        """
        ...
    
    @log_start_end(log=logger)
    def get_market_data(self) -> pd.DataFrame:
        """Get all the base market information about given coin. [Source: CoinGecko]

        Returns
        ----------
        pd.DataFrame
            Base market information about coin
            Metric,Value
        """
        ...
    
    @log_start_end(log=logger)
    def get_all_time_high(self, currency: str = ...) -> pd.DataFrame:
        """Get all time high data for given coin. [Source: CoinGecko]

        Returns
        ----------
        pd.DataFrame
            All time high price data
            Metric,Value
        """
        ...
    
    @log_start_end(log=logger)
    def get_all_time_low(self, currency: str = ...) -> pd.DataFrame:
        """Get all time low data for given coin. [Source: CoinGecko]

        Returns
        ----------
        pd.DataFrame
            All time low price data
            Metric,Value
        """
        ...
    
    @log_start_end(log=logger)
    def get_scores(self) -> pd.DataFrame:
        """Get different kind of scores for given coin. [Source: CoinGecko]

        Returns
        ----------
        pd.DataFrame
            Social, community, sentiment scores for coin
            Metric,Value
        """
        ...
    
    @log_start_end(log=logger)
    def get_coin_market_chart(self, vs_currency: str = ..., days: int = ..., **kwargs: Any) -> pd.DataFrame:
        """Get prices for given coin. [Source: CoinGecko]

        Parameters
        ----------
        vs_currency: str
            currency vs which display data
        days: int
            number of days to display the data
        kwargs

        Returns
        ----------
        pd.DataFrame
            Prices for given coin
            Columns: time, price, currency
        """
        ...
    
    @log_start_end(log=logger)
    def get_ohlc(self, vs_currency: str = ..., days: int = ...) -> pd.DataFrame:
        """Get Open, High, Low, Close prices for given coin. [Source: CoinGecko]

        Parameters
        ----------
        vs_currency: str
            currency vs which display data
        days: int
            number of days to display the data
            on from (1/7/14/30/90/180/365, max)

        Returns
        ----------
        pd.DataFrame
            OHLC data for coin
            Columns: time, price, currency
        """
        ...
    


@log_start_end(log=logger)
def get_ohlc(symbol: str, vs_currency: str = ..., days: int = ...) -> pd.DataFrame:
    """Get Open, High, Low, Close prices for given coin. [Source: CoinGecko]

    Parameters
    ----------
    vs_currency: str
        currency vs which display data
    days: int
        number of days to display the data
        on from (1/7/14/30/90/180/365, max)

    Returns
    -------
    pd.DataFrame
        OHLC data for coin
        Columns: time, price, currency
    """
    ...

