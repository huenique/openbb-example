"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Any, Optional, Tuple
from openbb_terminal.decorators import check_api_key, log_start_end

"""Messari model"""
__docformat__ = ...
logger = ...
INTERVALS_TIMESERIES = ...
@log_start_end(log=logger)
def get_available_timeseries(only_free: bool = ...) -> pd.DataFrame:
    """Returns available messari timeseries
    [Source: https://messari.io/]

    Parameters
    ----------
    only_free : bool
        Display only timeseries available for free

    Returns
    -------
    pd.DataFrame
        available timeseries
    """
    ...

base_url = ...
base_url2 = ...
@log_start_end(log=logger)
def get_marketcap_dominance(symbol: str, interval: str = ..., start_date: Optional[str] = ..., end_date: Optional[str] = ...) -> pd.DataFrame:
    """Returns market dominance of a coin over time
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check market cap dominance
    interval : str
        Interval frequency (possible values are: 5m, 15m, 30m, 1h, 1d, 1w)
    start_date : Optional[str]
        Initial date like string (e.g., 2021-10-01)
    end_date : Optional[str]
        End date like string (e.g., 2021-10-01)

    Returns
    -------
    pd.DataFrame
        market dominance percentage over time

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> mcapdom_df = openbb.crypto.dd.mcapdom(symbol="BTC")
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_MESSARI_KEY"])
def get_messari_timeseries(symbol: str, timeseries_id: str, interval: str = ..., start_date: Optional[str] = ..., end_date: Optional[str] = ...) -> Tuple[pd.DataFrame, str]:
    """Returns messari timeseries
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check messari timeseries
    timeseries_id : str
        Messari timeserie id
    interval : str
        Interval frequency (possible values are: 5m, 15m, 30m, 1h, 1d, 1w)
    start : Optional[str]
        Initial date like string (e.g., 2021-10-01)
    end : Optional[str]
        End date like string (e.g., 2021-10-01)

    Returns
    -------
    Tuple[pd.DataFrame, str]
        Messari timeseries over time,
        Timeseries title
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_MESSARI_KEY"])
def get_links(symbol: str) -> pd.DataFrame:
    """Returns asset's links
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check links

    Returns
    -------
    pd.DataFrame
        asset links
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_MESSARI_KEY"])
def get_roadmap(symbol: str, ascend: bool = ...) -> pd.DataFrame:
    """Returns coin roadmap
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check roadmap
    ascend: bool
        reverse order

    Returns
    -------
    pd.DataFrame
        roadmap
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_MESSARI_KEY"])
def get_tokenomics(symbol: str, coingecko_id: str) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Returns coin tokenomics
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check tokenomics
    coingecko_id : str
        ID from coingecko

    Returns
    -------
    Tuple[pd.DataFrame, pd.DataFrame]
        Metric Value tokenomics,
        Circulating supply overtime
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_MESSARI_KEY"])
def get_project_product_info(symbol: str) -> Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """Returns coin product info
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check product info

    Returns
    -------
    Tuple[pd.DataFrame, pd.DataFrame, pd.DataFrame, pd.DataFrame]
        Metric, Value with project and technology details,
        Coin public repos,
        Coin audits,
        Coin known exploits/vulns
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_MESSARI_KEY"])
def get_team(symbol: str) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Returns coin team
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check team

    Returns
    -------
    Tuple[pd.DataFrame, pd.DataFrame]
        Individuals,
        Organizations
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_MESSARI_KEY"])
def get_investors(symbol: str) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Returns coin investors
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check investors

    Returns
    -------
    Tuple[pd.DataFrame, pd.DataFrame]
        Individuals,
        Organizations
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_MESSARI_KEY"])
def get_governance(symbol: str) -> Tuple[str, pd.DataFrame]:
    """Returns coin governance
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check governance

    Returns
    -------
    Tuple[str, pd.DataFrame]
        Governance summary,
        Metric Value with governance details
    """
    ...

def format_addresses(x: Any): # -> str:
    ...

@log_start_end(log=logger)
@check_api_key(["API_MESSARI_KEY"])
def get_fundraising(symbol: str) -> Tuple[str, pd.DataFrame, pd.DataFrame, pd.DataFrame]:
    """Returns coin fundraising
    [Source: https://messari.io/]

    Parameters
    ----------
    symbol : str
        Crypto symbol to check fundraising

    Returns
    -------
    Tuple[str, pd.DataFrame, pd.DataFrame, pd.DataFrame]
        Launch summary,
        Sales rounds,
        Treasury Accounts,
        Metric Value launch details

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> fundraise = openbb.crypto.dd.fr(symbol="BTC")
    """
    ...

