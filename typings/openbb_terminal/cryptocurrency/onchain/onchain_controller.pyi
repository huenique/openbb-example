"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Onchain Controller Module"""
__docformat__ = ...
logger = ...
class OnchainController(BaseController):
    """Onchain Controller class"""
    SPECIFIC_CHOICES = ...
    CHOICES_COMMANDS = ...
    PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    @log_start_end(log=logger)
    def call_query(self, other_args: List[str]): # -> None:
        """Process query command"""
        ...
    
    @log_start_end(log=logger)
    def call_btcct(self, other_args: List[str]): # -> None:
        """Process btcct command"""
        ...
    
    @log_start_end(log=logger)
    def call_btccp(self, other_args: List[str]): # -> None:
        """Process btccp command"""
        ...
    
    @log_start_end(log=logger)
    def call_hr(self, other_args: List[str]): # -> None:
        """Process hr command"""
        ...
    
    @log_start_end(log=logger)
    def call_gwei(self, other_args: List[str]): # -> None:
        """Process gwei command"""
        ...
    
    @log_start_end(log=logger)
    def call_whales(self, other_args: List[str]): # -> None:
        """Process whales command"""
        ...
    
    @log_start_end(log=logger)
    def call_topledger(self, other_args: List[str]): # -> None:
        """Process topledger command"""
        ...
    
    @log_start_end(log=logger)
    def call_address(self, other_args: List[str]): # -> None:
        """Process address command"""
        ...
    
    @log_start_end(log=logger)
    def call_balance(self, other_args: List[str]): # -> None:
        """Process balance command"""
        ...
    
    @log_start_end(log=logger)
    def call_hist(self, other_args: List[str]): # -> None:
        """Process hist command"""
        ...
    
    @log_start_end(log=logger)
    def call_holders(self, other_args: List[str]): # -> None:
        """Process holders command"""
        ...
    
    @log_start_end(log=logger)
    def call_top(self, other_args: List[str]): # -> None:
        """Process top command"""
        ...
    
    @log_start_end(log=logger)
    def call_info(self, other_args: List[str]): # -> None:
        """Process info command"""
        ...
    
    @log_start_end(log=logger)
    def call_th(self, other_args: List[str]): # -> None:
        """Process th command"""
        ...
    
    @log_start_end(log=logger)
    def call_tx(self, other_args: List[str]): # -> None:
        """Process tx command"""
        ...
    
    @log_start_end(log=logger)
    def call_prices(self, other_args: List[str]): # -> None:
        """Process prices command"""
        ...
    
    @log_start_end(log=logger)
    def call_lt(self, other_args: List[str]): # -> None:
        """Process lt command"""
        ...
    
    @log_start_end(log=logger)
    def call_dvcp(self, other_args: List[str]): # -> None:
        """Process dvcp command"""
        ...
    
    @log_start_end(log=logger)
    def call_tv(self, other_args: List[str]): # -> None:
        """Process tv command"""
        ...
    
    @log_start_end(log=logger)
    def call_ueat(self, other_args: List[str]): # -> None:
        """Process ueat command"""
        ...
    
    @log_start_end(log=logger)
    def call_ttcp(self, other_args: List[str]): # -> None:
        """Process ttcp command"""
        ...
    
    @log_start_end(log=logger)
    def call_baas(self, other_args: List[str]): # -> None:
        """Process baas command"""
        ...
    
    @log_start_end(log=logger)
    def call_btcblockdata(self, other_args: List[str]): # -> None:
        """Process btcblockdata command"""
        ...
    


