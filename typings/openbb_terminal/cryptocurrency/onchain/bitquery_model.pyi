"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Optional
from openbb_terminal.decorators import check_api_key, log_start_end

"""BitQuery model"""
__docformat__ = ...
logger = ...
class BitQueryApiKeyException(Exception):
    """Bit Query Api Key Exception object"""
    @log_start_end(log=logger)
    def __init__(self, message: str) -> None:
        ...
    
    @log_start_end(log=logger)
    def __str__(self) -> str:
        ...
    


class BitQueryTimeoutException(Exception):
    """BitQuery Timeout Exception class"""
    ...


BQ_URL = ...
CURRENCIES = ...
LT_FILTERS = ...
LT_KIND = ...
INTERVALS = ...
DVCP_FILTERS = ...
UEAT_FILTERS = ...
TTCP_FILTERS = ...
BAAS_FILTERS = ...
DECENTRALIZED_EXCHANGES = ...
DECENTRALIZED_EXCHANGES_MAP = ...
NETWORKS = ...
@log_start_end(log=logger)
@check_api_key(["API_BITQUERY_KEY"])
def query_graph(url: str, query: str) -> dict:
    """Helper methods for querying graphql api. [Source: https://bitquery.io/]

    Parameters
    ----------
    url: str
        Endpoint url
    query: str
        Graphql query

    Returns
    -------
    dict
        Dictionary with response data
    """
    ...

@log_start_end(log=logger)
def get_erc20_tokens() -> pd.DataFrame:
    """Helper method that loads ~1500 most traded erc20 token.
    [Source: json file]

    Returns
    -------
    pd.DataFrame
        ERC20 tokens with address, symbol and name
    """
    ...

@log_start_end(log=logger)
def find_token_address(symbol: str) -> Optional[str]:
    """Helper methods that search for ERC20 coin base on provided symbol or token address.
    If erc20 token address is provided, then checks if it's proper address and returns it back.
    In other case mapping data is loaded from file, and lookup for belonging token address.

    Parameters
    ----------
    symbol: str
        ERC20 token symbol e.g. UNI, SUSHI, ETH, WBTC or token address e.g.
        0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48

    Returns
    -------
    str or None
        ERC20 token address, or None if nothing found.
    """
    ...

@log_start_end(log=logger)
def get_dex_trades_by_exchange(trade_amount_currency: str = ..., limit: int = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get trades on Decentralized Exchanges aggregated by DEX [Source: https://graphql.bitquery.io/]

    Parameters
    ----------
    trade_amount_currency: str
        Currency of displayed trade amount. Default: USD
    limit:  int
        Last n days to query data. Maximum 365 (bigger numbers can cause timeouts
        on server side)
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        Trades on Decentralized Exchanges aggregated by DEX
    """
    ...

@log_start_end(log=logger)
def get_dex_trades_monthly(trade_amount_currency: str = ..., limit: int = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get list of trades on Decentralized Exchanges monthly aggregated.
    [Source: https://graphql.bitquery.io/]

    Parameters
    ----------
    trade_amount_currency: str
        Currency of displayed trade amount. Default: USD
    limit:  int
        Last n days to query data. Maximum 365 (bigger numbers can cause timeouts
        on server side)
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        Trades on Decentralized Exchanges monthly aggregated
    """
    ...

@log_start_end(log=logger)
def get_daily_dex_volume_for_given_pair(limit: int = ..., symbol: str = ..., to_symbol: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get daily volume for given pair [Source: https://graphql.bitquery.io/]

    Parameters
    ----------
    limit:  int
        Last n days to query data
    symbol: str
        ERC20 token symbol
    to_symbol: str
        Quote currency.
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        Daily volume for given pair
    """
    ...

@log_start_end(log=logger)
def get_token_volume_on_dexes(symbol: str = ..., trade_amount_currency: str = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get token volume on different Decentralized Exchanges. [Source: https://graphql.bitquery.io/]

    Parameters
    ----------
    symbol: str
        ERC20 token symbol.
    trade_amount_currency: str
        Currency to display trade amount in.
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        Token volume on Decentralized Exchanges
    """
    ...

@log_start_end(log=logger)
def get_ethereum_unique_senders(interval: str = ..., limit: int = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get number of unique ethereum addresses which made a transaction in given time interval.

    Parameters
    ----------
    interval: str
        Time interval in which count unique ethereum addresses which made transaction. day,
        month or week.
    limit: int
        Number of records for data query.
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        Unique ethereum addresses which made a transaction
    """
    ...

@log_start_end(log=logger)
def get_most_traded_pairs(network: str = ..., exchange: str = ..., limit: int = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get most traded crypto pairs on given decentralized exchange in chosen time period.
    [Source: https://graphql.bitquery.io/]

    Parameters
    ----------
    network: str
        EVM network. One from list: bsc (binance smart chain), ethereum or matic
    exchange: st
        Decentralized exchange name
    limit: int
        Number of days taken into calculation account.
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        Most traded crypto pairs on given decentralized exchange in chosen time period.
    """
    ...

@log_start_end(log=logger)
def get_spread_for_crypto_pair(symbol: str = ..., to_symbol: str = ..., limit: int = ..., sortby: str = ..., ascend: bool = ...) -> pd.DataFrame:
    """Get an average bid and ask prices, average spread for given crypto pair for chosen time period.
        [Source: https://graphql.bitquery.io/]

    Parameters
    ----------
    symbol: str
        ERC20 token symbol
    to_symbol: str
        Quoted currency.
    limit:  int
        Last n days to query data
    sortby: str
        Key by which to sort data
    ascend: bool
        Flag to sort data ascending

    Returns
    -------
    pd.DataFrame
        Average bid and ask prices, spread for given crypto pair for chosen time period
    """
    ...

POSSIBLE_CRYPTOS = ...
