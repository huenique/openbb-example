"""
This type stub file was generated by pyright.
"""

import argparse
import matplotlib.pyplot as plt
from pathlib import Path
from typing import Dict, List, Optional, Union

"""Helper classes."""
__docformat__ = ...
class ModelsNamespace:
    """A namespace placeholder for the menu models.

    This class is used in all api wrappers to create a `models` namespace and import
    all the model functions.
    """
    def __init__(self, folders: Union[str, List[str]]) -> None:
        """Import all menu models into the models namespace.

        Instantiation of the namespace requires either a path to the folder that
        contains model files or a list of such folders.

        Parameters
        ----------
        folders : Union[str, List[str]]
            a folder or a list of folders to import models from
        """
        ...
    


class TerminalStyle:
    """The class that helps with handling of style configurations.

    It serves styles for 3 libraries. For `Matplotlib` this class serves absolute paths
    to the .mplstyle files. For `Matplotlib Finance` and `Rich` this class serves custom
    styles as python dictionaries.
    """
    DEFAULT_STYLES_LOCATION = ...
    USER_STYLES_LOCATION = ...
    mpl_styles_available: Dict[str, str] = ...
    mpl_style: str = ...
    mpl_rcparams_available: Dict[str, str] = ...
    mpl_rcparams: Dict = ...
    mpf_styles_available: Dict[str, str] = ...
    mpf_style: Dict = ...
    console_styles_available: Dict[str, str] = ...
    console_style: Dict[str, str] = ...
    down_color: str = ...
    up_color: str = ...
    xticks_rotation: str = ...
    tight_layout_padding: int = ...
    pie_wedgeprops: Dict = ...
    pie_startangle: int = ...
    line_width: float = ...
    volume_bar_width: float = ...
    def __init__(self, mpl_style: Optional[str] = ..., mpf_style: Optional[str] = ..., console_style: Optional[str] = ...) -> None:
        """Instantiate a terminal style class

        The stylesheet files should be placed to the `styles/default` or `styles/user`
        folders. The parameters required for class instantiation are stylesheet names
        without extensions (following matplotlib convention).

        Ex. `styles/default/boring.mplstyle` should be passed as `boring`.

        Parameters
        ----------
        mpl_style : str, optional
            Style name without extension, by default ""
        mpf_style : str, optional
            Style name without extension, by default ""
        console_style : str, optional
            Style name without extension, by default ""
        """
        ...
    
    def load_custom_fonts_from_folder(self, folder: Path) -> None:
        """Load custom fonts form folder.

        TTF and OTF fonts are loaded into the mpl font manager and are available for
        selection in mpl by their name (for example "Consolas" or "Hack").

        Parameters
        ----------
        folder : str
            Path to the folder containing the fonts
        """
        ...
    
    def load_available_styles_from_folder(self, folder: Path) -> None:
        """Load custom styles from folder.

        Parses the styles/default and styles/user folders and loads style files.
        To be recognized files need to follow a naming convention:
        *.mplstyle        - matplotlib stylesheets
        *.mplrc.json      - matplotlib rc stylesheets that are not handled by mplstyle
        *.mpfstyle.json   - matplotlib finance stylesheets
        *.richstyle.json  - rich stylesheets

        Parameters
        ----------
        folder : str
            Path to the folder containing the stylesheets
        """
        ...
    
    def applyMPLstyle(self): # -> None:
        """Apply style to the current matplotlib context."""
        ...
    
    def get_colors(self, reverse: bool = ...) -> List:
        """Get hex color sequence from the stylesheet."""
        ...
    
    def style_primary_axis(self, ax: plt.Axes, data_index: Optional[List[int]] = ..., tick_labels: Optional[List[str]] = ...): # -> None:
        """Apply styling to a primary axis.

        Parameters
        ----------
        ax : plt.Axes
            A matplolib axis
        """
        ...
    
    def style_twin_axis(self, ax: plt.Axes): # -> None:
        """Apply styling to a twin axis.

        Parameters
        ----------
        ax : plt.Axes
            A matplolib axis
        """
        ...
    
    def style_twin_axes(self, ax1: plt.Axes, ax2: plt.Axes): # -> None:
        """Apply styling to a twin axes

        Parameters
        ----------
        ax1 : plt.Axes
            Primary matplolib axis
        ax2 : plt.Axes
            Twinx matplolib axis

        """
        ...
    
    def add_label(self, fig: plt.figure): # -> None:
        """Add a text label to a figure in a funny position.

        Parameters
        ----------
        fig : plt.figure
            A matplotlib figure
        """
        ...
    
    def add_cmd_source(self, fig: plt.figure): # -> None:
        """Add a text label to a figure in a funny position.

        Parameters
        ----------
        fig : plt.figure
            A matplotlib figure
        """
        ...
    
    def visualize_output(self, force_tight_layout: bool = ..., external_axes: bool = ...): # -> None:
        """Show chart in an interactive widget."""
        ...
    


class AllowArgsWithWhiteSpace(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=...): # -> None:
        ...
    


