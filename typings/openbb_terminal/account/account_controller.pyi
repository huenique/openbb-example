"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import Dict, List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

logger = ...
class AccountController(BaseController):
    """Account Controller Class"""
    CHOICES_COMMANDS = ...
    PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def update_runtime_choices(self): # -> None:
        """Update runtime choices"""
        ...
    
    def get_local_routines(self) -> Dict[str, Path]:
        """Get local routines

        Returns
        -------
        Dict[str, Path]
            The local routines
        """
        ...
    
    def fetch_default_routines(self) -> List[Dict[str, str]]:
        """Fetch default routines

        Returns
        -------
        List[Dict[str, str]]
            The default routines
        """
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    @log_start_end(log=logger)
    def call_login(self, other_args: List[str]) -> None:
        """Process login command."""
        ...
    
    @log_start_end(log=logger)
    def call_logout(self, other_args: List[str]) -> None:
        """Process logout command."""
        ...
    
    @log_start_end(log=logger)
    def call_clear(self, other_args: List[str]): # -> None:
        """Clear data"""
        ...
    
    @log_start_end(log=logger)
    def call_list(self, other_args: List[str]): # -> None:
        """List routines"""
        ...
    
    @log_start_end(log=logger)
    def call_upload(self, other_args: List[str]): # -> None:
        """Upload"""
        ...
    
    @log_start_end(log=logger)
    def call_download(self, other_args: List[str]): # -> None:
        """Download"""
        ...
    
    @log_start_end(log=logger)
    def call_delete(self, other_args: List[str]): # -> None:
        """Delete"""
        ...
    
    @log_start_end(log=logger)
    def call_generate(self, other_args: List[str]) -> None:
        """Process generate command."""
        ...
    
    @log_start_end(log=logger)
    def call_show(self, other_args: List[str]) -> None:
        """Process show command."""
        ...
    
    @log_start_end(log=logger)
    def call_revoke(self, other_args: List[str]) -> None:
        """Process revoke command."""
        ...
    


