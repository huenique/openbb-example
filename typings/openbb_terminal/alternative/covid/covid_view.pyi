"""
This type stub file was generated by pyright.
"""

from typing import Optional, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.decorators import log_start_end

"""Covid View"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def plot_covid_ov(country: str, external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots historical cases and deaths by country.

    Parameters
    ----------
    country: str
        Country to plot
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

def plot_covid_stat(country: str, stat: str = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots historical stat by country.

    Parameters
    ----------
    country: str
        Country to plot
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_covid_ov(country: str, raw: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., plot: bool = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Prints table showing historical cases and deaths by country.

    Parameters
    ----------
    country: str
        Country to get data for
    raw: bool
        Flag to display raw data
    limit: int
        Number of raw data to show
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    plot: bool
        Flag to display historical plot
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_covid_stat(country: str, stat: str = ..., raw: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., plot: bool = ...) -> Union[OpenBBFigure, None]:
    """Prints table showing historical cases and deaths by country.

    Parameters
    ----------
    country: str
        Country to get data for
    stat: str
        Statistic to get.  Either "cases", "deaths" or "rates"
    raw: bool
        Flag to display raw data
    limit: int
        Number of raw data to show
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    plot : bool
        Flag to plot data
    """
    ...

@log_start_end(log=logger)
def display_case_slopes(days_back: int = ..., limit: int = ..., threshold: int = ..., ascend: bool = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Prints table showing countries with the highest case slopes.

    Parameters
    ----------
    days_back: int
        Number of historical days to get slope for
    limit: int
        Number to show in table
    ascend: bool
        Flag to sort in ascending order
    threshold: int
        Threshold for total cases over period
    export : str
        Format to export data
    """
    ...

