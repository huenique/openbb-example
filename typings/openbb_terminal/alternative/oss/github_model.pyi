"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Any, Dict, Optional
from openbb_terminal.decorators import check_api_key, log_start_end

"""GitHub Model"""
__docformat__ = ...
logger = ...
@check_api_key(["API_GITHUB_KEY"])
def get_github_data(url: str, **kwargs) -> Optional[Dict[str, Any]]:
    """Get repository stats.

    Parameters
    ----------
    url: str
        github api endpoint
    params: dict
        params to pass to api endpoint

    Returns
    -------
    Dict[str, Any]
        Dictionary with data
    """
    ...

def search_repos(sortby: str = ..., page: int = ..., categories: str = ...) -> pd.DataFrame:
    """Get repos sorted by stars or forks. Can be filtered by categories.

    Parameters
    ----------
    sortby : str
        Sort repos by {stars, forks}
    categories : str
        Check for repo categories. If more than one separate with a comma: e.g., finance,investment. Default: None
    page : int
        Page number to get repos

    Returns
    -------
    pd.DataFrame
        Dataframe with repos
    """
    ...

@log_start_end(log=logger)
def get_stars_history(repo: str) -> pd.DataFrame:
    """Get repository star history.

    Parameters
    ----------
    repo : str
        Repo to search for Format: org/repo, e.g., openbb-finance/openbbterminal

    Returns
    -------
    pd.DataFrame
        Dataframe with star history - Columns: Date, Stars
    """
    ...

@log_start_end(log=logger)
def get_top_repos(sortby: str, limit: int = ..., categories: str = ...) -> pd.DataFrame:
    """Get repos sorted by stars or forks. Can be filtered by categories.

    Parameters
    ----------
    sortby : str
        Sort repos by {stars, forks}
    categories : str
        Check for repo categories. If more than one separate with a comma: e.g., finance,investment. Default: None
    limit : int
        Number of repos to search for

    Returns
    -------
    pd.DataFrame
        Dataframe with repos
    """
    ...

@log_start_end(log=logger)
def get_repo_summary(repo: str) -> pd.DataFrame:
    """Get repository summary.

    Parameters
    ----------
    repo : str
        Repo to search for Format: org/repo, e.g., openbb-finance/openbbterminal

    Returns
    -------
    pd.DataFrame
        Dataframe with repo summary - Columns: Metric, Value
    """
    ...

