"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import List, Optional, Union
from openbb_terminal.core.session.current_user import is_local
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Settings Controller Module"""
__docformat__ = ...
logger = ...
class SettingsController(BaseController):
    """Settings Controller class"""
    CHOICES_COMMANDS: List[str] = ...
    if is_local():
        ...
    PATH = ...
    CHOICES_GENERATION = ...
    languages_available = ...
    def __init__(self, queue: Optional[List[str]] = ..., env_file: str = ...) -> None:
        """Constructor"""
        ...
    
    def parse_input(self, an_input: str) -> List:
        """Parse controller input

        Overrides the parent class function to handle github org/repo path convention.
        See `BaseController.parse_input()` for details.
        """
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    @staticmethod
    def set_and_save_preference(name: str, value: Union[bool, Path, str]): # -> None:
        """Set preference and write to .env

        Parameters
        ----------
        name : str
            Preference name
        value : Union[bool, Path, str]
            Preference value
        """
        ...
    
    @log_start_end(log=logger)
    def call_dt(self, other_args: List[str]): # -> None:
        """Process dt command"""
        ...
    
    @log_start_end(log=logger)
    def call_colors(self, other_args: List[str]): # -> None:
        """Process colors command"""
        ...
    
    @log_start_end(log=logger)
    def call_chart(self, other_args: List[str]): # -> None:
        """Process chart command"""
        ...
    
    @log_start_end(log=logger)
    def call_table(self, other_args: List[str]): # -> None:
        """Process theme command"""
        ...
    
    @log_start_end(log=logger)
    def call_source(self, other_args: List[str]): # -> None:
        """Process source command"""
        ...
    
    @log_start_end(log=logger)
    def call_height(self, other_args: List[str]): # -> None:
        """Process height command"""
        ...
    
    @log_start_end(log=logger)
    def call_width(self, other_args: List[str]): # -> None:
        """Process width command"""
        ...
    
    @log_start_end(log=logger)
    def call_lang(self, other_args: List[str]): # -> None:
        """Process lang command"""
        ...
    
    @log_start_end(log=logger)
    def call_tz(self, other_args: List[str]): # -> None:
        """Process tz command"""
        ...
    
    @log_start_end(log=logger)
    def call_flair(self, other_args: List[str]): # -> None:
        """Process flair command"""
        ...
    
    @log_start_end(log=logger)
    def call_userdata(self, other_args: List[str]): # -> None:
        """Process userdata command"""
        ...
    


