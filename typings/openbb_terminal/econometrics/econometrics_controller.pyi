"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Econometrics Controller Module"""
__docformat__ = ...
logger = ...
class EconometricsController(BaseController):
    """Econometrics class"""
    CHOICES_COMMANDS: List[str] = ...
    CHOICES_MENUS: List[str] = ...
    pandas_plot_choices = ...
    PANEL_CHOICES = ...
    PATH = ...
    loaded_dataset_cols = ...
    list_dataset_cols: List = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def update_runtime_choices(self): # -> None:
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    def custom_reset(self): # -> list[str]:
        """Class specific component of reset command"""
        ...
    
    def update_loaded(self): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_load(self, other_args: List[str]): # -> None:
        """Process load"""
        ...
    
    @log_start_end(log=logger)
    def call_export(self, other_args: List[str]): # -> None:
        """Process export command"""
        ...
    
    @log_start_end(log=logger)
    def call_remove(self, other_args: List[str]): # -> None:
        """Process clear"""
        ...
    
    @log_start_end(log=logger)
    def call_plot(self, other_args: List[str]): # -> None:
        """Process plot command"""
        ...
    
    @log_start_end(log=logger)
    def call_show(self, other_args: List[str]): # -> None:
        """Process show command"""
        ...
    
    @log_start_end(log=logger)
    def call_desc(self, other_args: List[str]): # -> None:
        """Process desc command"""
        ...
    
    @log_start_end(log=logger)
    def call_corr(self, other_args: List[str]): # -> None:
        """Process correlation command"""
        ...
    
    @log_start_end(log=logger)
    def call_type(self, other_args: List[str]): # -> None:
        """Process type command"""
        ...
    
    @log_start_end(log=logger)
    def call_index(self, other_args: List[str]): # -> None:
        """Process index command"""
        ...
    
    @log_start_end(log=logger)
    def call_clean(self, other_args: List[str]): # -> None:
        """Process clean command"""
        ...
    
    @log_start_end(log=logger)
    def call_add(self, other_args: List[str]): # -> None:
        """Process add command"""
        ...
    
    @log_start_end(log=logger)
    def call_lag(self, other_args: List[str]): # -> None:
        """Process lag command"""
        ...
    
    @log_start_end(log=logger)
    def call_ret(self, other_args: List[str]): # -> None:
        """Process ret command"""
        ...
    
    @log_start_end(log=logger)
    def call_eval(self, other_args): # -> None:
        """Process eval command"""
        ...
    
    @log_start_end(log=logger)
    def call_delete(self, other_args: List[str]): # -> None:
        """Process delete command"""
        ...
    
    @log_start_end(log=logger)
    def call_combine(self, other_args: List[str]): # -> None:
        """Process combine command"""
        ...
    
    @log_start_end(log=logger)
    def call_rename(self, other_args: List[str]): # -> None:
        """Process rename command"""
        ...
    
    @log_start_end(log=logger)
    def call_ols(self, other_args: List[str]): # -> None:
        """Process ols command"""
        ...
    
    @log_start_end(log=logger)
    def call_norm(self, other_args: List[str]): # -> None:
        """Process normality command"""
        ...
    
    @log_start_end(log=logger)
    def call_root(self, other_args: List[str]): # -> None:
        """Process unit root command"""
        ...
    
    @log_start_end(log=logger)
    def call_panel(self, other_args: List[str]): # -> None:
        """Process panel command"""
        ...
    
    @log_start_end(log=logger)
    def call_compare(self, other_args: List[str]): # -> None:
        """Process compare command"""
        ...
    
    @log_start_end(log=logger)
    def call_dwat(self, other_args: List[str]): # -> None:
        """Process unitroot command"""
        ...
    
    @log_start_end(log=logger)
    def call_bgod(self, other_args): # -> None:
        """Process bgod command"""
        ...
    
    @log_start_end(log=logger)
    def call_bpag(self, other_args): # -> None:
        """Process bpag command"""
        ...
    
    @log_start_end(log=logger)
    def call_garch(self, other_args: List[str]): # -> None:
        """Process garch command"""
        ...
    
    @log_start_end(log=logger)
    def call_granger(self, other_args: List[str]): # -> None:
        """Process granger command"""
        ...
    
    @log_start_end(log=logger)
    def call_coint(self, other_args: List[str]): # -> None:
        """Process coint command"""
        ...
    
    @log_start_end(log=logger)
    def call_vif(self, other_args: List[str]): # -> None:
        """Process vif command"""
        ...
    


