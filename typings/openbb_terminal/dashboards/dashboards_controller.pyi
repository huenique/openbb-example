"""
This type stub file was generated by pyright.
"""

import psutil
from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Dashboards Module."""
__docformat__ = ...
logger = ...
JUPYTER_STARTED = ...
class DashboardsController(BaseController):
    """Dashboards Controller class."""
    CHOICES_COMMANDS = ...
    PATH = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Construct controller."""
        ...
    
    def print_help(self): # -> None:
        """Print help."""
        ...
    
    @log_start_end(log=logger)
    def call_stocks(self, other_args: List[str]): # -> None:
        """Process stocks command."""
        ...
    
    @log_start_end(log=logger)
    def call_correlation(self, other_args: List[str]): # -> None:
        """Process correlation command."""
        ...
    
    @log_start_end(log=logger)
    def call_chains(self, other_args: List[str]): # -> None:
        """Process chains command."""
        ...
    
    @log_start_end(log=logger)
    def call_shortdata(self, other_args: List[str]): # -> None:
        """Process shortdata command."""
        ...
    
    @log_start_end(log=logger)
    def call_futures(self, other_args: List[str]): # -> None:
        """Process futures command."""
        ...
    
    @log_start_end(log=logger)
    def call_forecasting(self, other_args: List[str]): # -> None:
        """Process forecasting command."""
        ...
    
    @log_start_end(log=logger)
    def call_indicators(self, other_args: List[str]): # -> None:
        """Process indicators command."""
        ...
    
    @log_start_end(log=logger)
    def call_options(self, other_args: List[str]): # -> None:
        """Process indicators command."""
        ...
    
    def kill_processes(self) -> None:
        """Kills all processes started by this class."""
        ...
    
    def check_processes(self, name: Optional[str] = ...) -> str:
        """Check if a process is already running, and returns the url."""
        ...
    
    @staticmethod
    def get_free_port() -> int:
        """Search for a random free port number."""
        ...
    
    def create_call_streamlit(self, other_args: List[str], name: str, filename: Optional[str] = ...) -> None:
        """Create a streamlit call command.

        A metafunction that creates a launch command for a streamlit dashboard.

        Parameters
        ----------
        other_args : List[str]
            Other arguments to pass to the streamlit command.
        name : str
            Name of the dashboard.
        filename : Optional[str], optional
            Filename of the dashboard, by default None
        """
        ...
    


def non_blocking_streamlit(process: psutil.Popen) -> None:
    """We need this or else streamlit engine will not run the modules."""
    ...

