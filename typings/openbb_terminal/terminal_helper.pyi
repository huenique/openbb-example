"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager
from typing import List, Optional
from packaging import version

"""Terminal helper"""
__docformat__ = ...
logger = ...
def print_goodbye(): # -> None:
    """Prints a goodbye message when quitting the terminal"""
    ...

def sha256sum(filename): # -> str:
    ...

def update_terminal(): # -> int:
    """Updates the terminal by running git pull in the directory.
    Runs poetry install if needed.
    """
    ...

def open_openbb_documentation(path, url=..., command=..., arg_type=...): # -> None:
    """Opens the documentation page based on your current location within the terminal. Make exceptions for menus
    that are considered 'common' by adjusting the path accordingly."""
    ...

def hide_splashscreen(): # -> None:
    """Hide the splashscreen on Windows bundles.

    `pyi_splash` is a PyInstaller "fake-package" that's used to communicate
    with the splashscreen on Windows.
    Sending the `close` signal to the splash screen is required.
    The splash screen remains open until this function is called or the Python
    program is terminated.
    """
    ...

def is_auth_enabled() -> bool:
    """Tell whether or not authentication is enabled.

    Returns
    -------
    bool
        If authentication is enabled
    """
    ...

def print_guest_block_msg(): # -> None:
    """Block guest users from using the terminal."""
    ...

def is_installer() -> bool:
    """Tell whether or not it is a packaged version (Windows or Mac installer"""
    ...

def bootup(): # -> None:
    ...

def check_for_updates() -> None:
    """Check if the latest version is running.

    Checks github for the latest release version and compares it to cfg.VERSION.
    """
    ...

def check_valid_versions(latest_version: version.Version, current_version: version.Version) -> bool:
    ...

def welcome_message(): # -> None:
    """Print the welcome message

    Prints first welcome message, help and a notification if updates are available.
    """
    ...

def reset(queue: Optional[List[str]] = ...): # -> None:
    """Resets the terminal.  Allows for checking code without quitting"""
    ...

@contextmanager
def suppress_stdout(): # -> Generator[None, Any, None]:
    ...

def first_time_user() -> bool:
    """Whether a user is a first time user. A first time user is someone with an empty .env file.
    If this is true, it also adds an env variable to make sure this does not run again.

    Returns
    -------
    bool
        Whether or not the user is a first time user
    """
    ...

