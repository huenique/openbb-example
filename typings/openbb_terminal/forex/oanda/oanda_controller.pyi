"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Oanda Controller."""
__docformat__ = ...
logger = ...
account = ...
class OandaController(BaseController):
    """Oanda menu controller."""
    CHOICES_COMMANDS = ...
    PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Construct Data."""
        ...
    
    def print_help(self): # -> None:
        """Print help."""
        ...
    
    @log_start_end(log=logger)
    def call_to(self, other_args: List[str]): # -> None:
        """Process 'to' command."""
        ...
    
    @log_start_end(log=logger)
    def call_from(self, other_args: List[str]): # -> None:
        """Process 'from' command."""
        ...
    
    @log_start_end(log=logger)
    def call_price(self, other_args): # -> None:
        """Process Price Command."""
        ...
    
    @log_start_end(log=logger)
    def call_summary(self, other_args): # -> None:
        """Process account summary command."""
        ...
    
    @log_start_end(log=logger)
    def call_orderbook(self, other_args): # -> None:
        """Process Oanda Order Book."""
        ...
    
    @log_start_end(log=logger)
    def call_positionbook(self, other_args): # -> None:
        """Process Oanda Position Book."""
        ...
    
    @log_start_end(log=logger)
    def call_list(self, other_args: List[str]): # -> None:
        """Process list orders command."""
        ...
    
    @log_start_end(log=logger)
    def call_order(self, other_args: List[str]): # -> None:
        """Place limit order."""
        ...
    
    @log_start_end(log=logger)
    def call_cancel(self, other_args: List[str]): # -> None:
        """Cancel pending order by ID."""
        ...
    
    @log_start_end(log=logger)
    def call_positions(self, other_args): # -> None:
        """Get Open Positions."""
        ...
    
    @log_start_end(log=logger)
    def call_pending(self, other_args): # -> None:
        """See up to 25 pending orders."""
        ...
    
    @log_start_end(log=logger)
    def call_trades(self, other_args): # -> None:
        """List open trades."""
        ...
    
    @log_start_end(log=logger)
    def call_closetrade(self, other_args: List[str]): # -> None:
        """Close a trade by id."""
        ...
    
    @log_start_end(log=logger)
    def call_candles(self, other_args: List[str]): # -> None:
        """Plot candle chart for a loaded currency pair."""
        ...
    
    @log_start_end(log=logger)
    def call_calendar(self, other_args: List[str]): # -> None:
        """Call calendar."""
        ...
    


