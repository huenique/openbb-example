"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Dict, Union
from openbb_terminal.decorators import log_start_end

"""Oanda Model."""
__docformat__ = ...
logger = ...
current_user = ...
if current_user.credentials.OANDA_ACCOUNT_TYPE != "REPLACE_ME":
    client = ...
else:
    client = ...
account = ...
@log_start_end(log=logger)
def fx_price_request(accountID: str = ..., instrument: Union[str, None] = ...) -> Union[Dict[str, str], bool]:
    """Request price for a forex pair.

    Parameters
    ----------
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT
    instrument : Union[str, None]
        The loaded currency pair, by default None

    Returns
    -------
    Union[Dict[str, str], bool]
        The currency pair price or False
    """
    ...

@log_start_end(log=logger)
def account_summary_request(accountID: str = ...) -> Union[pd.DataFrame, bool]:
    """Request Oanda account summary.

    Parameters
    ----------
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT

    Returns
    -------
    Union[pd.DataFrame, bool]
        Account summary data or False
    """
    ...

@log_start_end(log=logger)
def orderbook_plot_data_request(instrument: Union[str, None] = ..., accountID: str = ...) -> Union[pd.DataFrame, bool]:
    """Request order book data for plotting.

    Parameters
    ----------
    instrument : Union[str, None]
        The loaded currency pair, by default None
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT

    Returns
    -------
    Union[pd.DataFrame, bool]
        Order book data or False
    """
    ...

@log_start_end(log=logger)
def positionbook_plot_data_request(instrument: Union[str, None] = ..., accountID: str = ...) -> Union[pd.DataFrame, bool]:
    """Request position book data for plotting.

    Parameters
    ----------
    instrument : Union[str, None]
        The loaded currency pair, by default None
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT

    Returns
    -------
    Union[pd.DataFrame, bool]
        Position book data or False
    """
    ...

@log_start_end(log=logger)
def order_history_request(order_state: str = ..., order_count: int = ..., accountID: str = ...) -> Union[pd.DataFrame, bool]:
    """Request the orders list from Oanda.

    Parameters
    ----------
    order_state : str
        Filter orders by a specific state ("PENDING", "CANCELLED", etc.)
    order_count : int
        Limit the number of orders to retrieve
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT
    """
    ...

@log_start_end(log=logger)
def create_order_request(price: int = ..., units: int = ..., instrument: Union[str, None] = ..., accountID: str = ...) -> Union[pd.DataFrame, bool]:
    """Request creation of buy/sell trade order.

    Parameters
    ----------
    instrument : Union[str, None]
        The loaded currency pair, by default None
    price : int
        The price to set for the limit order.
    units : int
        The number of units to place in the order request.
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT

    Returns
    -------
    Union[pd.DataFrame, bool]
        Orders data or False
    """
    ...

@log_start_end(log=logger)
def cancel_pending_order_request(orderID: str, accountID: str = ...) -> Union[str, bool]:
    """Request cancellation of a pending order.

    Parameters
    ----------
    orderID : str
        The pending order ID to cancel.
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT
    """
    ...

@log_start_end(log=logger)
def open_positions_request(accountID: str = ...) -> Union[pd.DataFrame, bool]:
    """Request information on open positions.

    Parameters
    ----------
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT
    """
    ...

@log_start_end(log=logger)
def pending_orders_request(accountID: str = ...) -> Union[pd.DataFrame, bool]:
    """Request information on pending orders.

    Parameters
    ----------
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT

    Returns
    -------
    Union[pd.DataFrame, bool]
        Pending orders data or False
    """
    ...

@log_start_end(log=logger)
def open_trades_request(accountID: str = ...) -> Union[pd.DataFrame, bool]:
    """Request open trades data.

    Parameters
    ----------
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT

    Returns
    -------
    Union[pd.DataFrame, bool]
        Open trades data or False
    """
    ...

@log_start_end(log=logger)
def close_trades_request(orderID: str, units: Union[int, None] = ..., accountID: str = ...) -> Union[pd.DataFrame, bool]:
    """Close a trade.

    Parameters
    ----------
    orderID : str
        ID of the order to close
    units : Union[int, None]
        Number of units to close. If empty default to all.
    accountID : str, optional
        Oanda account ID, by default cfg.OANDA_ACCOUNT

    Returns
    -------
    Union[pd.DataFrame, bool]
        Close trades data or False
    """
    ...

@log_start_end(log=logger)
def get_candles_dataframe(instrument: Union[str, None] = ..., granularity: str = ..., candlecount: int = ...) -> Union[pd.DataFrame, bool]:
    """Request data for candle chart.

    Parameters
    ----------
    instrument : str
        Loaded currency pair code
    granularity : str, optional
        Data granularity, by default "D"
    candlecount : int, optional
        Limit for the number of data points, by default 180

    Returns
    -------
    Union[pd.DataFrame, bool]
        Candle chart data or False
    """
    ...

@log_start_end(log=logger)
def get_calendar_request(days: int = ..., instrument: Union[str, None] = ...) -> Union[pd.DataFrame, bool]:
    """Request data of significant events calendar.

    Parameters
    ----------
    instrument : Union[str, None]
        The loaded currency pair, by default None
    days : int
        Number of days in advance

    Returns
    -------
    Union[pd.DataFrame, bool]
        Calendar events data or False
    """
    ...

