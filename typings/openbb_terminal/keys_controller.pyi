"""
This type stub file was generated by pyright.
"""

from typing import Callable, Dict, List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Keys Controller Module"""
__docformat__ = ...
logger = ...
class KeysController(BaseController):
    """Keys Controller class"""
    API_DICT = ...
    API_LIST = ...
    CHOICES_COMMANDS: List[str] = ...
    PATH = ...
    status_dict: Dict = ...
    help_status_text: str = ...
    def __init__(self, queue: Optional[List[str]] = ..., menu_usage: bool = ...) -> None:
        """Constructor"""
        ...
    
    def get_check_keys_function(self, key: str) -> Callable:
        """Get check `key` function from keys_model"""
        ...
    
    def check_keys_status(self, reevaluate: bool = ...) -> None:
        """Check keys status"""
        ...
    
    def get_source_hierarchy(self) -> str:
        """Hierarchy is equivalent to reverse order of reading .env files.

        Returns
        -------
        str
            Source priority string.
        """
        ...
    
    def print_help(self, update_status: bool = ..., reevaluate: bool = ...): # -> None:
        """Print help"""
        ...
    
    @log_start_end(log=logger)
    def call_mykeys(self, other_args: List[str]): # -> None:
        """Display current keys"""
        ...
    
    @log_start_end(log=logger)
    def call_status(self, other_args: List[str]): # -> None:
        """Display current keys status with the option to force the check"""
        ...
    
    @log_start_end(log=logger)
    def call_av(self, other_args: List[str]): # -> None:
        """Process av command"""
        ...
    
    @log_start_end(log=logger)
    def call_fmp(self, other_args: List[str]): # -> None:
        """Process fmp command"""
        ...
    
    @log_start_end(log=logger)
    def call_quandl(self, other_args: List[str]): # -> None:
        """Process quandl command"""
        ...
    
    @log_start_end(log=logger)
    def call_polygon(self, other_args: List[str]): # -> None:
        """Process polygon command"""
        ...
    
    @log_start_end(log=logger)
    def call_intrinio(self, other_args: List[str]): # -> None:
        """Process polygon command"""
        ...
    
    @log_start_end(log=logger)
    def call_fred(self, other_args: List[str]): # -> None:
        """Process FRED command"""
        ...
    
    @log_start_end(log=logger)
    def call_news(self, other_args: List[str]): # -> None:
        """Process News API command"""
        ...
    
    @log_start_end(log=logger)
    def call_biztoc(self, other_args: List[str]): # -> None:
        """Process BizToc API command"""
        ...
    
    @log_start_end(log=logger)
    def call_tradier(self, other_args: List[str]): # -> None:
        """Process Tradier API command"""
        ...
    
    @log_start_end(log=logger)
    def call_cmc(self, other_args: List[str]): # -> None:
        """Process CoinMarketCap API command"""
        ...
    
    @log_start_end(log=logger)
    def call_finnhub(self, other_args: List[str]): # -> None:
        """Process Finnhub API command"""
        ...
    
    @log_start_end(log=logger)
    def call_reddit(self, other_args: List[str]): # -> None:
        """Process reddit command"""
        ...
    
    @log_start_end(log=logger)
    def call_twitter(self, other_args: List[str]): # -> None:
        """Process twitter command"""
        ...
    
    @log_start_end(log=logger)
    def call_rh(self, other_args: List[str]): # -> None:
        """Process rh command"""
        ...
    
    @log_start_end(log=logger)
    def call_degiro(self, other_args: List[str]): # -> None:
        """Process degiro command"""
        ...
    
    @log_start_end(log=logger)
    def call_oanda(self, other_args: List[str]): # -> None:
        """Process oanda command"""
        ...
    
    @log_start_end(log=logger)
    def call_binance(self, other_args: List[str]): # -> None:
        """Process binance command"""
        ...
    
    @log_start_end(log=logger)
    def call_bitquery(self, other_args: List[str]): # -> None:
        """Process bitquery command"""
        ...
    
    @log_start_end(log=logger)
    def call_coinbase(self, other_args: List[str]): # -> None:
        """Process coinbase command"""
        ...
    
    @log_start_end(log=logger)
    def call_walert(self, other_args: List[str]): # -> None:
        """Process walert command"""
        ...
    
    @log_start_end(log=logger)
    def call_glassnode(self, other_args: List[str]): # -> None:
        """Process glassnode command"""
        ...
    
    @log_start_end(log=logger)
    def call_coinglass(self, other_args: List[str]): # -> None:
        """Process coinglass command"""
        ...
    
    @log_start_end(log=logger)
    def call_cpanic(self, other_args: List[str]): # -> None:
        """Process cpanic command"""
        ...
    
    @log_start_end(log=logger)
    def call_ethplorer(self, other_args: List[str]): # -> None:
        """Process ethplorer command"""
        ...
    
    @log_start_end(log=logger)
    def call_smartstake(self, other_args: List[str]): # -> None:
        """Process smartstake command"""
        ...
    
    @log_start_end(log=logger)
    def call_github(self, other_args: List[str]): # -> None:
        """Process github command"""
        ...
    
    @log_start_end(log=logger)
    def call_messari(self, other_args: List[str]): # -> None:
        """Process messari command"""
        ...
    
    @log_start_end(log=logger)
    def call_eodhd(self, other_args: List[str]): # -> None:
        """Process eodhd command"""
        ...
    
    @log_start_end(log=logger)
    def call_santiment(self, other_args: List[str]): # -> None:
        """Process santiment command"""
        ...
    
    @log_start_end(log=logger)
    def call_shroom(self, other_args: List[str]): # -> None:
        """Process shroom command"""
        ...
    
    @log_start_end(log=logger)
    def call_tokenterminal(self, other_args: List[str]): # -> None:
        """Process tokenterminal command"""
        ...
    
    @log_start_end(log=logger)
    def call_stocksera(self, other_args: List[str]): # -> None:
        """Process stocksera command"""
        ...
    
    @log_start_end(log=logger)
    def call_databento(self, other_args: List[str]): # -> None:
        """Process databento command"""
        ...
    
    @log_start_end(log=logger)
    def call_openai(self, other_args: List[str]): # -> None:
        """Process openai command"""
        ...
    
    @log_start_end(log=logger)
    def call_ultima(self, other_args: List[str]): # -> None:
        """Process ultima command"""
        ...
    
    @log_start_end(log=logger)
    def call_dappradar(self, other_args: List[str]): # -> None:
        """Process dappradar command"""
        ...
    


