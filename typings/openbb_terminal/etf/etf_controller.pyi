"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""ETF Controller"""
__docformat__ = ...
logger = ...
class ETFController(BaseController):
    """ETF Controller class"""
    CHOICES_COMMANDS = ...
    CHOICES_MENUS = ...
    CANDLE_COLUMNS = ...
    PATH = ...
    FILE_PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    def custom_reset(self): # -> list[str] | list[Unknown]:
        """Class specific component of reset command"""
        ...
    
    @log_start_end(log=logger)
    def call_search(self, other_args: List[str]): # -> None:
        """Process search command"""
        ...
    
    @log_start_end(log=logger)
    def call_load(self, other_args: List[str]): # -> None:
        """Process load command"""
        ...
    
    @log_start_end(log=logger)
    def call_overview(self, other_args: List[str]): # -> None:
        """Process overview command"""
        ...
    
    @log_start_end(log=logger)
    def call_holdings(self, other_args: List[str]): # -> None:
        """Process holdings command"""
        ...
    
    @log_start_end(log=logger)
    def call_news(self, other_args: List[str]): # -> None:
        """Process news command"""
        ...
    
    @log_start_end(log=logger)
    def call_candle(self, other_args: List[str]): # -> None:
        """Process candle command"""
        ...
    
    @log_start_end(log=logger)
    def call_weights(self, other_args: List[str]): # -> None:
        """Process weights command"""
        ...
    
    @log_start_end(log=logger)
    def call_ta(self, _): # -> None:
        """Process ta command"""
        ...
    
    @log_start_end(log=logger)
    def call_ca(self, other_args: List[str]): # -> None:
        """Process ca command"""
        ...
    
    @log_start_end(log=logger)
    def call_disc(self, _): # -> None:
        """Process disc command"""
        ...
    
    @log_start_end(log=logger)
    def call_compare(self, other_args): # -> None:
        """Process compare command"""
        ...
    


