"""
This type stub file was generated by pyright.
"""

from pathlib import Path
from typing import List

class AWSSettings:
    @property
    def aws_access_key_id(self) -> str:
        ...
    
    @property
    def aws_secret_access_key(self) -> str:
        ...
    
    def __init__(self, aws_access_key_id: str, aws_secret_access_key: str) -> None:
        ...
    


class AppSettings:
    @property
    def name(self) -> str:
        ...
    
    @property
    def commit_hash(self) -> str:
        ...
    
    @property
    def identifier(self) -> str:
        ...
    
    @property
    def session_id(self) -> str:
        ...
    
    @property
    def user_id(self) -> str:
        ...
    
    @user_id.setter
    def user_id(self, value: str): # -> None:
        ...
    
    def __init__(self, name: str, commit_hash: str, session_id: str, identifier: str, user_id: str) -> None:
        """
        Args:
            name (str): Source of the application.
            commit_hash (str): Commit hash of the current running code.
            identifier (str): Unique key identifying a particular installation.
            session_id (str): Key identifying a particular running session.
            user_id (str): Hash identifying a particular user.
        """
        ...
    


class LogSettings:
    @property
    def directory(self) -> Path:
        ...
    
    @property
    def frequency(self) -> str:
        ...
    
    @property
    def handler_list(self) -> List[str]:
        ...
    
    @property
    def rolling_clock(self) -> bool:
        ...
    
    @property
    def verbosity(self) -> int:
        ...
    
    def __init__(self, directory: Path, frequency: str, handler_list: List[str], rolling_clock: bool, verbosity: int) -> None:
        """
        Args:
            directory (Path): Directory used to store log files.
            frequency (str): Frequency of the log files rotation.
            handler_list (List[str]) : list of handlers : stdout,stderr,noop,file,posthog.
            rolling_clock (bool): Whether or not to start a Thread to rotate logs even when inactive.
            verbosity (str): Verbosity level as defined in Python `logging` module.
        """
        ...
    


class Settings:
    @property
    def app_settings(self) -> AppSettings:
        ...
    
    @property
    def log_settings(self) -> LogSettings:
        ...
    
    @property
    def aws_settings(self) -> AWSSettings:
        ...
    
    def __init__(self, app_settings: AppSettings, aws_settings: AWSSettings, log_settings: LogSettings) -> None:
        """This model regroups all configurations used by these classes instance :
         - openbb_terminal.core.log.collection.log_sender.LogSender
         - openbb_terminal.core.log.generation.formatter_with_exceptions.FormatterWithExceptions
         - openbb_terminal.core.log.generation.path_tracking_file_handler.PathTrackingFileHandler

        Args:
            app_name (str): Instance of AppSettings.
            log_settings (str): Instance of LogSettings.
            aws_settings (str): Instance of AWSSettings.
        """
        ...
    


