"""
This type stub file was generated by pyright.
"""

import logging
from datetime import datetime
from enum import Enum
from threading import Thread
from typing import Callable, Optional

class Precision(Enum):
    hour = ...
    minute = ...


class LoggingClock(Thread):
    """
    Like a Talking Clock but for logs.

    Usage example :
        import logging
        from openbb_terminal.log_collection.logging_clock import LoggingClock, Precision

        logging.basicConfig()
        logger = logging.getLogger(__name__)
        logger.setLevel(level=logging.INFO)

        logging_clock = LoggingClock(
            logger=logger,
            precision=Precision.minute,
        )
        logging_clock.start()
        logging_clock.join()
    """
    @classmethod
    def calculate_next_sharp(cls, current_time: datetime, precision: Precision) -> datetime:
        ...
    
    @staticmethod
    def calculate_next_sharp_hour(current_time: datetime) -> datetime:
        ...
    
    @staticmethod
    def calculate_next_sharp_minute(current_time: datetime) -> datetime:
        ...
    
    @classmethod
    def do_action_every_sharp(cls, action: Callable, precision: Precision = ...):
        ...
    
    def run(self): # -> None:
        ...
    
    def __init__(self, *args, action: Optional[Callable] = ..., level: int = ..., logger: Optional[logging.Logger] = ..., msg: str = ..., precision: Precision = ..., **kwargs) -> None:
        ...
    
    def default_action(self): # -> None:
        ...
    


