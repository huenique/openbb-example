"""
This type stub file was generated by pyright.
"""

import pandas as pd
import plotly.graph_objects as go
from pathlib import Path
from typing import Optional, Union
from pywry import PyWry
from IPython import get_ipython

"""Backend for Plotly."""
if "IPKernelApp" not in get_ipython().config:
    ...
if ("parent_header" in get_ipython().kernel._parent_ident):
    ...
PLOTS_CORE_PATH = ...
PLOTLYJS_PATH = ...
BACKEND = ...
class Backend(PyWry):
    """Custom backend for Plotly."""
    def __new__(cls, *args, **kwargs): # -> Self@Backend:
        """Create a singleton instance of the backend."""
        ...
    
    def __init__(self, daemon: bool = ..., max_retries: int = ..., proc_name: str = ...) -> None:
        ...
    
    def set_window_dimensions(self): # -> None:
        """Set the window dimensions."""
        ...
    
    def get_pending(self) -> list:
        """Get the pending data that has not been sent to the backend."""
        ...
    
    def get_plotly_html(self) -> Path:
        """Get the plotly html file."""
        ...
    
    def get_table_html(self) -> Path:
        """Get the table html file."""
        ...
    
    def get_window_icon(self) -> Optional[Path]:
        """Get the window icon."""
        ...
    
    def get_json_update(self, cmd_loc: str, theme: Optional[str] = ...) -> dict:
        """Get the json update for the backend."""
        ...
    
    def send_figure(self, fig: go.Figure, export_image: Optional[Union[Path, str]] = ...): # -> None:
        """Send a Plotly figure to the backend.

        Parameters
        ----------
        fig : go.Figure
            Plotly figure to send to backend.
        export_image : str, optional
            Path to export image to, by default ""
        """
        ...
    
    async def process_image(self, export_image: Path): # -> None:
        """Check if the image has been exported to the path."""
        ...
    
    def send_table(self, df_table: pd.DataFrame, title: str = ..., source: str = ..., theme: str = ...): # -> None:
        """Send table data to the backend to be displayed in a table.

        Parameters
        ----------
        df_table : pd.DataFrame
            Dataframe to send to backend.
        title : str, optional
            Title to display in the window, by default ""
        source : str, optional
            Source of the data, by default ""
        theme : light or dark, optional
            Theme of the table, by default "light"
        """
        ...
    
    def send_url(self, url: str, title: str = ..., width: Optional[int] = ..., height: Optional[int] = ...): # -> None:
        """Send a URL to the backend to be displayed in a window.

        Parameters
        ----------
        url : str
            URL to display in the window.
        title : str, optional
            Title to display in the window, by default ""
        width : int, optional
            Width of the window, by default 1200
        height : int, optional
            Height of the window, by default 800
        """
        ...
    
    def get_kwargs(self, title: str = ...) -> dict:
        """Get the kwargs for the backend."""
        ...
    
    def start(self, debug: bool = ...): # -> None:
        """Start the backend WindowManager process."""
        ...
    
    def check_backend(self): # -> Coroutine[Any, Any, NoReturn] | None:
        """Override to check if isatty."""
        ...
    
    def close(self, reset: bool = ...): # -> None:
        """Close the backend."""
        ...
    
    async def get_results(self, description: str) -> dict:
        """Wait for completion of interactive task and return the data.

        Parameters
        ----------
        description : str
            Description of the task to console print while waiting.

        Returns
        -------
        dict
            The data returned from pywry backend.
        """
        ...
    
    def call_hub(self, login: bool = ...) -> Optional[dict]:
        """Call the hub to login or logout.

        Parameters
        ----------
        login : bool, optional
            Whether to login or logout, by default True

        Returns
        -------
        Optional[dict]
            The user data if login was successful, None otherwise.
        """
        ...
    


async def download_plotly_js(): # -> None:
    """Download or updates plotly.js to the assets folder."""
    ...

def plots_backend() -> Backend:
    """Get the backend."""
    ...

if notPLOTLYJS_PATH.exists() and notJUPYTER_NOTEBOOK:
    ...
