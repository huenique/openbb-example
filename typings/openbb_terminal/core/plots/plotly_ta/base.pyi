"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Any, Callable, Dict, Iterator, List, Optional, Type
from .data_classes import ChartIndicators, TAIndicator

def columns_regex(df_ta: pd.DataFrame, name: str) -> List[str]:
    """Return columns that match regex name"""
    ...

class Indicator:
    """Class for technical indicator."""
    def __init__(self, func: Callable, name: str = ..., **attrs: Any) -> None:
        ...
    
    def __call__(self, *args: Any, **kwargs: Any) -> Any:
        ...
    


class PluginMeta(type):
    """Metaclass for all Plotly plugins."""
    __indicators__: List[Indicator] = ...
    __static_methods__: list = ...
    __ma_mode__: List[str] = ...
    __inchart__: List[str] = ...
    __subplots__: List[str] = ...
    def __new__(mcs: Type[PluginMeta], *args: Any, **kwargs: Any) -> PluginMeta:
        ...
    
    def __iter__(cls: Type[PluginMeta]) -> Iterator[Indicator]:
        ...
    
    def __init__(cls, *args: Any, **kwargs: Any) -> None:
        ...
    


class PltTA(metaclass=PluginMeta):
    """The base class that all Plotly plugins must inherit from."""
    indicators: ChartIndicators
    intraday: bool = ...
    df_stock: pd.DataFrame
    df_ta: pd.DataFrame
    df_fib: pd.DataFrame
    close_column: Optional[str] = ...
    params: Dict[str, TAIndicator] = ...
    inchart_colors: List[str] = ...
    show_volume: bool = ...
    __static_methods__: list = ...
    __indicators__: List[Indicator] = ...
    __ma_mode__: List[str] = ...
    __inchart__: List[str] = ...
    __subplots__: List[str] = ...
    def __new__(cls, *args: Any, **kwargs: Any) -> PltTA:
        ...
    
    @property
    def ma_mode(self) -> List[str]:
        ...
    
    @ma_mode.setter
    def ma_mode(self, value: List[str]): # -> None:
        ...
    
    def add_plugins(self, plugins: List[PltTA]) -> None:
        """Add plugins to current instance"""
        ...
    
    def remove_plugins(self, plugins: List[PltTA]) -> None:
        """Remove plugins from current instance"""
        ...
    
    def __iter__(self) -> Iterator[Indicator]:
        ...
    
    def get_float_precision(self) -> str:
        """Returns f-string precision format"""
        ...
    


def indicator(name: str = ..., **attrs: Any) -> Callable:
    """Decorator for adding indicators to a plugin class."""
    ...

