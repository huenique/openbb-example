"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Any, Dict, List, Optional, Type, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.core.plots.plotly_ta.base import PltTA
from openbb_terminal.core.plots.plotly_ta.data_classes import ChartIndicators

PLUGINS_PATH = ...
PLOTLY_TA: Optional[PlotlyTA] = ...
class PlotlyTA(PltTA):
    """Plotly Technical Analysis class

    This class is a singleton. It is created and then reused, to assure
    the plugins are only loaded once. This is done by overriding the __new__
    method. The __init__ method is overridden to do nothing, except to clear
    the internal data structures.

    Attributes
    ----------
    inchart_colors (List[str]):
        List of colors for inchart indicators
    show_volume (bool):
        Whether to show the volume subplot
    ma_mode (List[str]):
        List of available moving average modes
    inchart (List[str]):
        List of available inchart indicators
    subplots (List[str]):
        List of available subplots

    StaticMethods
    -------------
    plot(
        df: pd.DataFrame,
        indicators: ChartIndicators,
        fig: Optional[OpenBBFigure] = None,
        symbol: Optional[str] = "",
        candles: bool = True,
        volume: bool = True,
    ) -> OpenBBFigure:
        Plots the chart with the given indicators


    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> from openbb_terminal.core.plots.plotly_ta.ta_class import PlotlyTA

    >>> df = openbb.stocks.load("SPY")
    >>> indicators = dict(
    >>>     sma=dict(length=[20, 50, 100]),
    >>>     adx=dict(length=14),
    >>>     macd=dict(fast=12, slow=26, signal=9),
    >>>     rsi=dict(length=14),
    >>> )
    >>> fig = PlotlyTA.plot(df, indicators=indicators)
    >>> fig.show()

    If you want to plot the chart with the same indicators, you can
    reuse the same instance of the class as follows:

    >>> ta = PlotlyTA()
    >>> fig = ta.plot(df, indicators=indicators)
    >>> df2 = openbb.stocks.load("AAPL")
    >>> fig2 = ta.plot(df2)
    >>> fig.show()
    >>> fig2.show()
    """
    inchart_colors = ...
    plugins: List[Type[PltTA]] = ...
    df_ta: pd.DataFrame = ...
    close_column: Optional[str] = ...
    has_volume: bool = ...
    show_volume: bool = ...
    def __new__(cls, *args, **kwargs): # -> PlotlyTA | None:
        """This method is overridden to create a singleton instance of the class."""
        ...
    
    def __init__(self, *args, **kwargs) -> None:
        """This method is overridden to do nothing, except to clear the internal data structures."""
        ...
    
    @property
    def ma_mode(self) -> List[str]:
        ...
    
    @ma_mode.setter
    def ma_mode(self, value: List[str]): # -> None:
        ...
    
    @property
    def inchart(self) -> List[str]:
        ...
    
    @inchart.setter
    def inchart(self, value: List[str]): # -> None:
        ...
    
    @property
    def subplots(self) -> List[str]:
        ...
    
    @subplots.setter
    def subplots(self, value: List[str]): # -> None:
        ...
    
    def __plot__(self, df_stock: Union[pd.DataFrame, pd.Series], indicators: Optional[Union[ChartIndicators, Dict[str, Dict[str, Any]]]] = ..., symbol: str = ..., candles: bool = ..., volume: bool = ..., fig: Optional[OpenBBFigure] = ..., volume_ticks_x: int = ...) -> OpenBBFigure:
        """This method should not be called directly. Use the PlotlyTA.plot() static method instead."""
        ...
    
    @staticmethod
    def plot(df_stock: Union[pd.DataFrame, pd.Series], indicators: Optional[Union[ChartIndicators, Dict[str, Dict[str, Any]]]] = ..., symbol: str = ..., candles: bool = ..., volume: bool = ..., fig: Optional[OpenBBFigure] = ..., volume_ticks_x: int = ...) -> OpenBBFigure:
        """Plot a chart with the given indicators.

        Parameters
        ----------
        df_stock : pd.DataFrame
            Dataframe with stock data
        indicators : Union[ChartIndicators, Dict[str, Dict[str, Any]]]
            ChartIndicators object or dictionary with indicators and parameters to plot
            Example:
                dict(
                    sma=dict(length=[20, 50, 100]),
                    adx=dict(length=14),
                    macd=dict(fast=12, slow=26, signal=9),
                    rsi=dict(length=14),
                )
        symbol : str, optional
            Symbol to plot, by default uses the dataframe.name attribute if available or ""
        candles : bool, optional
            Plot a candlestick chart, by default True (if False, plots a line chart)
        volume : bool, optional
            Plot volume, by default True
        fig : OpenBBFigure, optional
            Plotly figure to plot on, by default None
        volume_ticks_x : int, optional
            Number to multiply volume, by default 7
        """
        ...
    
    def calculate_indicators(self): # -> DataFrame:
        """Return dataframe with all indicators"""
        ...
    
    def get_subplot(self, subplot: str) -> bool:
        """Return True if subplots will be able to be plotted with current data"""
        ...
    
    def check_subplots(self, subplots: list) -> list:
        """Return list of subplots that can be plotted with current data"""
        ...
    
    def get_fig_settings_dict(self):
        """Return dictionary with settings for plotly figure"""
        ...
    
    def init_plot(self, symbol: str = ..., candles: bool = ...) -> OpenBBFigure:
        """Create plotly figure with subplots

        Parameters
        ----------
        symbol : str, optional
            Symbol to plot, by default uses the dataframe.name attribute if available or ""
        candles : bool, optional
            Plot a candlestick chart, by default True (if False, plots a line chart)

        Returns
        -------
        fig : OpenBBFigure
            Plotly figure with candlestick/line chart and volume bar chart (if enabled)
        """
        ...
    
    def plot_fig(self, fig: Optional[OpenBBFigure] = ..., symbol: str = ..., candles: bool = ..., volume_ticks_x: int = ...) -> OpenBBFigure:
        """Plot indicators on plotly figure

        Parameters
        ----------
        fig : OpenBBFigure, optional
            Plotly figure to plot indicators on, by default None
        symbol : str, optional
            Symbol to plot, by default uses the dataframe.name attribute if available or ""
        candles : bool, optional
            Plot a candlestick chart, by default True (if False, plots a line chart)
        volume_ticks_x : int, optional
            Number to multiply volume, by default 7

        Returns
        -------
        fig : OpenBBFigure
            Plotly figure with candlestick/line chart and volume bar chart (if enabled)
        """
        ...
    
    def process_fig(self, fig: OpenBBFigure, volume_ticks_x: int = ...) -> OpenBBFigure:
        """Process plotly figure before plotting indicators

        Parameters
        ----------
        fig : OpenBBFigure
            Plotly figure to process
        volume_ticks_x : int, optional
            Number to multiply volume, by default 7

        Returns
        -------
        fig : OpenBBFigure
            Processed plotly figure
        """
        ...
    


