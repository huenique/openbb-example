"""
This type stub file was generated by pyright.
"""

import pandas as pd
from dataclasses import dataclass
from typing import Any, Dict, List, Optional, Union
from openbb_terminal.decorators import log_start_end

logger = ...
datacls_kwargs = ...
def columns_regex(df_ta: pd.DataFrame, name: str) -> List[str]:
    """Return columns that match regex name"""
    ...

@dataclass(**datacls_kwargs)
class Arguments:
    label: str
    values: Any
    def __post_init__(self): # -> None:
        ...
    


@dataclass(**datacls_kwargs)
class TAIndicator:
    name: str
    args: List[Arguments]
    def __post_init__(self): # -> None:
        ...
    
    def __iter__(self): # -> Iterator[Arguments]:
        """Return iterator"""
        ...
    
    def get_args(self, label: str) -> Union[Arguments, None]:
        """Return arguments by label"""
        ...
    
    def get_argument_values(self, label: str) -> Union[List[Any], Any]:
        """Returns arguments values by label"""
        ...
    


@dataclass(**datacls_kwargs)
class ChartIndicators:
    indicators: Optional[List[TAIndicator]] = ...
    def __post_init__(self): # -> None:
        ...
    
    def get_indicator(self, name: str) -> Union[TAIndicator, None]:
        """Returns indicator with given name"""
        ...
    
    def get_indicator_args(self, name: str, label: str) -> Union[Arguments, None]:
        """Returns argument values for given indicator and label"""
        ...
    
    def get_indicators(self) -> Optional[List[TAIndicator]]:
        """Return active indicators and their arguments"""
        ...
    
    def get_params(self) -> Dict[str, TAIndicator]:
        """Return dictionary of active indicators and their arguments"""
        ...
    
    def get_active_ids(self) -> List[str]:
        """Returns list of names of active indicators"""
        ...
    
    def get_arg_names(self, name: str) -> List[str]:
        """Returns list of argument labels for given indicator"""
        ...
    
    def get_options_dict(self, name: str) -> Dict[str, Optional[Arguments]]:
        """Returns dictionary of argument labels and values for given indicator"""
        ...
    
    @classmethod
    def from_dict(cls, indicators: Dict[str, Dict[str, Any]]) -> ChartIndicators:
        """Return ChartIndicators from dictionary"""
        ...
    
    def to_dataframe(self, df_ta: pd.DataFrame, ma_mode: Optional[List[str]] = ...) -> pd.DataFrame:
        """Calculate technical analysis indicators and return dataframe"""
        ...
    
    def get_indicator_data(self, df_ta: pd.DataFrame, indicator: TAIndicator, **kwargs): # -> DataFrame | None:
        """Return dataframe with technical analysis indicators"""
        ...
    
    def remove_indicator(self, name: str) -> None:
        """Remove indicator from active indicators"""
        ...
    


class TA_Data:
    """Process technical analysis data


    Parameters
    ----------
    df_ta : pd.DataFrame
        Dataframe with OHLCV data
    indicators : Union[ChartIndicators, Dict[str, Dict[str, Any]]]
        ChartIndicators object or dictionary with indicators and arguments
        Example:
            dict(
                sma=dict(length=[20, 50, 100]),
                adx=dict(length=14),
                macd=dict(fast=12, slow=26, signal=9),
                rsi=dict(length=14),
            )


    Methods
    -------
    to_dataframe()
        Return dataframe with technical analysis indicators
    get_indicator_data(indicator: TAIndicator, **kwargs)
        Return dataframe given indicator and arguments

    """
    @log_start_end(log=logger)
    def __init__(self, df_ta: Union[pd.DataFrame, pd.Series], indicators: Union[ChartIndicators, Dict[str, Dict[str, Any]]], ma_mode: Optional[List[str]] = ...) -> None:
        ...
    
    def get_indicator_data(self, indicator: TAIndicator, **args) -> pd.DataFrame:
        """Returns dataframe with indicator data

        Parameters
        ----------
        indicator : TAIndicator
            TAIndicator object
        args : dict
            Arguments for given indicator

        Returns
        -------
        pd.DataFrame
            Dataframe with indicator data
        """
        ...
    
    def to_dataframe(self) -> pd.DataFrame:
        """Returns dataframe with all indicators"""
        ...
    


