"""
This type stub file was generated by pyright.
"""

from typing import List, Literal
from pydantic import root_validator, validator
from pydantic.dataclasses import dataclass
from openbb_terminal.core.models import BaseModel

@dataclass(config=dict(validate_assignment=True, frozen=True))
class SystemModel(BaseModel):
    """
    Data model for system variables and configurations.

    Disclaimer:
        If you need to have a system related variable that is a credential like
        `LOGGING_AWS_ACCESS_KEY_ID` and `LOGGING_AWS_SECRET_ACCESS_KEY`, you need
        refer to the following function
        `openbb_terminal.core.log.generation.settings_logger.log_system`,
        in order to filter it from the logs.
    """
    OS: str = ...
    PYTHON_VERSION: str = ...
    PLATFORM: str = ...
    VERSION: str = ...
    LOGGING_APP_ID: str = ...
    LOGGING_APP_NAME: str = ...
    LOGGING_AWS_ACCESS_KEY_ID: str = ...
    LOGGING_AWS_SECRET_ACCESS_KEY: str = ...
    LOGGING_COMMIT_HASH: str = ...
    LOGGING_BRANCH: str = ...
    LOGGING_FREQUENCY: Literal["D", "H", "M", "S"] = ...
    LOGGING_HANDLERS: List[str] = ...
    LOGGING_ROLLING_CLOCK: bool = ...
    LOGGING_VERBOSITY: int = ...
    LOGGING_SUB_APP: str = ...
    LOGGING_SUPPRESS: bool = ...
    LOGGING_SEND_TO_S3: bool = ...
    LOG_COLLECT: bool = ...
    DISABLE_STREAMLIT_WARNING: bool = ...
    DISABLE_FORECASTING_WARNING: bool = ...
    DISABLE_OPTIMIZATION_WARNING: bool = ...
    TEST_MODE: bool = ...
    DEBUG_MODE: bool = ...
    DEV_BACKEND: bool = ...
    ENABLE_AUTHENTICATION: bool = ...
    HEADLESS: bool = ...
    def __repr__(self) -> str:
        ...
    
    @root_validator(allow_reuse=True)
    @classmethod
    def add_additional_handlers(cls, values):
        ...
    
    @root_validator(allow_reuse=True)
    @classmethod
    def validate_send_to_s3(cls, values):
        ...
    
    @validator("LOGGING_HANDLERS", allow_reuse=True)
    @classmethod
    def validate_logging_handlers(cls, v):
        ...
    


