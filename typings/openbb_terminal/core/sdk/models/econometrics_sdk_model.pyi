"""
This type stub file was generated by pyright.
"""

from openbb_terminal.core.sdk.sdk_helpers import Category

class EconometricsRoot(Category):
    """Econometrics Module

    Attributes:
        `bgod`: Calculate test statistics for autocorrelation\n
        `bgod_chart`: Show Breusch-Godfrey autocorrelation test\n
        `bols`: The between estimator is an alternative, usually less efficient estimator, can can be used to\n
        `bpag`: Calculate test statistics for heteroscedasticity\n
        `bpag_chart`: Show Breusch-Pagan heteroscedasticity test\n
        `clean`: Clean up NaNs from the dataset\n
        `coint`: Calculate cointegration tests between variable number of input series\n
        `coint_chart`: Estimates long-run and short-run cointegration relationship for series y and x and apply\n
        `comparison`: Compare regression results between Panel Data regressions.\n
        `dwat`: Calculate test statistics for Durbin Watson autocorrelation\n
        `dwat_chart`: Show Durbin-Watson autocorrelation tests\n
        `fdols`: First differencing is an alternative to using fixed effects when there might be correlation.\n
        `fe`: When effects are correlated with the regressors the RE and BE estimators are not consistent.\n
        `garch`: Calculates volatility forecasts based on GARCH.\n
        `garch_chart`: Plots the volatility forecasts based on GARCH\n
        `get_regression_data`: This function creates a DataFrame with the required regression data as\n
        `granger`: Calculate granger tests\n
        `granger_chart`: Show granger tests\n
        `load`: Load custom file into dataframe.\n
        `norm`: The distribution of returns and generate statistics on the relation to the normal curve.\n
        `norm_chart`: Determine the normality of a timeseries.\n
        `ols`: Performs an OLS regression on timeseries data. [Source: Statsmodels]\n
        `options`: Obtain columns-dataset combinations from loaded in datasets that can be used in other commands\n
        `options_chart`: Plot custom data\n
        `panel`: Based on the regression type, this function decides what regression to run.\n
        `panel_chart`: Based on the regression type, this function decides what regression to run.\n
        `pols`: PooledOLS is just plain OLS that understands that various panel data structures.\n
        `re`: The random effects model is virtually identical to the pooled OLS model except that is accounts for the\n
        `root`: Calculate test statistics for unit roots\n
        `root_chart`: Determine the normality of a timeseries.\n
        `vif`: Calculates VIF (variance inflation factor), which tests collinearity.\n
    """
    _location_path = ...
    def __init__(self) -> None:
        ...
    


