"""
This type stub file was generated by pyright.
"""

from openbb_terminal.core.sdk.sdk_helpers import Category

class TaRoot(Category):
    """Technical Analysis Module

    Attributes:
        `ad`: Calculate AD technical indicator\n
        `ad_chart`: Plots AD technical indicator\n
        `adosc`: Calculate AD oscillator technical indicator\n
        `adosc_chart`: Plots AD Osc Indicator\n
        `adx`: ADX technical indicator\n
        `adx_chart`: Plots ADX indicator\n
        `aroon`: Aroon technical indicator\n
        `aroon_chart`: Plots Aroon indicator\n
        `atr`: Average True Range\n
        `atr_chart`: Plots ATR\n
        `bbands`: Calculate Bollinger Bands\n
        `bbands_chart`: Plots bollinger bands\n
        `cci`: Commodity channel index\n
        `cci_chart`: Plots CCI Indicator\n
        `cg`: Center of gravity\n
        `cg_chart`: Plots center of gravity Indicator\n
        `clenow`: Gets the Clenow Volatility Adjusted Momentum.  this is defined as the regression coefficient on log prices\n
        `clenow_chart`: Prints table and plots clenow momentum\n
        `cones`: Returns a DataFrame of realized volatility quantiles.\n
        `cones_chart`: Plots the realized volatility quantiles for the loaded ticker.\n
        `demark`: Get the integer value for demark sequential indicator\n
        `demark_chart`: Plot demark sequential indicator\n
        `donchian`: Calculate Donchian Channels\n
        `donchian_chart`: Plots donchian channels\n
        `ema`: Gets exponential moving average (EMA) for stock\n
        `fib`: Calculate Fibonacci levels\n
        `fib_chart`: Plots Calculated fibonacci retracement levels\n
        `fisher`: Fisher Transform\n
        `fisher_chart`: Plots Fisher Indicator\n
        `hma`: Gets hull moving average (HMA) for stock\n
        `kc`: Keltner Channels\n
        `kc_chart`: Plots Keltner Channels Indicator\n
        `ma`: Plots MA technical indicator\n
        `ma_chart`: Plots MA technical indicator\n
        `macd`: Moving average convergence divergence\n
        `macd_chart`: Plots MACD signal\n
        `obv`: On Balance Volume\n
        `obv_chart`: Plots OBV technical indicator\n
        `rsi`: Relative strength index\n
        `rsi_chart`: Plots RSI Indicator\n
        `rvol_garman_klass`: Garman-Klass volatility extends Parkinson volatility by taking into account the opening and closing price.\n
        `rvol_hodges_tompkins`: Hodges-Tompkins volatility is a bias correction for estimation using an overlapping data sample.\n
        `rvol_parkinson`: Parkinson volatility uses the high and low price of the day rather than just close to close prices.\n
        `rvol_rogers_satchell`: Rogers-Satchell is an estimator for measuring the volatility with an average return not equal to zero.\n
        `rvol_std`: Standard deviation measures how widely returns are dispersed from the average return.\n
        `rvol_yang_zhang`: Yang-Zhang volatility is the combination of the overnight (close-to-open volatility).\n
        `sma`: Gets simple moving average (SMA) for stock\n
        `standard_deviation`: Standard deviation measures how widely returns are dispersed from the average return.\n
        `stoch`: Stochastic oscillator\n
        `stoch_chart`: Plots stochastic oscillator signal\n
        `vwap`: Gets volume weighted average price (VWAP)\n
        `vwap_chart`: Plots VWMA technical indicator\n
        `wma`: Gets weighted moving average (WMA) for stock\n
        `zlma`: Gets zero-lagged exponential moving average (ZLEMA) for stock\n
    """
    _location_path = ...
    def __init__(self) -> None:
        ...
    


