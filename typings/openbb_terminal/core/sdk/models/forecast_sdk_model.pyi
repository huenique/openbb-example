"""
This type stub file was generated by pyright.
"""

from openbb_terminal.core.sdk.sdk_helpers import Category

class ForecastRoot(Category):
    """Forecasting Module

    Attributes:
        `anom`: Get Quantile Anomaly Detection Data\n
        `anom_chart`: Display Quantile Anomaly Detection\n
        `atr`: Calculate the Average True Range of a variable based on a a specific stock ticker.\n
        `autoarima`: Performs Automatic ARIMA forecasting\n
        `autoarima_chart`: Display Automatic ARIMA model.\n
        `autoces`: Performs Automatic Complex Exponential Smoothing forecasting\n
        `autoces_chart`: Display Automatic Complex Exponential Smoothing Model\n
        `autoets`: Performs Automatic ETS forecasting\n
        `autoets_chart`: Display Automatic ETS (Error, Trend, Sesonality) Model\n
        `autoselect`: Performs Automatic Statistical forecasting\n
        `autoselect_chart`: Display Automatic Statistical Forecasting Model\n
        `brnn`: Performs Block RNN forecasting\n
        `brnn_chart`: Display BRNN forecast\n
        `clean`: Clean up NaNs from the dataset\n
        `combine`: Adds the given column of df2 to df1\n
        `corr`: Returns correlation for a given df\n
        `corr_chart`: Plot correlation coefficients for dataset features\n
        `delete`: Delete a column from a dataframe\n
        `delta`: Calculate the %change of a variable based on a specific column\n
        `desc`: Returns statistics for a given df\n
        `desc_chart`: Show descriptive statistics for a dataframe\n
        `ema`: A moving average provides an indication of the trend of the price movement\n
        `expo`: Performs Probabilistic Exponential Smoothing forecasting\n
        `expo_chart`: Display Probabilistic Exponential Smoothing forecast\n
        `export`: Export a dataframe to a file\n
        `linregr`: Perform Linear Regression Forecasting\n
        `linregr_chart`: Display Linear Regression Forecasting\n
        `load`: Load custom file into dataframe.\n
        `mom`: A momentum oscillator, which measures the percentage change between the current\n
        `mstl`: Performs MSTL forecasting\n
        `mstl_chart`: Display MSTL Model\n
        `nbeats`: Perform NBEATS Forecasting\n
        `nbeats_chart`: Display NBEATS forecast\n
        `nhits`: Performs Nhits forecasting\n
        `nhits_chart`: Display Nhits forecast\n
        `plot`: Plot data from a dataset\n
        `plot_chart`: Plot data from a dataset\n
        `regr`: Perform Regression Forecasting\n
        `regr_chart`: Display Regression Forecasting\n
        `rename`: Rename a column in a dataframe\n
        `rnn`: Perform RNN forecasting\n
        `rnn_chart`: Display RNN forecast\n
        `roc`: A momentum oscillator, which measures the percentage change between the current\n
        `rsi`: A momentum indicator that measures the magnitude of recent price changes to evaluate\n
        `rwd`: Performs Random Walk with Drift forecasting\n
        `rwd_chart`: Display Random Walk with Drift Model\n
        `season_chart`: Plot seasonality from a dataset\n
        `seasonalnaive`: Performs Seasonal Naive forecasting\n
        `seasonalnaive_chart`: Display SeasonalNaive Model\n
        `show`: Show a dataframe in a table\n
        `signal`: A price signal based on short/long term price.\n
        `sto`: Stochastic Oscillator %K and %D : A stochastic oscillator is a momentum indicator comparing a particular closing\n
        `tcn`: Perform TCN forecasting\n
        `tcn_chart`: Display TCN forecast\n
        `tft`: Performs Temporal Fusion Transformer forecasting\n
        `tft_chart`: Display Temporal Fusion Transformer forecast\n
        `theta`: Performs Theta forecasting\n
        `theta_chart`: Display Theta forecast\n
        `trans`: Performs Transformer forecasting\n
        `trans_chart`: Display Transformer forecast\n
    """
    _location_path = ...
    def __init__(self) -> None:
        ...
    


