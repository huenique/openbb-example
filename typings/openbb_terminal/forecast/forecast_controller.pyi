"""
This type stub file was generated by pyright.
"""

import argparse
import pandas as pd
import darts
from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Forecast Controller Module"""
__docformat__ = ...
darts_latest = ...
if darts.__version__ != darts_latest:
    ...
transformers_ver = ...
WHISPER_AVAILABLE = ...
logger = ...
empty_df = ...
def check_greater_than_one(value) -> int:
    """Argparse type to check positive int above 1"""
    ...

class ForecastController(BaseController):
    """Forecast class"""
    CHOICES_COMMANDS: List[str] = ...
    pandas_plot_choices = ...
    disclaimer = ...
    PATH = ...
    CHOICES_GENERATION = ...
    loaded_dataset_cols = ...
    list_dataset_cols: list = ...
    def __init__(self, ticker: str = ..., data: pd.DataFrame = ..., queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def call_exit(self, _) -> None:
        """Process exit terminal command from forecast menu."""
        ...
    
    def get_dataset_columns(self): # -> dict[str, dict[Any | Unknown | str, None]]:
        ...
    
    def parse_input(self, an_input: str) -> List:
        """Parse controller input

        Overrides the parent class function to handle YouTube video URL conventions.
        See `BaseController.parse_input()` for details.
        """
        ...
    
    def update_runtime_choices(self): # -> None:
        ...
    
    def refresh_datasets_on_menu(self): # -> None:
        """Refresh datasets on menu with new columns when adding new features"""
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    def custom_reset(self): # -> list[str] | list[Unknown]:
        """Class specific component of reset command"""
        ...
    
    def add_standard_args(self, parser: argparse.ArgumentParser, target_dataset: bool = ..., target_column: bool = ..., period: Optional[int] = ..., n_days: bool = ..., seasonal: Optional[str] = ..., periods: bool = ..., window: bool = ..., train_split: bool = ..., input_chunk_length: bool = ..., output_chunk_length: bool = ..., force_reset: bool = ..., save_checkpoints: bool = ..., model_save_name: Optional[str] = ..., n_epochs: bool = ..., model_type: bool = ..., dropout: Optional[float] = ..., batch_size: Optional[int] = ..., learning_rate: bool = ..., past_covariates: bool = ..., all_past_covariates: bool = ..., lags: bool = ..., hidden_size: int = ..., n_jumps: bool = ..., end: bool = ..., start: bool = ..., residuals: bool = ..., forecast_only: bool = ..., naive: bool = ..., explainability_raw: bool = ..., export_pred_raw: bool = ..., metric: bool = ...): # -> ArgumentParser:
        ...
    
    def load(self, ticker: str, data: pd.DataFrame): # -> None:
        """Loads news dataframes into memory"""
        ...
    
    @log_start_end(log=logger)
    def call_load(self, other_args: List[str]): # -> None:
        """Process load"""
        ...
    
    @log_start_end(log=logger)
    def call_which(self, other_args: List[str]): # -> None:
        """Process which command"""
        ...
    
    @log_start_end(log=logger)
    def call_show(self, other_args: List[str]): # -> None:
        """Process show command"""
        ...
    
    @log_start_end(log=logger)
    def call_rename(self, other_args: List[str]): # -> None:
        """Process rename"""
        ...
    
    @log_start_end(log=logger)
    def call_setndays(self, other_args: List[str]): # -> None:
        """Process setndays command"""
        ...
    
    @log_start_end(log=logger)
    def call_desc(self, other_args: List[str]): # -> None:
        """Process descriptive stats command"""
        ...
    
    @log_start_end(log=logger)
    def call_plot(self, other_args: List[str]): # -> None:
        """Process plot command"""
        ...
    
    @log_start_end(log=logger)
    def call_season(self, other_args: List[str]): # -> None:
        """Process season command"""
        ...
    
    @log_start_end(log=logger)
    def call_corr(self, other_args: List[str]): # -> None:
        """Process correlation command"""
        ...
    
    @log_start_end(log=logger)
    def call_combine(self, other_args: List[str]): # -> None:
        """Process combine"""
        ...
    
    @log_start_end(log=logger)
    def call_clean(self, other_args: List[str]): # -> None:
        """Process clean"""
        ...
    
    @log_start_end(log=logger)
    def call_ema(self, other_args: List[str]): # -> None:
        """Process EMA"""
        ...
    
    @log_start_end(log=logger)
    def call_sto(self, other_args: List[str]): # -> None:
        """Process Stochastic Oscillator"""
        ...
    
    def handle_delete(self, dataset, column): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_delete(self, other_args: List[str]): # -> None:
        """Process delete"""
        ...
    
    @log_start_end(log=logger)
    def call_rsi(self, other_args: List[str]): # -> None:
        """Process RSI"""
        ...
    
    @log_start_end(log=logger)
    def call_roc(self, other_args: List[str]): # -> None:
        """Process ROC"""
        ...
    
    @log_start_end(log=logger)
    def call_mom(self, other_args: List[str]): # -> None:
        """Process Momentum"""
        ...
    
    @log_start_end(log=logger)
    def call_delta(self, other_args: List[str]): # -> None:
        """Process %Change (Delta)"""
        ...
    
    @log_start_end(log=logger)
    def call_atr(self, other_args: List[str]): # -> None:
        """Process Average True Range"""
        ...
    
    @log_start_end(log=logger)
    def call_signal(self, other_args: List[str]): # -> None:
        """Process Price Signal"""
        ...
    
    @log_start_end(log=logger)
    def call_export(self, other_args: List[str]): # -> None:
        """Process export command"""
        ...
    
    @log_start_end(log=logger)
    def call_autoselect(self, other_args: List[str]): # -> None:
        """Process autoselect command"""
        ...
    
    @log_start_end(log=logger)
    def call_autoarima(self, other_args: List[str]): # -> None:
        """Process autoarima command"""
        ...
    
    @log_start_end(log=logger)
    def call_autoces(self, other_args: List[str]): # -> None:
        """Process autoces command"""
        ...
    
    @log_start_end(log=logger)
    def call_autoets(self, other_args: List[str]): # -> None:
        """Process autoets command"""
        ...
    
    @log_start_end(log=logger)
    def call_mstl(self, other_args: List[str]): # -> None:
        """Process mstl command"""
        ...
    
    @log_start_end(log=logger)
    def call_rwd(self, other_args: List[str]): # -> None:
        """Process rwd command"""
        ...
    
    @log_start_end(log=logger)
    def call_seasonalnaive(self, other_args: List[str]): # -> None:
        """Process seasonalnaive command"""
        ...
    
    @log_start_end(log=logger)
    def call_expo(self, other_args: List[str]): # -> None:
        """Process expo command"""
        ...
    
    @log_start_end(log=logger)
    def call_theta(self, other_args: List[str]): # -> None:
        """Process theta command"""
        ...
    
    @log_start_end(log=logger)
    def call_rnn(self, other_args: List[str]): # -> None:
        """Process RNN command"""
        ...
    
    @log_start_end(log=logger)
    def call_nbeats(self, other_args: List[str]): # -> None:
        """Process NBEATS command"""
        ...
    
    @log_start_end(log=logger)
    def call_tcn(self, other_args: List[str]): # -> None:
        """Process TCN command"""
        ...
    
    @log_start_end(log=logger)
    def call_regr(self, other_args: List[str]): # -> None:
        """Process REGR command"""
        ...
    
    @log_start_end(log=logger)
    def call_linregr(self, other_args: List[str]): # -> None:
        """Process LINREGR command"""
        ...
    
    @log_start_end(log=logger)
    def call_brnn(self, other_args: List[str]): # -> None:
        """Process BRNN command"""
        ...
    
    @log_start_end(log=logger)
    def call_trans(self, other_args: List[str]): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_tft(self, other_args: List[str]): # -> None:
        """Process TFT command"""
        ...
    
    @log_start_end(log=logger)
    def call_nhits(self, other_args: List[str]): # -> None:
        """Process nhits command"""
        ...
    
    @log_start_end(log=logger)
    def call_anom(self, other_args: List[str]): # -> None:
        """Process ANOM command"""
        ...
    
    @log_start_end(log=logger)
    def call_whisper(self, other_args: List[str]): # -> None:
        """Utilize Whisper Model to transcribe a video. Currently only supports Youtube URLS"""
        ...
    


