"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Dict, List, Optional, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.decorators import log_start_end

"""Forecast View"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def show_options(datasets: Dict[str, pd.DataFrame], dataset_name: Optional[str] = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Plot custom data

    Parameters
    ----------
    datasets: dict
        The loaded in datasets
    dataset_name: str
        The name of the dataset you wish to show options for
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export image
    """
    ...

@log_start_end(log=logger)
def display_plot(data: pd.DataFrame, columns: List[str], export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plot data from a dataset
    Parameters
    ----------
    data: pd.DataFrame
        The dataframe to plot
    columns: List[str]
        The columns to show
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export image
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_seasonality(data: pd.DataFrame, column: str = ..., export: str = ..., sheet_name: Optional[str] = ..., m: Optional[int] = ..., max_lag: int = ..., alpha: float = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plot seasonality from a dataset

    Parameters
    ----------
    data: pd.DataFrame
        The dataframe to plot
    column: str
        The column of the dataframe to analyze
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export image
    m: Optional[int]
        Optionally, a time lag to highlight on the plot. Default is none.
    max_lag: int
        The maximal lag order to consider. Default is 24.
    alpha: float
        The confidence interval to display. Default is 0.05.
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_corr(dataset: pd.DataFrame, export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plot correlation coefficients for dataset features

    Parameters
    ----------
    dataset : pd.DataFrame
        The dataset fore calculating correlation coefficients
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export image
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def show_df(data: pd.DataFrame, limit: int = ..., limit_col: int = ..., name: str = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Show a dataframe in a table

    Parameters
    ----------
    data: pd.DataFrame
        The dataframe to show
    limit: int
        The number of rows to show
    limit_col: int
        The number of columns to show
    name: str
        The name of the dataframe
    export: str
        Format to export data
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    """
    ...

@log_start_end(log=logger)
def describe_df(data: pd.DataFrame, name: str = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Show descriptive statistics for a dataframe

    Parameters
    ----------
    data: pd.DataFrame
        The dataframe to show
    name: str
        The name of the dataframe
    export: str
        Format to export data
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    """
    ...

@log_start_end(log=logger)
def export_df(data: pd.DataFrame, export: str, name: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Export a dataframe to a file

    Parameters
    ----------
    data: pd.DataFrame
        The dataframe to export
    export: str
        The format to export the dataframe to
    name: str
        The name of the dataframe
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    """
    ...

