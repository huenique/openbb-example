"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import List, Optional, Tuple, Union
from darts import TimeSeries
from darts.models import RNNModel
from openbb_terminal.decorators import log_start_end

"""RNN Model"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def get_rnn_data(data: Union[pd.Series, pd.DataFrame], target_column: str = ..., n_predict: int = ..., train_split: float = ..., forecast_horizon: int = ..., model_type: str = ..., hidden_dim: int = ..., dropout: float = ..., batch_size: int = ..., n_epochs: int = ..., learning_rate: float = ..., model_save_name: str = ..., training_length: int = ..., input_chunk_size: int = ..., force_reset: bool = ..., save_checkpoints: bool = ..., metric: str = ...) -> Tuple[Optional[List[type[TimeSeries]]], Optional[List[type[TimeSeries]]], Optional[List[type[TimeSeries]]], Optional[float], Optional[type[RNNModel]],]:
    """Perform RNN forecasting

    Parameters
    ----------
    data: Union[pd.Series, pd.DataFrame]
        Input Data
    n_predict: int
        Days to predict. Defaults to 5.
    target_column: str
        Target column to forecast. Defaults to "close".
    train_split: float
        Train/val split. Defaults to 0.85.
    forecast_horizon: int
        Forecast horizon when performing historical forecasting. Defaults to 5.
    model_type: str
        Either a string specifying the RNN module type ("RNN", "LSTM" or "GRU"). Defaults to "LSTM".
    hidden_dim: int
        Size for feature maps for each hidden RNN layer.. Defaults to 20.
    dropout: float
        Fraction of neurons affected by Dropout. Defaults to 0.0.
    batch_size: int
        Number of time series (input and output sequences) used in each training pass. Defaults to 32.
    n_epochs: int
        Number of epochs over which to train the model. Defaults to 100.
    learning_rate: float
        Defaults to 1e-3.
    model_save_name: str
        Name for model. Defaults to "brnn_model".
    force_reset: bool
        If set to True, any previously-existing model with the same name will be reset
        (all checkpoints will be discarded). Defaults to True.
    save_checkpoints: bool
        Whether or not to automatically save the untrained model and checkpoints from training.
        Defaults to True.
    metric: str
        Metric to use for model selection. Defaults to "mape".

    Returns
    -------
    Tuple[List[TimeSeries], List[TimeSeries], List[TimeSeries], Optional[float], type[RNNModel]]
        Adjusted Data series,
        Historical forecast by best RNN model,
        list of Predictions,
        Mean average precision error,
        Best RNN Model
    """
    ...

