"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import List, Optional, Tuple, Union
from darts import TimeSeries
from darts.models import Theta
from openbb_terminal.decorators import log_start_end

"""Theta Model"""
__docformat__ = ...
SEASONS = ...
PERIODS = ...
logger = ...
@log_start_end(log=logger)
def get_theta_data(data: Union[pd.Series, pd.DataFrame], target_column: str = ..., seasonal: str = ..., seasonal_periods: int = ..., n_predict: int = ..., start_window: float = ..., forecast_horizon: int = ..., metric: str = ...) -> Tuple[Optional[List[TimeSeries]], Optional[List[TimeSeries]], Optional[List[TimeSeries]], Optional[float], Optional[float], Optional[type[Theta]],]:
    """Performs Theta forecasting
    An implementation of the 4Theta method with configurable theta parameter.

    https://unit8co.github.io/darts/generated_api/darts.models.forecasting.theta.html

    Parameters
    ----------
    data : Union[pd.Series, np.ndarray]
        Input data.
    target_column: Optional[str]:
        Target column to forecast. Defaults to "close".
    seasonal: str
        Seasonal component.  One of [N, A, M]
        Defaults to MULTIPLICATIVE.
    seasonal_periods: int
        Number of seasonal periods in a year
        If not set, inferred from frequency of the series.
    n_predict: int
        Number of days to forecast
    start_window: float
        Size of sliding window from start of timeseries and onwards
    forecast_horizon: int
        Number of days to forecast when backtesting and retraining historical data
    metric: str
        Metric to use when backtesting and retraining historical data. Defaults to "mape".

    Returns
    -------
    Tuple[List[TimeSeries], List[TimeSeries], List[TimeSeries], float, float, type[Theta]]
        Adjusted Data series,
        Historical forecast by best theta,
        list of Predictions,
        Mean average precision error,
        Best Theta,
        Theta Model.
    """
    ...

