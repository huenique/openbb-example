"""
This type stub file was generated by pyright.
"""

import re
from pathlib import Path
from typing import Dict, List, Optional
from openbb_terminal.parent_classes import BaseController
from openbb_terminal.terminal_helper import is_auth_enabled, is_installer

"""Main Terminal Module."""
__docformat__ = ...
logger = ...
env_file = ...
if is_installer():
    ...
class TerminalController(BaseController):
    """Terminal Controller class."""
    CHOICES_COMMANDS = ...
    CHOICES_MENUS = ...
    if is_auth_enabled():
        ...
    PATH = ...
    GUESS_TOTAL_TRIES = ...
    GUESS_NUMBER_TRIES_LEFT = ...
    GUESS_SUM_SCORE = ...
    GUESS_CORRECTLY = ...
    CHOICES_GENERATION = ...
    def __init__(self, jobs_cmds: Optional[List[str]] = ...) -> None:
        """Construct terminal controller."""
        ...
    
    def update_runtime_choices(self): # -> None:
        """Update runtime choices."""
        ...
    
    def print_help(self): # -> None:
        """Print help."""
        ...
    
    def call_news(self, other_args: List[str]) -> None:
        """Process news command."""
        ...
    
    def parse_input(self, an_input: str) -> List:
        """Overwrite the BaseController parse_input for `askobb` and 'exe'

        This will allow us to search for something like "P/E" ratio
        """
        ...
    
    def call_guess(self, other_args: List[str]) -> None:
        """Process guess command."""
        ...
    
    @staticmethod
    def call_survey(_) -> None:
        """Process survey command."""
        ...
    
    def call_update(self, _): # -> None:
        """Process update command."""
        ...
    
    def call_account(self, _): # -> None:
        """Process account command."""
        ...
    
    def call_keys(self, _): # -> None:
        """Process keys command."""
        ...
    
    def call_settings(self, _): # -> None:
        """Process settings command."""
        ...
    
    def call_featflags(self, _): # -> None:
        """Process feature flags command."""
        ...
    
    def call_stocks(self, _): # -> None:
        """Process stocks command."""
        ...
    
    def call_crypto(self, _): # -> None:
        """Process crypto command."""
        ...
    
    def call_economy(self, _): # -> None:
        """Process economy command."""
        ...
    
    def call_etf(self, _): # -> None:
        """Process etf command."""
        ...
    
    def call_forex(self, _): # -> None:
        """Process forex command."""
        ...
    
    def call_reports(self, _): # -> None:
        """Process reports command."""
        ...
    
    def call_dashboards(self, _): # -> None:
        """Process dashboards command."""
        ...
    
    def call_alternative(self, _): # -> None:
        """Process alternative command."""
        ...
    
    def call_econometrics(self, _): # -> None:
        """Process econometrics command."""
        ...
    
    def call_forecast(self, _): # -> None:
        """Process forecast command."""
        ...
    
    def call_portfolio(self, _): # -> None:
        """Process portfolio command."""
        ...
    
    def call_sources(self, _): # -> None:
        """Process sources command."""
        ...
    
    def call_futures(self, _): # -> None:
        """Process futures command."""
        ...
    
    def call_fixedincome(self, _): # -> None:
        """Process fixedincome command."""
        ...
    
    def call_funds(self, _): # -> None:
        """Process etf command"""
        ...
    
    def call_intro(self, _): # -> None:
        """Process intro command."""
        ...
    
    def call_exe(self, other_args: List[str]): # -> None:
        """Process exe command."""
        ...
    


def terminal(jobs_cmds: Optional[List[str]] = ..., test_mode=...): # -> None:
    """Terminal Menu."""
    ...

def insert_start_slash(cmds: List[str]) -> List[str]:
    """Insert a slash at the beginning of a command sequence."""
    ...

def run_scripts(path: Path, test_mode: bool = ..., verbose: bool = ..., routines_args: Optional[List[str]] = ..., special_arguments: Optional[Dict[str, str]] = ..., output: bool = ...): # -> None:
    """Run given .openbb scripts.

    Parameters
    ----------
    path : str
        The location of the .openbb file
    test_mode : bool
        Whether the terminal is in test mode
    verbose : bool
        Whether to run tests in verbose mode
    routines_args : List[str]
        One or multiple inputs to be replaced in the routine and separated by commas.
        E.g. GME,AMC,BTC-USD
    special_arguments: Optional[Dict[str, str]]
        Replace `${key=default}` with `value` for every key in the dictionary
    output: bool
        Whether to log tests to txt files
    """
    ...

def replace_dynamic(match: re.Match, special_arguments: Dict[str, str]) -> str:
    """Replaces ${key=default} with value in special_arguments if it exists, else with default.

    Parameters
    ----------
    match: re.Match[str]
        The match object
    special_arguments: Dict[str, str]
        The key value pairs to replace in the scripts

    Returns
    ----------
    str
        The new string
    """
    ...

def run_routine(file: str, routines_args=...): # -> None:
    """Execute command routine from .openbb file."""
    ...

def main(debug: bool, dev: bool, path_list: List[str], routines_args: Optional[List[str]] = ..., **kwargs): # -> None:
    """Run the terminal with various options.

    Parameters
    ----------
    debug : bool
        Whether to run the terminal in debug mode
    dev:
        Points backend towards development environment instead of production
    test : bool
        Whether to run the terminal in integrated test mode
    filtert : str
        Filter test files with given string in name
    paths : List[str]
        The paths to run for scripts or to test
    verbose : bool
        Whether to show output from tests
    routines_args : List[str]
        One or multiple inputs to be replaced in the routine and separated by commas.
        E.g. GME,AMC,BTC-USD
    """
    ...

def parse_args_and_run(): # -> None:
    """Parse input arguments and run terminal."""
    ...

if __name__ == "__main__":
    ...
