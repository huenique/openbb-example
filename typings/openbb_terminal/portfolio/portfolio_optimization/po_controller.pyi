"""
This type stub file was generated by pyright.
"""

from typing import Dict, List, Optional, Tuple
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

""" Portfolio Optimization Controller Module """
__docformat__ = ...
logger = ...
def add_arguments(parser_update, parser, not_in_list): # -> None:
    ...

def check_input(input_type: str, input_list: List[str], available_list: List[str]) -> List[str]:
    """Check if input is valid

    Parameters
    ----------
    input_type : str
        Type of input
    input_list : List[str]
        List of input
    available_list : List[str]
        List of available input

    Returns
    -------
    List[str]
        Valid categories
    """
    ...

def get_valid_portfolio_categories(input_portfolios: List[str], available_portfolios: Dict, input_categories: List[str], available_categories: Dict) -> Tuple[List[str], List[str]]:
    """Get valid portfolios and categories

    Parameters
    ----------
    input_portfolios : List[str]
        List of input portfolios
    available_portfolios : Dict
        Dict of available portfolios
    input_categories : List[str]
        List of input categories
    available_categories : Dict
        Dict of available categories

    Returns
    -------
    Tuple[List[str], List[str]]
        Valid portfolios and categories
    """
    ...

class PortfolioOptimizationController(BaseController):
    """Portfolio Optimization Controller class"""
    FILE_TYPE_LIST = ...
    CHOICES_COMMANDS = ...
    CHOICES_MENUS = ...
    PATH = ...
    CHOICES_GENERATION = ...
    files_available: List = ...
    @classmethod
    def build_allocation_file_map(cls) -> dict:
        ...
    
    @classmethod
    def build_optimization_file_map(cls) -> dict:
        ...
    
    def __init__(self, tickers: Optional[List[str]] = ..., portfolios: Optional[Dict] = ..., categories: Optional[Dict] = ..., queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def update_runtime_choices(self): # -> None:
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    def po_parser(self, parser, rm: bool = ..., mt: bool = ..., ct: bool = ..., p: bool = ..., s: bool = ..., e: bool = ..., lr: bool = ..., freq: bool = ..., mn: bool = ..., th: bool = ..., r: bool = ..., a: bool = ..., v: bool = ..., name: str = ...):
        """Holds common parser arguments to eliminate repetition"""
        ...
    
    def custom_reset(self): # -> list[str]:
        """Class specific component of reset command"""
        ...
    
    @log_start_end(log=logger)
    def call_file(self, other_args: List[str]): # -> None:
        """Process file command"""
        ...
    
    @log_start_end(log=logger)
    def call_params(self, _): # -> None:
        """Process params command"""
        ...
    
    @log_start_end(log=logger)
    def call_show(self, other_args: List[str]): # -> None:
        """Show saved portfolios"""
        ...
    
    @log_start_end(log=logger)
    def call_rpf(self, other_args: List[str]): # -> None:
        """Remove one portfolio"""
        ...
    
    @log_start_end(log=logger)
    def call_load(self, other_args: List[str]): # -> None:
        """Load file with stocks tickers and categories"""
        ...
    
    @log_start_end(log=logger)
    def call_plot(self, other_args: List[str]): # -> None:
        """Process plot command"""
        ...
    
    @log_start_end(log=logger)
    def call_equal(self, other_args: List[str]): # -> None:
        """Process equal command"""
        ...
    
    @log_start_end(log=logger)
    def call_mktcap(self, other_args: List[str]): # -> None:
        """Process mktcap command"""
        ...
    
    @log_start_end(log=logger)
    def call_maxsharpe(self, other_args: List[str]): # -> None:
        """Process maxsharpe command"""
        ...
    
    @log_start_end(log=logger)
    def call_minrisk(self, other_args: List[str]): # -> None:
        """Process minrisk command"""
        ...
    
    @log_start_end(log=logger)
    def call_maxutil(self, other_args: List[str]): # -> None:
        """Process maxutil command"""
        ...
    
    @log_start_end(log=logger)
    def call_maxret(self, other_args: List[str]): # -> None:
        """Process maxret command"""
        ...
    
    @log_start_end(log=logger)
    def call_maxdiv(self, other_args: List[str]): # -> None:
        """Process maxdiv command"""
        ...
    
    @log_start_end(log=logger)
    def call_maxdecorr(self, other_args: List[str]): # -> None:
        """Process maxdecorr command"""
        ...
    
    @log_start_end(log=logger)
    def call_blacklitterman(self, other_args: List[str]): # -> None:
        """Process blacklitterman command"""
        ...
    
    @log_start_end(log=logger)
    def call_ef(self, other_args): # -> None:
        """Process ef command"""
        ...
    
    @log_start_end(log=logger)
    def call_riskparity(self, other_args: List[str]): # -> None:
        """Process riskparity command"""
        ...
    
    @log_start_end(log=logger)
    def call_relriskparity(self, other_args: List[str]): # -> None:
        """Process relriskparity command"""
        ...
    
    @log_start_end(log=logger)
    def call_hrp(self, other_args: List[str]): # -> None:
        """Process hierarchical risk parity command"""
        ...
    
    @log_start_end(log=logger)
    def call_herc(self, other_args: List[str]): # -> None:
        """Process hierarchical equal risk contribution command"""
        ...
    
    @log_start_end(log=logger)
    def call_nco(self, other_args: List[str]): # -> None:
        """Process nested clustered optimization command"""
        ...
    


