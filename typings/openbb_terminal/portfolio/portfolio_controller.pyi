"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import log_start_end
from openbb_terminal.parent_classes import BaseController

"""Portfolio Controller"""
__docformat__ = ...
OPTIMIZATION_TOOLKIT_ENABLED = ...
logger = ...
class PortfolioController(BaseController):
    """Portfolio Controller class"""
    CHOICES_COMMANDS = ...
    CHOICES_MENUS = ...
    VALID_DISTRIBUTIONS = ...
    AGGREGATION_METRICS = ...
    VALID_METRICS = ...
    PERIODS = ...
    PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def update_choices(self): # -> None:
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    def custom_reset(self): # -> list[str]:
        """Class specific component of reset command"""
        ...
    
    @log_start_end(log=logger)
    def call_bro(self, _): # -> None:
        """Process bro command"""
        ...
    
    @log_start_end(log=logger)
    def call_po(self, _): # -> None:
        """Process po command"""
        ...
    
    @log_start_end(log=logger)
    def call_load(self, other_args: List[str]): # -> None:
        """Process load command"""
        ...
    
    @log_start_end(log=logger)
    def call_show(self, other_args: List[str]): # -> None:
        """Process show command"""
        ...
    
    @log_start_end(log=logger)
    def call_bench(self, other_args: List[str]): # -> None:
        """Process bench command"""
        ...
    
    @log_start_end(log=logger)
    def call_alloc(self, other_args: List[str]): # -> None:
        """Process alloc command"""
        ...
    
    @log_start_end(log=logger)
    def call_attrib(self, other_args: List[str]): # -> None:
        """Process attrib command"""
        ...
    
    @log_start_end(log=logger)
    def call_perf(self, other_args: List[str]): # -> None:
        """Process performance command"""
        ...
    
    @log_start_end(log=logger)
    def call_holdv(self, other_args: List[str]): # -> None:
        """Process holdv command"""
        ...
    
    @log_start_end(log=logger)
    def call_holdp(self, other_args: List[str]): # -> None:
        """Process holdp command"""
        ...
    
    @log_start_end(log=logger)
    def call_var(self, other_args: List[str]): # -> None:
        """Process var command"""
        ...
    
    @log_start_end(log=logger)
    def call_es(self, other_args: List[str]): # -> None:
        """Process es command"""
        ...
    
    @log_start_end(log=logger)
    def call_om(self, other_args: List[str]): # -> None:
        """Process om command"""
        ...
    
    @log_start_end(log=logger)
    def call_yret(self, other_args: List[str]): # -> None:
        """Process yret command"""
        ...
    
    @log_start_end(log=logger)
    def call_mret(self, other_args: List[str]): # -> None:
        """Process mret command"""
        ...
    
    @log_start_end(log=logger)
    def call_dret(self, other_args: List[str]): # -> None:
        """Process dret command"""
        ...
    
    @log_start_end(log=logger)
    def call_maxdd(self, other_args: List[str]): # -> None:
        """Process maxdd command"""
        ...
    
    @log_start_end(log=logger)
    def call_rvol(self, other_args: List[str]): # -> None:
        """Process rolling volatility command"""
        ...
    
    @log_start_end(log=logger)
    def call_rsharpe(self, other_args: List[str]): # -> None:
        """Process rolling sharpe command"""
        ...
    
    @log_start_end(log=logger)
    def call_rsort(self, other_args: List[str]): # -> None:
        """Process rolling sortino command"""
        ...
    
    @log_start_end(log=logger)
    def call_rbeta(self, other_args: List[str]): # -> None:
        """Process rolling beta command"""
        ...
    
    @log_start_end(log=logger)
    def call_metric(self, other_args: List[str]): # -> None:
        """Process metric command"""
        ...
    
    @log_start_end(log=logger)
    def call_distr(self, other_args: List[str]): # -> None:
        """Process distr command"""
        ...
    
    @log_start_end(log=logger)
    def call_summary(self, other_args: List[str]): # -> None:
        """Process summary command"""
        ...
    


def check_portfolio_benchmark_defined(portfolio_name: str, benchmark_name: str) -> bool:
    """Check that portfolio and benchmark have been defined

    Parameters
    ----------
    portfolio_name: str
        Portfolio name, will be empty if not defined
    benchmark_name: str
        Benchmark name, will be empty if not defined

    Returns
    -------
    bool
        If both portfolio and benchmark have been defined
    """
    ...

