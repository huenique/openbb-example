"""
This type stub file was generated by pyright.
"""

import pandas as pd
from openbb_terminal.decorators import log_start_end

"""Portfolio Engine"""
__docformat__ = ...
logger = ...
class PortfolioEngine:
    """Class for portfolio analysis in OpenBB

    Implements a Portfolio and related methods.

    Attributes
    ----------
    # General
    empty: bool
        True if no transactions have been loaded
    risk_free_rate: float
        Risk free rate
    inception_date: datetime.date
        Inception date of the portfolio
    tickers_list: list
        List of tickers in the portfolio
    tickers: Dict[Any, Any]
        Dictionary of ticker type (e.g. ETF, STOCK, CRYPTO) as keys and ticker
        list as values
    benchmark_ticker: str
        Benchmark ticker
    benchmark_info: Any
        Benchmark info
    historical_trade_data: pd.DataFrame
        DataFrame with state of the portfolio at each day since inception, including
        trade quantity, invested amount, return, etc.

    # Portfolio
    portfolio_historical_prices: pd.DataFrame
        DataFrame with historical prices of the ticker in the portfolio
    portfolio_returns: pd.DataFrame
        DataFrame with portfolio returns, i.e. the total daily return of the portfolio
    portfolio_trades: pd.DataFrame
        DataFrame with portfolio trades and respective performance
    portfolio_assets_allocation: pd.DataFrame
        DataFrame with portfolio assets allocation
    portfolio_sectors_allocation: pd.DataFrame
        DataFrame with portfolio sectors allocation
    portfolio_regions_allocation: pd.DataFrame
        DataFrame with portfolio regions allocation
    portfolio_countries_allocation: pd.DataFrame
        DataFrame with portfolio countries allocation

    # Benchmark
    benchmark_historical_prices: pd.DataFrame
        DataFrame with historical prices of the benchmark ticker
    benchmark_returns: pd.DataFrame
        DataFrame with benchmark returns, i.e. the total daily return of the benchmark
    benchmark_trades: pd.DataFrame
        DataFrame with benchmark trades and respective performance
    benchmark_assets_allocation: pd.DataFrame
        DataFrame with benchmark assets allocation
    benchmark_sectors_allocation: pd.DataFrame
        DataFrame with benchmark sectors allocation
    benchmark_regions_allocation: pd.DataFrame
        DataFrame with benchmark regions allocation
    benchmark_countries_allocation: pd.DataFrame
        DataFrame with benchmark countries allocation

    Methods
    -------
    read_transactions: Static method to read transactions from file
    __set_transactions:
        __preprocess_transactions: Method to preprocess, format and compute auxiliary fields
            __load_company_data: Load company data for stocks such as sector, industry and country
    get_transactions: Outputs the formatted transactions DataFrame
    set_benchmark: Adds benchmark ticker, info, prices and returns
        __mimic_trades_for_benchmark: Mimic trades from the transactions based on chosen benchmark assuming partial shares
    generate_portfolio_data: Generates portfolio data from transactions
        __load_portfolio_historical_prices: Loads historical adj close prices for tickers in list of trades
        __populate_historical_trade_data: Create a new dataframe to store historical prices by ticker
        __calculate_portfolio_returns: Calculate portfolio daily returns
        __calculate_portfolio_performance: Calculate portfolio trades performance
    set_risk_free_rate: Sets risk free rate
    calculate_reserves: Takes dividends into account for returns calculation
    calculate_allocation: Determine allocation based on assets, sectors, countries and regions.
    """
    def __init__(self, transactions: pd.DataFrame = ...) -> None:
        """Initialize PortfolioEngine class"""
        ...
    
    def get_transactions(self):
        """Get formatted transactions

        Returns
        -------
        pd.DataFrame
            Formatted transactions
        """
        ...
    
    @staticmethod
    def read_transactions(path: str) -> pd.DataFrame:
        """Read static method to read transactions from file.

        Parameters
        ----------
        path: str
            path to transactions file

        Returns
        -------
        pd.DataFrame
            DataFrame with transactions
        """
        ...
    
    @log_start_end(log=logger)
    def set_benchmark(self, symbol: str = ..., full_shares: bool = ...) -> bool:
        """Load benchmark into portfolio.

        Parameters
        ----------
        symbol: str
            Benchmark symbol to download data
        full_shares: bool
            Whether to mimic the portfolio trades exactly (partial shares) or round down the
            quantity to the nearest number

        Returns
        -------
        bool
            True if successful, False otherwise
        """
        ...
    
    @log_start_end(log=logger)
    def generate_portfolio_data(self): # -> None:
        """Generate portfolio data from transactions

        Workflow:
            1. Load historical adj close/close prices for tickers in list of trades
            2. Record the state of the portfolio at each day since inception.
            3. Calculate portfolio daily returns from historical trade data
            4. Calculate portfolio trades performance

        """
        ...
    
    @log_start_end(log=logger)
    def set_risk_free_rate(self, risk_free_rate: float): # -> None:
        """Set risk free rate

        Parameters
        ----------
        risk_free_rate : float
            Risk free rate in float format
        """
        ...
    
    @log_start_end(log=logger)
    def calculate_reserves(self): # -> None:
        """Take dividends into account for returns calculation"""
        ...
    
    @log_start_end(log=logger)
    def calculate_allocation(self, category: str, recalculate: bool = ...): # -> None:
        """Determine allocation based on Asset, Sector, Country or Region

        Parameters
        ----------
        category: str
            Chosen allocation category from Asset, Sector, Country or Region
        recalculate: bool
            Flag to force recalculate allocation if already exists
        """
        ...
    


