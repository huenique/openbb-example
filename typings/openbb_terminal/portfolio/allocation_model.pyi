"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Tuple
from openbb_terminal.decorators import log_start_end

"""Allocation Model"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def get_allocation(category: str, benchmark_ticker: str, portfolio_trades: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Get category allocation for benchmark and portfolio

    Parameters
    ----------
    category: str
        Chosen category: Asset, Sector, Country or Region
    benchmark_ticker: str
        The ticker of the benchmark
    portfolio_trades: pd.DataFrame
        Object containing trades made within the portfolio

    Returns
    -------
    pd.DataFrame
        DataFrame with the top 10 of the benchmark's asset allocations
    pd.DataFrame
        DataFrame with the portfolio's asset allocations
    """
    ...

@log_start_end(log=logger)
def get_assets_allocation(benchmark_ticker: str, portfolio_trades: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Get assets allocation for benchmark and portfolio [Source: Yahoo Finance]

    Parameters
    ----------
    benchmark_ticker: str
        The ticker of the benchmark
    portfolio_trades: pd.DataFrame
        Object containing trades made within the portfolio

    Returns
    -------
    pd.DataFrame
        DataFrame with the top 10 of the benchmark's asset allocations
    pd.DataFrame
        DataFrame with the portfolio's asset allocations
    """
    ...

@log_start_end(log=logger)
def get_sectors_allocation(benchmark_ticker: str, portfolio_trades: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Get sector allocation for benchmark and portfolio [Source: Yahoo Finance]

    Parameters
    ----------
    benchmark_ticker: str
        The ticker of the benchmark
    portfolio_trades: pd.DataFrame
        Object containing trades made within the portfolio

    Returns
    -------
    pd.DataFrame
        DataFrame with benchmark allocations.
    pd.DataFrame
        DataFrame with portfolio allocations
    """
    ...

@log_start_end(log=logger)
def get_countries_allocation(benchmark_ticker: str, portfolio_trades: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Get countries allocation for benchmark and portfolio [Source: Yahoo Finance]

    Parameters
    ----------
    benchmark_ticker: str
        The ticker of the benchmark
    portfolio_trades: pd.DataFrame
        Object containing trades made within the portfolio

    Returns
    -------
    pd.DataFrame
        DataFrame with benchmark allocations.
    pd.DataFrame
        DataFrame with portfolio allocations
    """
    ...

@log_start_end(log=logger)
def get_regions_allocation(benchmark_ticker: str, portfolio_trades: pd.DataFrame) -> Tuple[pd.DataFrame, pd.DataFrame]:
    """Get regions allocation for benchmark and portfolio [Source: Yahoo Finance]

    Parameters
    ----------
    benchmark_ticker: str
        The ticker of the benchmark
    portfolio_trades: pd.DataFrame
        Object containing trades made within the portfolio

    Returns
    -------
    pd.DataFrame
        DataFrame with regional allocations.
    pd.DataFrame
        DataFrame with country allocations
    """
    ...

def get_symbol_allocation(symbol: str, category: str, col_name: str = ...) -> pd.DataFrame:
    """Get benchmark allocation [Source: Fidelity]

    Parameters
    ----------
    symbol: str
        ETF symbol to get allocation
    category: str
        Chosen category: Country or Region

    Returns
    -------
    pd.DataFrame
        Dictionary with category allocations
    """
    ...

@log_start_end(log=logger)
def get_portfolio_allocation(category: str, portfolio_trades: pd.DataFrame) -> pd.DataFrame:
    """Get portfolio allocation

    Parameters
    ----------
    category: str
        Chosen category: Country or Region
    portfolio_trades: pd.DataFrame
        Object containing trades made within the portfolio

    Returns
    -------
    pd.DataFrame
        Dictionary with country allocations
    """
    ...

