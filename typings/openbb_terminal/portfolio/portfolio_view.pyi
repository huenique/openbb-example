"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Optional, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.decorators import log_start_end
from openbb_terminal.portfolio.portfolio_model import PortfolioEngine

"""Portfolio View"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def load_info(): # -> None:
    """Print instructions to load a CSV

    Returns
    -------
    text : str
        Information on how to load a csv
    """
    ...

@log_start_end(log=logger)
def display_transactions(portfolio_engine: PortfolioEngine, show_index=..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display portfolio transactions

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        Instance of PortfolioEngine class
    show_index: bool
        Defaults to False.
    limit: int
        Number of rows to display
    export : str
        Export certain type of data
    """
    ...

@log_start_end(log=logger)
def display_assets_allocation(portfolio_engine: PortfolioEngine, limit: int = ..., tables: bool = ..., recalculate: bool = ...): # -> None:
    """Display portfolio asset allocation compared to the benchmark

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        Instance of PortfolioEngine class
    limit: int
        The amount of assets you wish to show, by default this is set to 10
    tables: bool
        Whether to include separate asset allocation tables
    recalculate: bool
        Whether to recalculate the allocation
    """
    ...

@log_start_end(log=logger)
def display_sectors_allocation(portfolio_engine: PortfolioEngine, limit: int = ..., tables: bool = ..., recalculate: bool = ...): # -> None:
    """Display portfolio sector allocation compared to the benchmark

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        Instance of PortfolioEngine class
    limit: int
        The amount of assets you wish to show, by default this is set to 10
    tables: bool
        Whether to include separate asset allocation tables
    recalculate: bool
        Whether to recalculate the allocation
    """
    ...

@log_start_end(log=logger)
def display_countries_allocation(portfolio_engine: PortfolioEngine, limit: int = ..., tables: bool = ..., recalculate: bool = ...): # -> None:
    """Display portfolio country allocation compared to the benchmark

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        Instance of PortfolioEngine class
    limit: int
        The amount of assets you wish to show, by default this is set to 10
    tables: bool
        Whether to include separate asset allocation tables
    recalculate: bool
        Whether to recalculate the allocation
    """
    ...

@log_start_end(log=logger)
def display_regions_allocation(portfolio_engine: PortfolioEngine, limit: int = ..., tables: bool = ..., recalculate: bool = ...): # -> None:
    """Display portfolio region allocation compared to the benchmark

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        Instance of PortfolioEngine class
    limit: int
        The amount of assets you wish to show, by default this is set to 10
    tables: bool
        Whether to include separate asset allocation tables
    recalculate: bool
        Whether to recalculate the allocation
    """
    ...

def display_category(**kwargs): # -> None:
    """Display category tables

    Parameters
    ----------
    **kwargs
    """
    ...

@log_start_end(log=logger)
def display_performance_vs_benchmark(portfolio_engine: PortfolioEngine, show_all_trades: bool = ...): # -> None:
    """Display portfolio performance vs the benchmark

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    show_all_trades: bool
        Whether to also show all trades made and their performance (default is False)
    """
    ...

@log_start_end(log=logger)
def display_yearly_returns(portfolio_engine: PortfolioEngine, window: str = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display yearly returns

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    window : str
        interval to compare cumulative returns and benchmark
    raw : False
        Display raw data from cumulative return
    export : str
        Export certain type of data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_monthly_returns(portfolio_engine: PortfolioEngine, window: str = ..., instrument: str = ..., graph: bool = ..., show_vals: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[None, OpenBBFigure]:
    """Display monthly returns

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    window : str
        interval to compare cumulative returns and benchmark
    instrument : str
        Display raw data from cumulative return, default is showing both the portfolio and benchmark in one table
    show_vals : False
        Show values on heatmap
    export : str
        Export certain type of data
    sheet_name : str
        Whether to export to a specific sheet name in an Excel file
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_daily_returns(portfolio_engine: PortfolioEngine, window: str = ..., raw: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display daily returns

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    window : str
        interval to compare cumulative returns and benchmark
    raw : False
        Display raw data from cumulative return
    limit : int
        Last daily returns to display
    export : str
        Export certain type of data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_distribution_returns(portfolio_engine: PortfolioEngine, window: str = ..., raw: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display daily returns

    Parameters
    ----------
    portfolio_engine : PortfolioEngine
        The engine for the portfolio
    window: str
        The window
    raw : bool
        Display raw data from cumulative return
    export : str
        Export certain type of data
    sheet_name: Optional[str]
        The name for the sheet
    external_axes : bool
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_holdings_value(portfolio_engine: PortfolioEngine, unstack: bool = ..., raw: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display holdings of assets (absolute value)

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    unstack: bool
        Individual assets over time
    raw : bool
        To display raw data
    limit : int
        Number of past market days to display holdings
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export plot
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_holdings_percentage(portfolio_engine: PortfolioEngine, unstack: bool = ..., raw: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display holdings of assets (in percentage)

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    unstack: bool
        Individual assets over time
    raw : bool
        To display raw data
    limit : int
        Number of past market days to display holdings
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export plot
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_rolling_volatility(portfolio_engine: PortfolioEngine, window: str = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display rolling volatility

    Parameters
    ----------
    portfolio : PortfolioEngine
        PortfolioEngine object
    interval: str
        interval for window to consider
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Export to file
    external_axes: bool
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_rolling_sharpe(portfolio_engine: PortfolioEngine, risk_free_rate: float = ..., window: str = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display rolling sharpe

    Parameters
    ----------
    portfolio : PortfolioEngine
        PortfolioEngine object
    risk_free_rate: float
        Value to use for risk free rate in sharpe/other calculations
    window: str
        interval for window to consider
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Export to file
    external_axes: bool
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_rolling_sortino(portfolio_engine: PortfolioEngine, risk_free_rate: float = ..., window: str = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display rolling sortino

    Parameters
    ----------
    portfolio : PortfolioEngine
        PortfolioEngine object
    risk_free_rate: float
        Value to use for risk free rate in sharpe/other calculations
    window: str
        interval for window to consider
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Export to file
    external_axes: bool
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_rolling_beta(portfolio_engine: PortfolioEngine, window: str = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display rolling beta

    Parameters
    ----------
    portfolio : PortfolioEngine
        PortfolioEngine object
    window: str
        interval for window to consider
        Possible options: mtd, qtd, ytd, 1d, 5d, 10d, 1m, 3m, 6m, 1y, 3y, 5y, 10y.
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Export to file
    external_axes: bool
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_maximum_drawdown(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display maximum drawdown curve

    Parameters
    ----------
    portfolio : PortfolioEngine
        PortfolioEngine object
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_rsquare(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display R-square

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_skewness(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display skewness

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_kurtosis(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display kurtosis

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_stats(portfolio_engine: PortfolioEngine, window: str = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display stats

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    window : str
        interval to consider. Choices are: mtd, qtd, ytd, 3m, 6m, 1y, 3y, 5y, 10y, all
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_volatility(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display volatility for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_sharpe_ratio(portfolio_engine: PortfolioEngine, risk_free_rate: float = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display sharpe ratio for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    risk_free_rate: float
        Risk free rate value
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_sortino_ratio(portfolio_engine: PortfolioEngine, risk_free_rate: float = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display sortino ratio for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    risk_free_rate: float
        Risk free rate value
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_maximum_drawdown_ratio(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display maximum drawdown for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_gaintopain_ratio(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display gain-to-pain ratio for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine object with returns and benchmark loaded
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_tracking_error(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display tracking error for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine object with returns and benchmark loaded
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_information_ratio(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display information ratio for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine object with returns and benchmark loaded
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_tail_ratio(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display tail ratio for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine object with returns and benchmark loaded
    window: str
        interval for window to consider
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_common_sense_ratio(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display common sense ratio for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine object with returns and benchmark loaded
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_jensens_alpha(portfolio_engine: PortfolioEngine, risk_free_rate: float = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display jensens alpha for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine object with returns and benchmark loaded
    risk_free_rate: float
            Risk free rate
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_calmar_ratio(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display calmar ratio for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine object with returns and benchmark loaded
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_kelly_criterion(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display kelly criterion for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine object with trades and returns loaded
    export : str
        Export data format
    """
    ...

def display_payoff_ratio(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display payoff ratio for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    export : str
        Export data format
    """
    ...

def display_profit_factor(portfolio_engine: PortfolioEngine, export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display profit factor for multiple intervals

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    export : str
        Export data format
    """
    ...

@log_start_end(log=logger)
def display_summary(portfolio_engine: PortfolioEngine, window: str = ..., risk_free_rate: float = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Display summary portfolio and benchmark returns

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    window : str
        interval to compare cumulative returns and benchmark
    risk_free_rate : float
        Risk free rate for calculations
    export : str
        Export certain type of data
    """
    ...

@log_start_end(log=logger)
def display_var(portfolio_engine: PortfolioEngine, use_mean: bool = ..., adjusted_var: bool = ..., student_t: bool = ..., percentile: float = ...): # -> None:
    """Display portfolio VaR

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    use_mean: bool
        if one should use the data mean return
    adjusted_var: bool
        if one should have VaR adjusted for skew and kurtosis (Cornish-Fisher-Expansion)
    student_t: bool
        If one should use the student-t distribution
    percentile: float
        var percentile (%)
    """
    ...

@log_start_end(log=logger)
def display_es(portfolio_engine: PortfolioEngine, use_mean: bool = ..., distribution: str = ..., percentile: float = ...): # -> None:
    """Display expected shortfall

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    use_mean:
        if one should use the data mean return
    distribution: str
        choose distribution to use: logistic, laplace, normal
    percentile: float
        es percentile (%)
    """
    ...

@log_start_end(log=logger)
def display_omega(portfolio_engine: PortfolioEngine, threshold_start: float = ..., threshold_end: float = ...): # -> None:
    """Display omega ratio

    Parameters
    ----------
    portfolio_engine: PortfolioEngine
        PortfolioEngine class instance, this will hold transactions and perform calculations.
        Use `portfolio.load` to create a PortfolioEngine.
    threshold_start: float
        annualized target return threshold start of plotted threshold range
    threshold_end: float
        annualized target return threshold end of plotted threshold range
    """
    ...

@log_start_end(log=logger)
def display_attribution_categorization(display: pd.DataFrame, time_period: str, attrib_type: str, plot_fields: list, show_table: bool = ..., external_axes: bool = ...): # -> OpenBBFigure | None:
    """Display attribution for sector comparison to portfolio

    Parameters
    ----------
    display: pd.DataFrame
        Dataframe to display
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

