"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import List, Optional, Tuple
from openbb_terminal.decorators import check_api_key, log_start_end

""" Fred Model """
__docformat__ = ...
logger = ...
harmonized_cpi_path = ...
cpi_path = ...
CPI_COUNTRIES = ...
CPI_UNITS = ...
CPI_FREQUENCY = ...
EQUITY_INDICES = ...
@log_start_end(log=logger)
@check_api_key(["API_FRED_KEY"])
def check_series_id(series_id: str) -> Tuple[bool, dict]:
    """Checks if series ID exists in fred

    Parameters
    ----------
    series_id: str
        Series ID to check

    Returns
    -------
    Tuple[bool, Dict]
        Boolean if series ID exists,
        Dictionary of series information
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_FRED_KEY"])
def get_series_notes(search_query: str) -> pd.DataFrame:
    """Get series notes. [Source: FRED]

    Parameters
    ----------
    search_query : str
        Text query to search on fred series notes database

    Returns
    -------
    pd.DataFrame
        DataFrame of matched series
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_FRED_KEY"])
def get_series_data(series_id: str, start_date: Optional[str] = ..., end_date: Optional[str] = ...) -> pd.DataFrame:
    """Get Series data. [Source: FRED]

    Parameters
    ----------
    series_id : str
        Series ID to get data from
    start_date : Optional[str]
        Start date to get data from, format yyyy-mm-dd
    end_date : Optional[str]
        End data to get from, format yyyy-mm-dd

    Returns
    -------
    pd.DataFrame
        Series data
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_FRED_KEY"])
def get_aggregated_series_data(series_ids: List[str], start_date: Optional[str] = ..., end_date: Optional[str] = ...) -> Tuple[pd.DataFrame, dict]:
    """Get Series data. [Source: FRED]

    Parameters
    ----------
    series_ids : List[str]
        Series ID to get data from
    start_date : str
        Start date to get data from, format yyyy-mm-dd
    end_date : str
        End data to get from, format yyyy-mm-dd

    Returns
    -------
    pd.DataFrame
        Series data
    dict
        Dictionary of series ids and titles
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_FRED_KEY"])
def get_cpi(countries: list, units: str = ..., frequency: str = ..., harmonized: bool = ..., smart_select: bool = ..., options: bool = ..., start_date: Optional[str] = ..., end_date: Optional[str] = ...) -> pd.DataFrame:
    """Obtain CPI data from FRED. [Source: FRED]

    Parameters
    ----------
    countries: list
        The country or countries you want to see.
    units: str
        The units you want to see, can be "growth_previous", "growth_same" or "index_2015".
    frequency: str
        The frequency you want to see, either "annual", monthly" or "quarterly".
    harmonized: bool
        Whether you wish to obtain harmonized data.
    smart_select: bool
        Whether to assist with the selection.
    options: bool
        Whether to return the options.
    start_date: Optional[str]
        Start date, formatted YYYY-MM-DD
    end_date: Optional[str]
        End date, formatted YYYY-MM-DD
    """
    ...

@log_start_end(log=logger)
@check_api_key(["API_FRED_KEY"])
def get_usd_liquidity(overlay: str = ..., show: bool = ...) -> pd.DataFrame:
    """The USD Liquidity Index is defined as: [WALCL - WLRRAL - WDTGAL]. It is expressed in billions of USD.

    Parameters
    -----------
    overlay: str
        An equity index to overlay, as a FRED Series ID. Defaults to none.
    show: bool
        Shows the list of valid equity indices to overlay.

    Returns
    --------
    pd.DataFrame
        DataFrame with the USD Liquidity Index.

    Examples
    ----------
    >>> from openbb_terminal.economy import fred_model
    >>> usd_liquidity = fred_model.get_usd_liquidity()

    Display the list of equity indices:
    >>> fred_model.get_usd_liquidity(show = True)
    """
    ...

