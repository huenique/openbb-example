"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Any, Dict, Optional, Tuple, Union
from openbb_terminal.decorators import log_start_end

""" EconDB Model """
__docformat__ = ...
logger = ...
COUNTRY_CODES = ...
COUNTRY_CURRENCIES = ...
PARAMETERS = ...
TRANSFORM = ...
SCALES = ...
TREASURIES: Dict = ...
@log_start_end(log=logger)
def get_macro_data(parameter: str, country: str, transform: str = ..., start_date: str = ..., end_date: Optional[str] = ..., symbol: str = ...) -> Tuple[pd.Series, Union[str, Any]]:
    """Query the EconDB database to find specific macro data about a company [Source: EconDB]

    Parameters
    ----------
    parameter: str
        The type of data you wish to display
    country : str
        the selected country
    transform : str
        select data transformation from:
            '' - no transformation
            'TPOP' - total percentage change on period,
            'TOYA' - total percentage since 1 year ago,
            'TUSD' - level USD,
            'TPGP' - Percentage of GDP,
            'TNOR' - Start = 100
    start_date : str
        The starting date, format "YEAR-MONTH-DAY", i.e. 2010-12-31.
    end_date : Optional[str]
        The end date, format "YEAR-MONTH-DAY", i.e. 2020-06-05.
    symbol : str
        In what currency you wish to convert all values.

    Returns
    -------
    Tuple[pd.Series, Union[str, Any]]
        A series with the requested macro data of the chosen country,
        The units of the macro data, e.g. 'Bbl/day" for oil.
    """
    ...

@log_start_end(log=logger)
def get_macro_transform() -> Dict[str, str]:
    """This function returns the available macro transform with detail.

    Returns
    -------
    Dict[str, str]
        A dictionary with the available macro transforms.
    """
    ...

@log_start_end(log=logger)
def get_macro_parameters() -> Dict[str, Dict[str, str]]:
    """This function returns the available macro parameters with detail.

    Returns
    -------
    Dict[str, Dict[str, str]]
        A dictionary with the available macro parameters.
    """
    ...

@log_start_end(log=logger)
def get_macro_countries() -> Dict[str, str]:
    """This function returns the available countries and respective currencies.

    Returns
    -------
    Dict[str, str]
        A dictionary with the available countries and respective currencies.
    """
    ...

@log_start_end(log=logger)
def get_aggregated_macro_data(parameters: Optional[list] = ..., countries: Optional[list] = ..., transform: str = ..., start_date: str = ..., end_date: Optional[str] = ..., symbol: str = ...) -> Tuple[pd.DataFrame, Dict[Any, Dict[Any, Any]], str]:
    """This functions groups the data queried from the EconDB database [Source: EconDB]

    Parameters
    ----------
    parameters: list
        The type of data you wish to download. Available parameters can be accessed through economy.macro_parameters().
    countries : list
        The selected country or countries. Available countries can be accessed through economy.macro_countries().
    transform : str
        The selected transform. Available transforms can be accessed through get_macro_transform().
    start_date : str
        The starting date, format "YEAR-MONTH-DAY", i.e. 2010-12-31.
    end_date : Optional[str]
        The end date, format "YEAR-MONTH-DAY", i.e. 2020-06-05.
    symbol : str
        In what currency you wish to convert all values.

    Returns
    -------
    Tuple[pd.DataFrame, Dict[Any, Dict[Any, Any]], str]
        A DataFrame with the requested macro data of all chosen countries,
        A dictionary containing the units of each country's parameter (e.g. EUR),
        A string denomination which can be Trillions, Billions, Millions, Thousands

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> macro_df = openbb.economy.macro()
    """
    ...

@log_start_end(log=logger)
def get_treasuries(instruments: Optional[list] = ..., maturities: Optional[list] = ..., frequency: str = ..., start_date: str = ..., end_date: Optional[str] = ...) -> pd.DataFrame:
    """Get U.S. Treasury rates [Source: EconDB]

    Parameters
    ----------
    instruments: list
        Type(s) of treasuries, nominal, inflation-adjusted (long term average) or secondary market.
        Available options can be accessed through economy.treasury_maturities().
    maturities : list
        Treasury maturities to get. Available options can be accessed through economy.treasury_maturities().
    frequency : str
        Frequency of the data, this can be annually, monthly, weekly or daily.
    start_date : str
        Starting date, format "YEAR-MONTH-DAY", i.e. 2010-12-31.
    end_date : Optional[str]
        End date, format "YEAR-MONTH-DAY", i.e. 2020-06-05.

    Returns
    -------
    treasury_data: pd.Dataframe
        Holds data of the selected types and maturities

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> openbb.economy.treasury()
    """
    ...

@log_start_end(log=logger)
def get_treasury_maturities() -> pd.DataFrame:
    """Get treasury maturity options [Source: EconDB]

    Returns
    -------
    df: pd.DataFrame
        Contains the name of the instruments and a string containing all options.
    """
    ...

