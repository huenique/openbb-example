"""
This type stub file was generated by pyright.
"""

from typing import List, Optional
from openbb_terminal.decorators import check_api_key, log_start_end
from openbb_terminal.parent_classes import BaseController

""" Econ Controller """
__docformat__ = ...
logger = ...
class EconomyController(BaseController):
    """Economy Controller class"""
    CHOICES_COMMANDS = ...
    CHOICES_MENUS = ...
    wsj_sortby_cols_dict = ...
    map_period_list = ...
    map_filter_list = ...
    macro_us_interval = ...
    macro_us_types = ...
    overview_options = ...
    tyld_maturity = ...
    valuation_sort_cols_dict = ...
    performance_sort_dict = ...
    index_interval = ...
    futures_commodities = ...
    macro_show = ...
    d_GROUPS = ...
    PATH = ...
    stored_datasets = ...
    FILE_PATH = ...
    CHOICES_GENERATION = ...
    def __init__(self, queue: Optional[List[str]] = ...) -> None:
        """Constructor"""
        ...
    
    def parse_input(self, an_input: str) -> List:
        """Parse controller input

        Overrides the parent class function to handle github org/repo path convention.
        See `BaseController.parse_input()` for details.
        """
        ...
    
    def update_runtime_choices(self): # -> None:
        ...
    
    def print_help(self): # -> None:
        """Print help"""
        ...
    
    @log_start_end(log=logger)
    def call_overview(self, other_args: List[str]): # -> None:
        """Process overview command"""
        ...
    
    @log_start_end(log=logger)
    def call_futures(self, other_args: List[str]): # -> None:
        """Process futures command"""
        ...
    
    @log_start_end(log=logger)
    def call_map(self, other_args: List[str]): # -> None:
        """Process map command"""
        ...
    
    @log_start_end(log=logger)
    def call_bigmac(self, other_args: List[str]): # -> None:
        """Process bigmac command"""
        ...
    
    @log_start_end(log=logger)
    def call_gdp(self, other_args: List[str]): # -> None:
        """Process gdp command"""
        ...
    
    @log_start_end(log=logger)
    def call_rgdp(self, other_args: List[str]): # -> None:
        """Process rgdp command"""
        ...
    
    @log_start_end(log=logger)
    def call_fgdp(self, other_args: List[str]): # -> None:
        """Process fgdp command"""
        ...
    
    @log_start_end(log=logger)
    def call_debt(self, other_args: List[str]): # -> None:
        """Process debt command"""
        ...
    
    @log_start_end(log=logger)
    def call_balance(self, other_args: List[str]): # -> None:
        """Process balance command"""
        ...
    
    @log_start_end(log=logger)
    def call_revenue(self, other_args: List[str]): # -> None:
        """Process revenue command"""
        ...
    
    @log_start_end(log=logger)
    def call_spending(self, other_args: List[str]): # -> None:
        """Process spending command"""
        ...
    
    @log_start_end(log=logger)
    def call_trust(self, other_args: List[str]): # -> None:
        """Process trust command"""
        ...
    
    @log_start_end(log=logger)
    def call_macro(self, other_args: List[str]): # -> Any | None:
        """Process macro command"""
        ...
    
    @check_api_key(["API_FRED_KEY"])
    def call_fred(self, other_args: List[str]): # -> Any | None:
        """Process fred command"""
        ...
    
    @log_start_end(log=logger)
    def call_index(self, other_args: List[str]): # -> Any | None:
        """Process index command"""
        ...
    
    @log_start_end(log=logger)
    def call_treasury(self, other_args: List[str]): # -> None:
        """Process treasury command"""
        ...
    
    @log_start_end(log=logger)
    def call_cpi(self, other_args: List[str]): # -> None:
        """Process cpi command"""
        ...
    
    @log_start_end(log=logger)
    def call_ccpi(self, other_args: List[str]): # -> None:
        """Process ccpi command"""
        ...
    
    @log_start_end(log=logger)
    def call_events(self, other_args: List[str]): # -> None:
        """Process events command"""
        ...
    
    @log_start_end(log=logger)
    def call_plot(self, other_args: List[str]): # -> None:
        """Process plot command"""
        ...
    
    @log_start_end(log=logger)
    def call_valuation(self, other_args: List[str]): # -> None:
        """Process valuation command"""
        ...
    
    @log_start_end(log=logger)
    def call_performance(self, other_args: List[str]): # -> None:
        """Process performance command"""
        ...
    
    @log_start_end(log=logger)
    def call_edebt(self, other_args: List[str]): # -> None:
        """Process edebt command"""
        ...
    
    @log_start_end(log=logger)
    def call_usdli(self, other_args: List[str]): # -> None:
        """Process usdli command"""
        ...
    
    @log_start_end(log=logger)
    def call_eval(self, other_args): # -> None:
        ...
    
    @log_start_end(log=logger)
    def call_qa(self, _): # -> None:
        """Process qa command"""
        ...
    


