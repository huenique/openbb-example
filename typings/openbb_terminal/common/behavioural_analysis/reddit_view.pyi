"""
This type stub file was generated by pyright.
"""

import praw
from typing import Dict, Optional, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.common.behavioural_analysis.reddit_helpers import reddit_requirements
from openbb_terminal.decorators import check_api_key, log_start_end

"""Reddit View."""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
@check_api_key(reddit_requirements)
def print_and_record_reddit_post(submissions_dict: Dict, submission: praw.models.reddit.submission.Submission): # -> None:
    """Print reddit submission.

    Parameters
    ----------
    submissions_dict : Dict
        Dictionary for storing reddit post information
    submission : praw.models.reddit.submission.Submission
        Submission to show
    """
    ...

@log_start_end(log=logger)
@check_api_key(reddit_requirements)
def print_reddit_post(sub: tuple): # -> None:
    """Print reddit submission.

    Parameters
    ----------
    sub : tuple
        Row from submissions dataframe
    """
    ...

@log_start_end(log=logger)
@check_api_key(reddit_requirements)
def display_popular_tickers(limit: int = ..., post_limit: int = ..., subreddits: str = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Print table showing latest popular tickers. [Source: Reddit].

    Parameters
    ----------
    limit : int
        Number of top tickers to get
    post_limit : int
        How many posts to analyze in each subreddit
    subreddits : str, optional
        String of comma separated subreddits.
    export : str
        Format to export dataframe
    """
    ...

@log_start_end(log=logger)
@check_api_key(reddit_requirements)
def display_spac_community(limit: int = ..., popular: bool = ...): # -> None:
    """Print tickers mentioned in r/SPACs [Source: Reddit].

    Parameters
    ----------
    limit: int
        Number of posts to look through
    popular: bool
        Search by popular instead of new
    """
    ...

@log_start_end(log=logger)
@check_api_key(reddit_requirements)
def display_wsb_community(limit: int = ..., new: bool = ...): # -> None:
    """Print WSB posts.

    Parameters
    ----------
    limit : int, optional
        Number of posts to look at, by default 10
    new : bool, optional
        Flag to sort by new instead of hot, by default False
    """
    ...

@log_start_end(log=logger)
@check_api_key(reddit_requirements)
def display_due_diligence(limit: int = ..., n_days: int = ..., show_all_flairs: bool = ...): # -> None:
    """Print Reddit due diligence data for a given ticker.

    Parameters
    ----------
    limit: int
        Number of posts to get
    n_days: int
        Number of days back to get posts
    show_all_flairs: bool
        Search through all flairs (apart from Yolo and Meme)
    """
    ...

@log_start_end(log=logger)
@check_api_key(reddit_requirements)
def display_redditsent(symbol: str, sortby: str = ..., limit: int = ..., graphic: bool = ..., time_frame: str = ..., full_search: bool = ..., subreddits: str = ..., display: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plot Reddit sentiment about a search term. Prints table showing if display is True.

    Parameters
    ----------
    symbol: str
        The ticker symbol being search for in Reddit
    sortby: str
        Type of search
    limit: str
        Number of posts to get at most
    graphic: bool
        Displays box and whisker plot
    time_frame: str
        Time frame for search
    full_search: bool
        Enable comprehensive search for ticker
    subreddits: str
        Comma-separated list of subreddits
    display: bool
        Enable printing of raw sentiment values for each post
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

