"""
This type stub file was generated by pyright.
"""

import pandas as pd
from datetime import datetime
from typing import Any, List, Optional, Union
from openbb_terminal import OpenBBFigure
from openbb_terminal.decorators import log_start_end

"""Quantitative Analysis View"""
__docformat__ = ...
logger = ...
def lambda_color_red(val: Any) -> str:
    """Adds red to dataframe value"""
    ...

@log_start_end(log=logger)
def display_summary(data: pd.DataFrame, export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Prints table showing summary statistics

    Parameters
    ----------
    data : pd.DataFrame
        DataFrame to get statistics of
    export : str
        Format to export data
    """
    ...

@log_start_end(log=logger)
def display_hist(data: pd.DataFrame, target: str, symbol: str = ..., bins: int = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots histogram of data

    Parameters
    ----------
    data : pd.DataFrame
        Dataframe to look at
    target : str
        Data column to get histogram of the dataframe
    symbol : str
        Name of dataset
    bins : int
        Number of bins in histogram
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> df = openbb.stocks.load("AAPL")
    >>> openbb.qa.hist(data=df, target="Adj Close")
    """
    ...

@log_start_end(log=logger)
def display_cdf(data: pd.DataFrame, target: str, symbol: str = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots Cumulative Distribution Function

    Parameters
    ----------
    data : pd.DataFrame
        Dataframe to look at
    target : str
        Data column
    symbol : str
        Name of dataset
    export : str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> df = openbb.stocks.load("AAPL")
    >>> openbb.qa.cdf(data=df, target="Adj Close")
    """
    ...

@log_start_end(log=logger)
def display_bw(data: pd.DataFrame, target: str, symbol: str = ..., yearly: bool = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots box and whisker plots

    Parameters
    ----------
    symbol : str
        Name of dataset
    data : pd.DataFrame
        Dataframe to look at
    target : str
        Data column to look at
    yearly : bool
        Flag to indicate yearly accumulation
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> df = openbb.stocks.load("AAPL")
    >>> openbb.qa.bw(data=df, target="Adj Close")
    """
    ...

@log_start_end(log=logger)
def display_acf(data: pd.DataFrame, target: str, symbol: str = ..., lags: int = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots Auto and Partial Auto Correlation of returns and change in returns

    Parameters
    ----------
    data : pd.DataFrame
        Dataframe to look at
    target : str
        Data column to look at
    symbol : str
        Name of dataset
    lags : int
        Max number of lags to look at
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> df = openbb.stocks.load("AAPL")
    >>> openbb.qa.acf(data=df, target="Adj Close")
    """
    ...

@log_start_end(log=logger)
def display_qqplot(data: pd.DataFrame, target: str, symbol: str = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots QQ plot for data against normal quantiles

    Parameters
    ----------
    data : pd.DataFrame
        Dataframe
    target : str
        Column in data to look at
    symbol : str
        Stock ticker
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> df = openbb.stocks.load("AAPL")
    >>> openbb.qa.qqplot(data=df, target="Adj Close")
    """
    ...

@log_start_end(log=logger)
def display_cusum(data: pd.DataFrame, target: str, threshold: float = ..., drift: float = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots Cumulative sum algorithm (CUSUM) to detect abrupt changes in data

    Parameters
    ----------
    data : pd.DataFrame
        Dataframe
    target : str
        Column of data to look at
    threshold : float
        Threshold value
    drift : float
        Drift parameter
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> df = openbb.stocks.load("AAPL")
    >>> openbb.qa.cusum(data=df, target="Adj Close")
    """
    ...

@log_start_end(log=logger)
def display_seasonal(symbol: str, data: pd.DataFrame, target: str, multiplicative: bool = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots seasonal decomposition data

    Parameters
    ----------
    symbol : str
        Name of dataset
    data : pd.DataFrame
        DataFrame
    target : str
        Column of data to look at
    multiplicative : bool
        Boolean to indicate multiplication instead of addition
    export : str
        Format to export trend and cycle data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

@log_start_end(log=logger)
def display_normality(data: pd.DataFrame, target: str, export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Prints table showing normality statistics

    Parameters
    ----------
    data : pd.DataFrame
        DataFrame
    target : str
        Column in data to look at
    export : str
        Format to export data
    """
    ...

@log_start_end(log=logger)
def display_unitroot(data: pd.DataFrame, target: str, fuller_reg: str = ..., kpss_reg: str = ..., export: str = ..., sheet_name: Optional[str] = ...): # -> None:
    """Prints table showing unit root test calculations

    Parameters
    ----------
    data : pd.DataFrame
        DataFrame
    target : str
        Column of data to look at
    fuller_reg : str
        Type of regression of ADF test. Can be ‘c’,’ct’,’ctt’,’nc’ 'c' - Constant and t - trend order
    kpss_reg : str
        Type of regression for KPSS test. Can be ‘c’,’ct'
    export : str
        Format for exporting data
    """
    ...

@log_start_end(log=logger)
def display_raw(data: pd.DataFrame, sortby: str = ..., ascend: bool = ..., limit: int = ..., export: str = ..., sheet_name: Optional[str] = ...) -> None:
    """Prints table showing raw stock data

    Parameters
    ----------
    data : DataFrame
        DataFrame with historical information
    sortby : str
        The column to sort by
    ascend : bool
        Whether to sort descending
    limit : int
        Number of rows to show
    export : str
        Export data as CSV, JSON, XLSX
    """
    ...

@log_start_end(log=logger)
def display_line(data: pd.Series, title: str = ..., log_y: bool = ..., markers_lines: Optional[List[datetime]] = ..., markers_scatter: Optional[List[datetime]] = ..., export: str = ..., sheet_name: Optional[str] = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Display line plot of data

    Parameters
    ----------
    data: pd.Series
        Data to plot
    title: str
        Title for plot
    log_y: bool
        Flag for showing y on log scale
    markers_lines: Optional[List[datetime]]
        List of dates to highlight using vertical lines
    markers_scatter: Optional[List[datetime]]
        List of dates to highlight using scatter
    sheet_name: str
        Optionally specify the name of the sheet the data is exported to.
    export: str
        Format to export data
    external_axes : bool, optional
        Whether to return the figure object or not, by default False

    Examples
    --------
    >>> from openbb_terminal.sdk import openbb
    >>> df = openbb.stocks.load("AAPL")
    >>> openbb.qa.line(data=df["Adj Close"])
    """
    ...

def display_var(data: pd.DataFrame, symbol: str = ..., use_mean: bool = ..., adjusted_var: bool = ..., student_t: bool = ..., percentile: float = ..., data_range: int = ..., portfolio: bool = ...) -> None:
    """Prints table showing VaR of dataframe.

    Parameters
    ----------
    data: pd.Dataframe
        Data dataframe
    use_mean: bool
        if one should use the data mean return
    symbol: str
        name of the data
    adjusted_var: bool
        if one should have VaR adjusted for skew and kurtosis (Cornish-Fisher-Expansion)
    student_t: bool
        If one should use the student-t distribution
    percentile: int
        var percentile
    data_range: int
        Number of rows you want to use VaR over
    portfolio: bool
        If the data is a portfolio
    """
    ...

def display_es(data: pd.DataFrame, symbol: str = ..., use_mean: bool = ..., distribution: str = ..., percentile: float = ..., portfolio: bool = ...) -> None:
    """Prints table showing expected shortfall.

    Parameters
    ----------
    data: pd.DataFrame
        Data dataframe
    use_mean:
        if one should use the data mean return
    symbol: str
        name of the data
    distribution: str
        choose distribution to use: logistic, laplace, normal
    percentile: int
        es percentile
    portfolio: bool
        If the data is a portfolio
    """
    ...

def display_sharpe(data: pd.DataFrame, rfr: float = ..., window: float = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots Calculated the sharpe ratio

    Parameters
    ----------
    data: pd.DataFrame
        selected dataframe column
    rfr: float
        risk free rate
    window: float
        length of the rolling window
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

def display_sortino(data: pd.DataFrame, target_return: float, window: float, adjusted: bool, external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots the sortino ratio

    Parameters
    ----------
    data: pd.DataFrame
        selected dataframe
    target_return: float
        target return of the asset
    window: float
        length of the rolling window
    adjusted: bool
        adjust the sortino ratio
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

def display_omega(data: pd.DataFrame, threshold_start: float = ..., threshold_end: float = ..., external_axes: bool = ...) -> Union[OpenBBFigure, None]:
    """Plots the omega ratio

    Parameters
    ----------
    data: pd.DataFrame
        stock dataframe
    threshold_start: float
        annualized target return threshold start of plotted threshold range
    threshold_end: float
        annualized target return threshold end of plotted threshold range
    external_axes : bool, optional
        Whether to return the figure object or not, by default False
    """
    ...

