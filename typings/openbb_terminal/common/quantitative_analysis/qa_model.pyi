"""
This type stub file was generated by pyright.
"""

import pandas as pd
from typing import Tuple, Union
from statsmodels.tsa.seasonal import DecomposeResult
from openbb_terminal.decorators import log_start_end

"""Quantitative Analysis Model"""
__docformat__ = ...
logger = ...
@log_start_end(log=logger)
def get_summary(data: pd.DataFrame) -> pd.DataFrame:
    """Print summary statistics

    Parameters
    ----------
    data : pd.DataFrame
        Dataframe to get summary statistics for

    Returns
    -------
    summary : pd.DataFrame
        Summary statistics
    """
    ...

@log_start_end(log=logger)
def get_seasonal_decomposition(data: pd.DataFrame, multiplicative: bool = ...) -> Tuple[DecomposeResult, pd.DataFrame, pd.DataFrame]:
    """Perform seasonal decomposition

    Parameters
    ----------
    data : pd.DataFrame
        Dataframe of targeted data
    multiplicative : bool
        Boolean to indicate multiplication instead of addition

    Returns
    -------
    Tuple[DecomposeResult, pd.DataFrame, pd.DataFrame]
        DecomposeResult class from statsmodels (observed, seasonal, trend, residual, and weights),
        Filtered cycle DataFrame,
        Filtered trend DataFrame
    """
    ...

@log_start_end(log=logger)
def get_normality(data: pd.DataFrame) -> pd.DataFrame:
    """
    Look at the distribution of returns and generate statistics on the relation to the normal curve.
    This function calculates skew and kurtosis (the third and fourth moments) and performs both
    a Jarque-Bera and Shapiro Wilk test to determine if data is normally distributed.

    Parameters
    ----------
    data : pd.DataFrame
        Dataframe of targeted data

    Returns
    -------
    pd.DataFrame
        Dataframe containing statistics of normality
    """
    ...

@log_start_end(log=logger)
def get_unitroot(data: pd.DataFrame, fuller_reg: str = ..., kpss_reg: str = ...) -> pd.DataFrame:
    """Calculate test statistics for unit roots

    Parameters
    ----------
    data : pd.DataFrame
        DataFrame of target variable
    fuller_reg : str
        Type of regression of ADF test. Can be ‘c’,’ct’,’ctt’,’nc’ 'c' - Constant and t - trend order
    kpss_reg : str
        Type of regression for KPSS test.  Can be ‘c’,’ct'

    Returns
    -------
    pd.DataFrame
        Dataframe with results of ADF test and KPSS test
    """
    ...

def calculate_adjusted_var(kurtosis: float, skew: float, ndp: float, std: float, mean: float) -> float:
    """Calculates VaR, which is adjusted for skew and kurtosis (Cornish-Fischer-Expansion)

    Parameters
    ----------
    kurtosis: float
        kurtosis of data
    skew: float
        skew of data
    ndp: float
        normal distribution percentage number (99% -> -2.326)
    std: float
        standard deviation of data
    mean: float
        mean of data

    Returns
    -------
    float
        Real adjusted VaR
    """
    ...

def get_var(data: pd.DataFrame, use_mean: bool = ..., adjusted_var: bool = ..., student_t: bool = ..., percentile: Union[int, float] = ..., portfolio: bool = ...) -> pd.DataFrame:
    """Gets value at risk for specified stock dataframe.

    Parameters
    ----------
    data: pd.DataFrame
        Data dataframe
    use_mean: bool
        If one should use the data mean for calculation
    adjusted_var: bool
        If one should return VaR adjusted for skew and kurtosis
    student_t: bool
        If one should use the student-t distribution
    percentile: Union[int,float]
        VaR percentile
    portfolio: bool
        If the data is a portfolio

    Returns
    -------
    pd.DataFrame
        DataFrame with Value at Risk per percentile
    """
    ...

def get_es(data: pd.DataFrame, use_mean: bool = ..., distribution: str = ..., percentile: Union[float, int] = ..., portfolio: bool = ...) -> pd.DataFrame:
    """Gets Expected Shortfall for specified stock dataframe.

    Parameters
    ----------
    data: pd.DataFrame
        Data dataframe
    use_mean: bool
        If one should use the data mean for calculation
    distribution: str
        Type of distribution, options: laplace, student_t, normal
    percentile: Union[float,int]
        VaR percentile
    portfolio: bool
        If the data is a portfolio

    Returns
    -------
    pd.DataFrame
        DataFrame with Expected Shortfall per percentile
    """
    ...

def get_sharpe(data: pd.DataFrame, rfr: float = ..., window: float = ...) -> pd.DataFrame:
    """Calculates the sharpe ratio

    Parameters
    ----------
    data: pd.DataFrame
        selected dataframe column
    rfr: float
        risk free rate
    window: float
        length of the rolling window

    Returns
    -------
    sharpe: pd.DataFrame
        sharpe ratio
    """
    ...

def get_sortino(data: pd.DataFrame, target_return: float = ..., window: float = ..., adjusted: bool = ...) -> pd.DataFrame:
    """Calculates the sortino ratio

    Parameters
    ----------
    data: pd.DataFrame
        selected dataframe
    target_return: float
        target return of the asset
    window: float
        length of the rolling window
    adjusted: bool
        adjust the sortino ratio

    Returns
    -------
    sortino: pd.DataFrame
        sortino ratio
    """
    ...

def get_omega_ratio(data: pd.DataFrame, threshold: float = ...) -> float:
    """Calculates the omega ratio

    Parameters
    ----------
    data: pd.DataFrame
        selected dataframe
    threshold: float
        target return threshold

    Returns
    -------
    omega_ratio: float
        omega ratio
    """
    ...

def get_omega(data: pd.DataFrame, threshold_start: float = ..., threshold_end: float = ...) -> pd.DataFrame:
    """Get the omega series

    Parameters
    ----------
    data: pd.DataFrame
        stock dataframe
    threshold_start: float
        annualized target return threshold start of plotted threshold range
    threshold_end: float
        annualized target return threshold end of plotted threshold range

    Returns
    -------
    omega: pd.DataFrame
        omega series
    """
    ...

