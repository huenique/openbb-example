"""
This type stub file was generated by pyright.
"""

import pandas as pd
from openbb_terminal.decorators import log_start_end

"""Overlap Technical Analysis"""
___docformat__ = ...
logger = ...
WINDOW_LENGTHS = ...
WINDOW_LENGTHS2 = ...
@log_start_end(log=logger)
def ema(data: pd.Series, length: int = ..., offset: int = ...) -> pd.DataFrame:
    """Gets exponential moving average (EMA) for stock

    Parameters
    ----------
    data: pd.Series
        Dataframe of dates and prices
    length: int
        Length of EMA window
    offset: int
        Length of offset

    Returns
    -------
    pd.DataFrame
        Dataframe containing prices and EMA
    """
    ...

@log_start_end(log=logger)
def sma(data: pd.Series, length: int = ..., offset: int = ...) -> pd.DataFrame:
    """Gets simple moving average (SMA) for stock

    Parameters
    ----------
    data: pd.Series
        Dataframe of dates and prices
    length: int
        Length of SMA window
    offset: int
        Length of offset

    Returns
    -------
    pd.DataFrame
         Dataframe containing prices and SMA
    """
    ...

@log_start_end(log=logger)
def wma(data: pd.Series, length: int = ..., offset: int = ...) -> pd.DataFrame:
    """Gets weighted moving average (WMA) for stock

    Parameters
    ----------
    data: pd.Series
        Dataframe of dates and prices
    length: int
        Length of SMA window
    offset: int
        Length of offset

    Returns
    -------
    df_ta: pd.DataFrame
        Dataframe containing prices and WMA
    """
    ...

@log_start_end(log=logger)
def hma(data: pd.Series, length: int = ..., offset: int = ...) -> pd.DataFrame:
    """Gets hull moving average (HMA) for stock

    Parameters
    ----------
    data: pd.Series
        Dataframe of dates and prices
    length: int
        Length of SMA window
    offset: int
        Length of offset

    Returns
    -------
    df_ta: pd.DataFrame
        Dataframe containing prices and HMA
    """
    ...

@log_start_end(log=logger)
def zlma(data: pd.Series, length: int = ..., offset: int = ...) -> pd.DataFrame:
    """Gets zero-lagged exponential moving average (ZLEMA) for stock

    Parameters
    ----------
    data: pd.Series
        Dataframe of dates and prices
    length: int
        Length of EMA window
    offset: int
        Length of offset

    Returns
    -------
    df_ta: pd.DataFrame
        Dataframe containing prices and EMA
    """
    ...

@log_start_end(log=logger)
def vwap(data: pd.DataFrame, offset: int = ...) -> pd.DataFrame:
    """Gets volume weighted average price (VWAP)

    Parameters
    ----------
    data: pd.DataFrame
        Dataframe of dates and prices
    offset: int
        Length of offset
    Returns
    -------
    df_vwap: pd.DataFrame
        Dataframe with VWAP data
    """
    ...

